{
  "address": "0x04aeBae3137E6ed50856A3464D2359c5905A4104",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "name": "decode",
      "outputs": [
        {
          "internalType": "address",
          "name": "ret",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IAggregationExecutor",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "dstToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "srcReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            }
          ],
          "internalType": "struct IAggregationRouterV3.SwapDescriptionV3",
          "name": "desc",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "srcToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "data",
          "type": "bytes32[]"
        }
      ],
      "name": "unoswap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0e84cc71c79981b4f164384177574fc4903d36a70177b13b61561b61c506f21",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x04aeBae3137E6ed50856A3464D2359c5905A4104",
    "transactionIndex": 0,
    "gasUsed": "1898866",
    "logsBloom": "0x
    "blockHash": "0xf732bda4ff33bf2551d5bae6dcde0dca8c9df8297328d4e7779f79694dea03c0",
    "transactionHash": "0xf0e84cc71c79981b4f164384177574fc4903d36a70177b13b61561b61c506f21",
    "logs": [],
    "blockNumber": 13356640,
    "cumulativeGasUsed": "1898866",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"name\":\"decode\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IAggregationExecutor\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct IAggregationRouterV3.SwapDescriptionV3\",\"name\":\"desc\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"data\",\"type\":\"bytes32[]\"}],\"name\":\"unoswap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/oneinchV3/HOneInchV3.sol\":\"HOneInchV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/oneinchV2/IChi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IChi is IERC20 {\\n    function mint(uint256 value) external;\\n    function free(uint256 value) external returns (uint256 freed);\\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\\n}\\n\",\"keccak256\":\"0xf765f28875b7c34ee70f7a675efa0e996efaa2ef3eb75164abd84f56433802b8\",\"license\":\"MIT\"},\"contracts/handlers/oneinchV2/IGasDiscountExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IChi.sol\\\";\\n\\ninterface IGasDiscountExtension {\\n    function calculateGas(uint256 gasUsed, uint256 flags, uint256 calldataLength) external pure returns (IChi, uint256);\\n}\\n\",\"keccak256\":\"0x8569ecf59fdb3909901b65ec32b00b323661b2d521cd86af26de2cfcef3d6a42\",\"license\":\"MIT\"},\"contracts/handlers/oneinchV3/HOneInchV3.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"./IAggregationExecutor.sol\\\";\\nimport \\\"./IAggregationRouterV3.sol\\\";\\n\\ncontract HOneInchV3 is HandlerBase {\\n    using SafeMath for uint256;\\n\\n    // prettier-ignore\\n    address private constant _ONEINCH_SPENDER = 0x11111112542D85B3EF69AE05771c2dCCff4fAa26;\\n    // prettier-ignore\\n    address private constant _ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // prettier-ignore\\n    uint256 private constant _UNISWAP_PAIR_TOKEN0_CALL_SELECTOR_32 = 0x0dfe168100000000000000000000000000000000000000000000000000000000;\\n    // prettier-ignore\\n    uint256 private constant _UNISWAP_PAIR_TOKEN1_CALL_SELECTOR_32 = 0xd21220a700000000000000000000000000000000000000000000000000000000;\\n    // prettier-ignore\\n    uint256 private constant _ADDRESS_MASK =   0x000000000000000000000000ffffffffffffffffffffffffffffffffffffffff;\\n    // prettier-ignore\\n    uint256 private constant _REVERSE_MASK =   0x8000000000000000000000000000000000000000000000000000000000000000;\\n    // prettier-ignore\\n    uint256 private constant _WETH_MASK =      0x4000000000000000000000000000000000000000000000000000000000000000;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HOneInchV3\\\";\\n    }\\n\\n    function swap(\\n        IAggregationExecutor caller,\\n        IAggregationRouterV3.SwapDescriptionV3 calldata desc,\\n        bytes calldata data\\n    ) external payable returns (uint256 returnAmount) {\\n        if (_isNotNativeToken(address(desc.srcToken))) {\\n            _tokenApprove(\\n                address(desc.srcToken),\\n                _ONEINCH_SPENDER,\\n                desc.amount\\n            );\\n            try\\n                IAggregationRouterV3(_ONEINCH_SPENDER).swap(caller, desc, data)\\n            returns (uint256 ret, uint256) {\\n                returnAmount = ret;\\n            } catch Error(string memory message) {\\n                _revertMsg(\\\"swap\\\", message);\\n            } catch {\\n                _revertMsg(\\\"swap\\\");\\n            }\\n        } else {\\n            try\\n                IAggregationRouterV3(_ONEINCH_SPENDER).swap{value: desc.amount}(\\n                    caller,\\n                    desc,\\n                    data\\n                )\\n            returns (uint256 ret, uint256) {\\n                returnAmount = ret;\\n            } catch Error(string memory message) {\\n                _revertMsg(\\\"swap\\\", message);\\n            } catch {\\n                _revertMsg(\\\"swap\\\");\\n            }\\n        }\\n\\n        // Update involved token\\n        if (_isNotNativeToken(address(desc.dstToken)))\\n            _updateToken(address(desc.dstToken));\\n    }\\n\\n    function unoswap(\\n        IERC20 srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        bytes32[] calldata data\\n    ) external payable returns (uint256 returnAmount) {\\n        // Interact with 1inch\\n        if (_isNotNativeToken(address(srcToken))) {\\n            _tokenApprove(address(srcToken), _ONEINCH_SPENDER, amount);\\n            try\\n                IAggregationRouterV3(_ONEINCH_SPENDER).unoswap(\\n                    srcToken,\\n                    amount,\\n                    minReturn,\\n                    data\\n                )\\n            returns (uint256 ret) {\\n                returnAmount = ret;\\n            } catch Error(string memory message) {\\n                _revertMsg(\\\"unoswap\\\", message);\\n            } catch {\\n                _revertMsg(\\\"unoswap\\\");\\n            }\\n        } else {\\n            try\\n                IAggregationRouterV3(_ONEINCH_SPENDER).unoswap{value: amount}(\\n                    srcToken,\\n                    amount,\\n                    minReturn,\\n                    data\\n                )\\n            returns (uint256 ret) {\\n                returnAmount = ret;\\n            } catch Error(string memory message) {\\n                _revertMsg(\\\"unoswap\\\", message);\\n            } catch {\\n                _revertMsg(\\\"unoswap\\\");\\n            }\\n        }\\n\\n        address dstToken = decode(data);\\n        // Update involved token\\n        if (_isNotNativeToken(dstToken)) {\\n            _updateToken(dstToken);\\n        }\\n    }\\n\\n    function _isNotNativeToken(address token) internal pure returns (bool) {\\n        return (token != address(0) && token != _ETH_ADDRESS);\\n    }\\n\\n    function decode(bytes32[] calldata) public view returns (address ret) {\\n        assembly {\\n            function reRevert() {\\n                returndatacopy(0, 0, returndatasize())\\n                revert(0, returndatasize())\\n            }\\n\\n            // Get last 32 bytes\\n            let rawPair := calldataload(sub(calldatasize(), 0x20))\\n            let pair := and(rawPair, _ADDRESS_MASK)\\n            let emptyPtr := mload(0x40)\\n            mstore(0x40, add(emptyPtr, 0x20))\\n            // Check WETH_MASK config\\n            switch and(rawPair, _WETH_MASK)\\n                // If WETH_MASK not set, get token address from pair address\\n                case 0 {\\n                    switch and(rawPair, _REVERSE_MASK)\\n                        case 0 {\\n                            mstore(\\n                                emptyPtr,\\n                                _UNISWAP_PAIR_TOKEN1_CALL_SELECTOR_32\\n                            )\\n                        }\\n                        default {\\n                            mstore(\\n                                emptyPtr,\\n                                _UNISWAP_PAIR_TOKEN0_CALL_SELECTOR_32\\n                            )\\n                        }\\n                    if iszero(\\n                        staticcall(gas(), pair, emptyPtr, 0x4, emptyPtr, 0x20)\\n                    ) {\\n                        reRevert()\\n                    }\\n\\n                    ret := mload(emptyPtr)\\n                }\\n                // If WETH_MASK is set, return zero address\\n                default {\\n                    ret := 0x0\\n                }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x609bdda0d45de4ca66f81dd35f65fd59e8226f74cbf149f6e12d369c40e825ef\"},\"contracts/handlers/oneinchV3/IAggregationExecutor.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../oneinchV2/IGasDiscountExtension.sol\\\";\\n\\ninterface IAggregationExecutor is IGasDiscountExtension {\\n    function callBytes(bytes calldata data) external payable;  // 0xd9c45357\\n}\",\"keccak256\":\"0xf2a2d4babdc0286fbab2da4bf7d30741bef082440d5232bb6bf063e0750f3fd2\"},\"contracts/handlers/oneinchV3/IAggregationRouterV3.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IAggregationExecutor.sol\\\";\\n\\ninterface IAggregationRouterV3 {\\n    struct SwapDescriptionV3 {\\n        IERC20 srcToken;\\n        IERC20 dstToken;\\n        address srcReceiver;\\n        address dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 flags;\\n        bytes permit;\\n    }\\n\\n    function discountedSwap(\\n        IAggregationExecutor caller,\\n        SwapDescriptionV3 calldata desc,\\n        bytes calldata data\\n    )\\n    external\\n    payable\\n    returns (uint256 returnAmount, uint256 gasLeft, uint256 chiSpent);\\n\\n    function swap(\\n        IAggregationExecutor caller,\\n        SwapDescriptionV3 calldata desc,\\n        bytes calldata data\\n    )\\n        external\\n        payable\\n        returns (uint256 returnAmount, uint256 gasLeft);\\n\\n    function unoswap(\\n        IERC20 srcToken,\\n        uint256 amount,\\n        uint256 minReturn,\\n        bytes32[] calldata /* pools */\\n    ) external payable returns (uint256 returnAmount);\\n}\\n\",\"keccak256\":\"0xdab69cb2b09384ab604681a0ee4949337d3ad42c5bfee03f732a6b95bc5cff61\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061218f806100206000396000f3fe60806040526004361061009c5760003560e01c806399eb59b91161006457806399eb59b914610182578063be7e549a146101bf578063c2722916146101fc578063dc9031c414610206578063f5f5ba7214610243578063fa2901a51461026e5761009c565b80630f532d18146100a15780631413dc7d146100cc5780632e95b6c8146100f75780637c0252001461012757806387c1394314610157575b600080fd5b3480156100ad57600080fd5b506100b6610299565b6040516100c39190611c1b565b60405180910390f35b3480156100d857600080fd5b506100e16102c0565b6040516100ee9190611c1b565b60405180910390f35b610111600480360381019061010c9190611532565b6102e7565b60405161011e9190611da8565b60405180910390f35b610141600480360381019061013c9190611485565b6105d7565b60405161014e9190611da8565b60405180910390f35b34801561016357600080fd5b5061016c610903565b6040516101799190611da8565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a4919061145c565b61090f565b6040516101b69190611c1b565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e191906113ee565b610927565b6040516101f39190611bae565b60405180910390f35b610204610a2f565b005b34801561021257600080fd5b5061022d600480360381019061022891906115b2565b610a6a565b60405161023a9190611c1b565b60405180910390f35b34801561024f57600080fd5b50610258610a8b565b6040516102659190611ce6565b60405180910390f35b34801561027a57600080fd5b50610283610ac8565b6040516102909190611c36565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b60006102f286610ad3565b1561046057610316867311111112542d85b3ef69ae05771c2dccff4faa2687610b58565b7311111112542d85b3ef69ae05771c2dccff4faa2673ffffffffffffffffffffffffffffffffffffffff16632e95b6c887878787876040518663ffffffff1660e01b815260040161036b959493929190611c98565b602060405180830381600087803b15801561038557600080fd5b505af19250505080156103b657506040513d601f19601f820116820180604052508101906103b391906115db565b60015b610456576103c2612019565b806103cd5750610412565b61040c6040518060400160405280600781526020017f756e6f737761700000000000000000000000000000000000000000000000000081525082610c24565b50610451565b6104506040518060400160405280600781526020017f756e6f7377617000000000000000000000000000000000000000000000000000815250610c9c565b5b61045b565b809150505b6105a7565b7311111112542d85b3ef69ae05771c2dccff4faa2673ffffffffffffffffffffffffffffffffffffffff16632e95b6c88688888888886040518763ffffffff1660e01b81526004016104b6959493929190611c98565b6020604051808303818588803b1580156104cf57600080fd5b505af19350505050801561050157506040513d601f19601f820116820180604052508101906104fe91906115db565b60015b6105a15761050d612019565b80610518575061055d565b6105576040518060400160405280600781526020017f756e6f737761700000000000000000000000000000000000000000000000000081525082610c24565b5061059c565b61059b6040518060400160405280600781526020017f756e6f7377617000000000000000000000000000000000000000000000000000815250610c9c565b5b6105a6565b809150505b5b60006105b38484610927565b90506105be81610ad3565b156105cd576105cc81610cde565b5b5095945050505050565b60006105f48460000160208101906105ef9190611509565b610ad3565b156107765761062e84600001602081019061060f9190611509565b7311111112542d85b3ef69ae05771c2dccff4faa268660800135610b58565b7311111112542d85b3ef69ae05771c2dccff4faa2673ffffffffffffffffffffffffffffffffffffffff16637c025200868686866040518563ffffffff1660e01b81526004016106819493929190611c51565b6040805180830381600087803b15801561069a57600080fd5b505af19250505080156106cb57506040513d601f19601f820116820180604052508101906106c89190611604565b60015b61076b576106d7612019565b806106e25750610727565b6107216040518060400160405280600481526020017f737761700000000000000000000000000000000000000000000000000000000081525082610c24565b50610766565b6107656040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250610c9c565b5b610771565b81925050505b6108bf565b7311111112542d85b3ef69ae05771c2dccff4faa2673ffffffffffffffffffffffffffffffffffffffff16637c0252008560800135878787876040518663ffffffff1660e01b81526004016107ce9493929190611c51565b60408051808303818588803b1580156107e657600080fd5b505af19350505050801561081857506040513d601f19601f820116820180604052508101906108159190611604565b60015b6108b857610824612019565b8061082f5750610874565b61086e6040518060400160405280600481526020017f737761700000000000000000000000000000000000000000000000000000000081525082610c24565b506108b3565b6108b26040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250610c9c565b5b6108be565b81925050505b5b6108da8460200160208101906108d59190611509565b610ad3565b156108fb576108fa8460200160208101906108f59190611509565b610cde565b5b949350505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b6000610938565b3d6000803e3d6000fd5b602036033573ffffffffffffffffffffffffffffffffffffffff8116604051602081016040527f40000000000000000000000000000000000000000000000000000000000000008316600081146109925760009450610a25565b7f80000000000000000000000000000000000000000000000000000000000000008416600081146109e5577f0dfe1681000000000000000000000000000000000000000000000000000000008352610a09565b7fd21220a70000000000000000000000000000000000000000000000000000000083525b50602082600484865afa610a2057610a1f61092e565b5b815194505b5050505092915050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6190611d28565b60405180910390fd5b60008181548110610a7757fe5b906000526020600020016000915090505481565b60606040518060400160405280600a81526020017f484f6e65496e6368563300000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610b51575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401610b93929190611bf2565b600060405180830381600087803b158015610bad57600080fd5b505af1925050508015610bbe575060015b610c1e57610bee8260008573ffffffffffffffffffffffffffffffffffffffff16610cf59092919063ffffffff16565b610c1982828573ffffffffffffffffffffffffffffffffffffffff16610cf59092919063ffffffff16565b610c1f565b5b505050565b610c34610c2f610e53565b610e91565b610c3c610a8b565b8383604051602001610c519493929190611b4f565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c939190611ce6565b60405180910390fd5b610cdb816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250610c24565b50565b610cf2816000610fd890919063ffffffff16565b50565b6000811480610d8e575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610d3c929190611bc9565b60206040518083038186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c91906115db565b145b610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc490611d88565b60405180910390fd5b610e4e8363095ea7b360e01b8484604051602401610dec929190611bf2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061101d565b505050565b6000610e8c7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b60016110e490919063ffffffff16565b905090565b60606000821415610ed9576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610fd3565b6000808390505b6000811115610f03578180600101925050600a8181610efb57fe5b049050610ee0565b5060608167ffffffffffffffff81118015610f1d57600080fd5b506040519080825280601f01601f191660200182016040528015610f505781602001600182028036833780820191505090505b50905060008290505b6000811115610fcc57600a8581610f6c57fe5b0660300160f81b826001830381518110610f8257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581610fbb57fe5b049450808060019003915050610f59565b5080925050505b919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b606061107f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111049092919063ffffffff16565b90506000815111156110df578080602001905181019061109f9190611433565b6110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d590611d68565b60405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b6060611113848460008561111c565b90509392505050565b606082471015611161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115890611d08565b60405180910390fd5b61116a85611231565b6111a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a090611d48565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516111d39190611b38565b60006040518083038185875af1925050503d8060008114611210576040519150601f19603f3d011682016040523d82523d6000602084013e611215565b606091505b5091509150611225828286611244565b92505050949350505050565b600080823b905060008111915050919050565b60608315611254578290506112a4565b6000835111156112675782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129b9190611ce6565b60405180910390fd5b9392505050565b6000813590506112ba816120cf565b92915050565b60008083601f8401126112d257600080fd5b8235905067ffffffffffffffff8111156112eb57600080fd5b60208301915083602082028301111561130357600080fd5b9250929050565b600081519050611319816120e6565b92915050565b60008135905061132e816120fd565b92915050565b60008083601f84011261134657600080fd5b8235905067ffffffffffffffff81111561135f57600080fd5b60208301915083600182028301111561137757600080fd5b9250929050565b60008135905061138d81612114565b92915050565b6000813590506113a28161212b565b92915050565b600061010082840312156113bb57600080fd5b81905092915050565b6000813590506113d381612142565b92915050565b6000815190506113e881612142565b92915050565b6000806020838503121561140157600080fd5b600083013567ffffffffffffffff81111561141b57600080fd5b611427858286016112c0565b92509250509250929050565b60006020828403121561144557600080fd5b60006114538482850161130a565b91505092915050565b60006020828403121561146e57600080fd5b600061147c8482850161131f565b91505092915050565b6000806000806060858703121561149b57600080fd5b60006114a98782880161137e565b945050602085013567ffffffffffffffff8111156114c657600080fd5b6114d2878288016113a8565b935050604085013567ffffffffffffffff8111156114ef57600080fd5b6114fb87828801611334565b925092505092959194509250565b60006020828403121561151b57600080fd5b600061152984828501611393565b91505092915050565b60008060008060006080868803121561154a57600080fd5b600061155888828901611393565b9550506020611569888289016113c4565b945050604061157a888289016113c4565b935050606086013567ffffffffffffffff81111561159757600080fd5b6115a3888289016112c0565b92509250509295509295909350565b6000602082840312156115c457600080fd5b60006115d2848285016113c4565b91505092915050565b6000602082840312156115ed57600080fd5b60006115fb848285016113d9565b91505092915050565b6000806040838503121561161757600080fd5b6000611625858286016113d9565b9250506020611636858286016113d9565b9150509250929050565b61164981611ecf565b82525050565b61165881611ecf565b82525050565b600061166a8385611dd9565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561169957600080fd5b6020830292506116aa838584611fb9565b82840190509392505050565b6116bf81611eed565b82525050565b6116ce81611ef7565b82525050565b60006116e08385611dea565b93506116ed838584611fb9565b6116f683611ffb565b840190509392505050565b600061170d8385611dfb565b935061171a838584611fb9565b61172383611ffb565b840190509392505050565b600061173982611dc3565b6117438185611e0c565b9350611753818560208601611fc8565b80840191505092915050565b61176881611f71565b82525050565b61177781611f95565b82525050565b61178681611f95565b82525050565b600061179782611dce565b6117a18185611e17565b93506117b1818560208601611fc8565b6117ba81611ffb565b840191505092915050565b60006117d082611dce565b6117da8185611e28565b93506117ea818560208601611fc8565b80840191505092915050565b6000611803602683611e17565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611869601483611e17565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b60006118a9601d83611e17565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006118e9600183611e28565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000611929602a83611e17565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b600061198f600283611e28565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006119cf603683611e17565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b60006101008301611a3c6000840184611ea1565b611a49600086018261176e565b50611a576020840184611ea1565b611a64602086018261176e565b50611a726040840184611e33565b611a7f6040860182611640565b50611a8d6060840184611e33565b611a9a6060860182611640565b50611aa86080840184611eb8565b611ab56080860182611b1a565b50611ac360a0840184611eb8565b611ad060a0860182611b1a565b50611ade60c0840184611eb8565b611aeb60c0860182611b1a565b50611af960e0840184611e4a565b85830360e0870152611b0c8382846116d4565b925050508091505092915050565b611b2381611f67565b82525050565b611b3281611f67565b82525050565b6000611b44828461172e565b915081905092915050565b6000611b5b82876117c5565b9150611b66826118dc565b9150611b7282866117c5565b9150611b7d826118dc565b9150611b8982856117c5565b9150611b9482611982565b9150611ba082846117c5565b915081905095945050505050565b6000602082019050611bc3600083018461164f565b92915050565b6000604082019050611bde600083018561164f565b611beb602083018461164f565b9392505050565b6000604082019050611c07600083018561164f565b611c146020830184611b29565b9392505050565b6000602082019050611c3060008301846116b6565b92915050565b6000602082019050611c4b60008301846116c5565b92915050565b6000606082019050611c66600083018761175f565b8181036020830152611c788186611a28565b90508181036040830152611c8d818486611701565b905095945050505050565b6000608082019050611cad600083018861177d565b611cba6020830187611b29565b611cc76040830186611b29565b8181036060830152611cda81848661165e565b90509695505050505050565b60006020820190508181036000830152611d00818461178c565b905092915050565b60006020820190508181036000830152611d21816117f6565b9050919050565b60006020820190508181036000830152611d418161185c565b9050919050565b60006020820190508181036000830152611d618161189c565b9050919050565b60006020820190508181036000830152611d818161191c565b9050919050565b60006020820190508181036000830152611da1816119c2565b9050919050565b6000602082019050611dbd6000830184611b29565b92915050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e4260208401846112ab565b905092915050565b60008083356001602003843603038112611e6357600080fd5b83810192508235915060208301925067ffffffffffffffff821115611e8757600080fd5b600182023603841315611e9957600080fd5b509250929050565b6000611eb06020840184611393565b905092915050565b6000611ec760208401846113c4565b905092915050565b6000611eda82611f47565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000611f2e82611ecf565b9050919050565b6000611f4082611ecf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611f7c82611f83565b9050919050565b6000611f8e82611f47565b9050919050565b6000611fa082611fa7565b9050919050565b6000611fb282611f47565b9050919050565b82818337600083830152505050565b60005b83811015611fe6578082015181840152602081019050611fcb565b83811115611ff5576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015612029576120cc565b60046000803e61203a60005161200c565b6308c379a0811461204b57506120cc565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715612077575050506120cc565b808201805167ffffffffffffffff8111156120965750505050506120cc565b8060208301013d85018111156120b1575050505050506120cc565b6120ba82611ffb565b60208401016040528296505050505050505b90565b6120d881611ecf565b81146120e357600080fd5b50565b6120ef81611ee1565b81146120fa57600080fd5b50565b61210681611eed565b811461211157600080fd5b50565b61211d81611f23565b811461212857600080fd5b50565b61213481611f35565b811461213f57600080fd5b50565b61214b81611f67565b811461215657600080fd5b5056fea2646970667358221220ee03f03f8321a0c3dd0ff6e3332c71be131610af2dac28b76ca99a7a4d576f8564736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c806399eb59b91161006457806399eb59b914610182578063be7e549a146101bf578063c2722916146101fc578063dc9031c414610206578063f5f5ba7214610243578063fa2901a51461026e5761009c565b80630f532d18146100a15780631413dc7d146100cc5780632e95b6c8146100f75780637c0252001461012757806387c1394314610157575b600080fd5b3480156100ad57600080fd5b506100b6610299565b6040516100c39190611c1b565b60405180910390f35b3480156100d857600080fd5b506100e16102c0565b6040516100ee9190611c1b565b60405180910390f35b610111600480360381019061010c9190611532565b6102e7565b60405161011e9190611da8565b60405180910390f35b610141600480360381019061013c9190611485565b6105d7565b60405161014e9190611da8565b60405180910390f35b34801561016357600080fd5b5061016c610903565b6040516101799190611da8565b60405180910390f35b34801561018e57600080fd5b506101a960048036038101906101a4919061145c565b61090f565b6040516101b69190611c1b565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e191906113ee565b610927565b6040516101f39190611bae565b60405180910390f35b610204610a2f565b005b34801561021257600080fd5b5061022d600480360381019061022891906115b2565b610a6a565b60405161023a9190611c1b565b60405180910390f35b34801561024f57600080fd5b50610258610a8b565b6040516102659190611ce6565b60405180910390f35b34801561027a57600080fd5b50610283610ac8565b6040516102909190611c36565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b60006102f286610ad3565b1561046057610316867311111112542d85b3ef69ae05771c2dccff4faa2687610b58565b7311111112542d85b3ef69ae05771c2dccff4faa2673ffffffffffffffffffffffffffffffffffffffff16632e95b6c887878787876040518663ffffffff1660e01b815260040161036b959493929190611c98565b602060405180830381600087803b15801561038557600080fd5b505af19250505080156103b657506040513d601f19601f820116820180604052508101906103b391906115db565b60015b610456576103c2612019565b806103cd5750610412565b61040c6040518060400160405280600781526020017f756e6f737761700000000000000000000000000000000000000000000000000081525082610c24565b50610451565b6104506040518060400160405280600781526020017f756e6f7377617000000000000000000000000000000000000000000000000000815250610c9c565b5b61045b565b809150505b6105a7565b7311111112542d85b3ef69ae05771c2dccff4faa2673ffffffffffffffffffffffffffffffffffffffff16632e95b6c88688888888886040518763ffffffff1660e01b81526004016104b6959493929190611c98565b6020604051808303818588803b1580156104cf57600080fd5b505af19350505050801561050157506040513d601f19601f820116820180604052508101906104fe91906115db565b60015b6105a15761050d612019565b80610518575061055d565b6105576040518060400160405280600781526020017f756e6f737761700000000000000000000000000000000000000000000000000081525082610c24565b5061059c565b61059b6040518060400160405280600781526020017f756e6f7377617000000000000000000000000000000000000000000000000000815250610c9c565b5b6105a6565b809150505b5b60006105b38484610927565b90506105be81610ad3565b156105cd576105cc81610cde565b5b5095945050505050565b60006105f48460000160208101906105ef9190611509565b610ad3565b156107765761062e84600001602081019061060f9190611509565b7311111112542d85b3ef69ae05771c2dccff4faa268660800135610b58565b7311111112542d85b3ef69ae05771c2dccff4faa2673ffffffffffffffffffffffffffffffffffffffff16637c025200868686866040518563ffffffff1660e01b81526004016106819493929190611c51565b6040805180830381600087803b15801561069a57600080fd5b505af19250505080156106cb57506040513d601f19601f820116820180604052508101906106c89190611604565b60015b61076b576106d7612019565b806106e25750610727565b6107216040518060400160405280600481526020017f737761700000000000000000000000000000000000000000000000000000000081525082610c24565b50610766565b6107656040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250610c9c565b5b610771565b81925050505b6108bf565b7311111112542d85b3ef69ae05771c2dccff4faa2673ffffffffffffffffffffffffffffffffffffffff16637c0252008560800135878787876040518663ffffffff1660e01b81526004016107ce9493929190611c51565b60408051808303818588803b1580156107e657600080fd5b505af19350505050801561081857506040513d601f19601f820116820180604052508101906108159190611604565b60015b6108b857610824612019565b8061082f5750610874565b61086e6040518060400160405280600481526020017f737761700000000000000000000000000000000000000000000000000000000081525082610c24565b506108b3565b6108b26040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250610c9c565b5b6108be565b81925050505b5b6108da8460200160208101906108d59190611509565b610ad3565b156108fb576108fa8460200160208101906108f59190611509565b610cde565b5b949350505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b6000610938565b3d6000803e3d6000fd5b602036033573ffffffffffffffffffffffffffffffffffffffff8116604051602081016040527f40000000000000000000000000000000000000000000000000000000000000008316600081146109925760009450610a25565b7f80000000000000000000000000000000000000000000000000000000000000008416600081146109e5577f0dfe1681000000000000000000000000000000000000000000000000000000008352610a09565b7fd21220a70000000000000000000000000000000000000000000000000000000083525b50602082600484865afa610a2057610a1f61092e565b5b815194505b5050505092915050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6190611d28565b60405180910390fd5b60008181548110610a7757fe5b906000526020600020016000915090505481565b60606040518060400160405280600a81526020017f484f6e65496e6368563300000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614158015610b51575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b9050919050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401610b93929190611bf2565b600060405180830381600087803b158015610bad57600080fd5b505af1925050508015610bbe575060015b610c1e57610bee8260008573ffffffffffffffffffffffffffffffffffffffff16610cf59092919063ffffffff16565b610c1982828573ffffffffffffffffffffffffffffffffffffffff16610cf59092919063ffffffff16565b610c1f565b5b505050565b610c34610c2f610e53565b610e91565b610c3c610a8b565b8383604051602001610c519493929190611b4f565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c939190611ce6565b60405180910390fd5b610cdb816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250610c24565b50565b610cf2816000610fd890919063ffffffff16565b50565b6000811480610d8e575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401610d3c929190611bc9565b60206040518083038186803b158015610d5457600080fd5b505afa158015610d68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8c91906115db565b145b610dcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc490611d88565b60405180910390fd5b610e4e8363095ea7b360e01b8484604051602401610dec929190611bf2565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061101d565b505050565b6000610e8c7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b60016110e490919063ffffffff16565b905090565b60606000821415610ed9576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610fd3565b6000808390505b6000811115610f03578180600101925050600a8181610efb57fe5b049050610ee0565b5060608167ffffffffffffffff81118015610f1d57600080fd5b506040519080825280601f01601f191660200182016040528015610f505781602001600182028036833780820191505090505b50905060008290505b6000811115610fcc57600a8581610f6c57fe5b0660300160f81b826001830381518110610f8257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581610fbb57fe5b049450808060019003915050610f59565b5080925050505b919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b606061107f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166111049092919063ffffffff16565b90506000815111156110df578080602001905181019061109f9190611433565b6110de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d590611d68565b60405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b6060611113848460008561111c565b90509392505050565b606082471015611161576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115890611d08565b60405180910390fd5b61116a85611231565b6111a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111a090611d48565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516111d39190611b38565b60006040518083038185875af1925050503d8060008114611210576040519150601f19603f3d011682016040523d82523d6000602084013e611215565b606091505b5091509150611225828286611244565b92505050949350505050565b600080823b905060008111915050919050565b60608315611254578290506112a4565b6000835111156112675782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129b9190611ce6565b60405180910390fd5b9392505050565b6000813590506112ba816120cf565b92915050565b60008083601f8401126112d257600080fd5b8235905067ffffffffffffffff8111156112eb57600080fd5b60208301915083602082028301111561130357600080fd5b9250929050565b600081519050611319816120e6565b92915050565b60008135905061132e816120fd565b92915050565b60008083601f84011261134657600080fd5b8235905067ffffffffffffffff81111561135f57600080fd5b60208301915083600182028301111561137757600080fd5b9250929050565b60008135905061138d81612114565b92915050565b6000813590506113a28161212b565b92915050565b600061010082840312156113bb57600080fd5b81905092915050565b6000813590506113d381612142565b92915050565b6000815190506113e881612142565b92915050565b6000806020838503121561140157600080fd5b600083013567ffffffffffffffff81111561141b57600080fd5b611427858286016112c0565b92509250509250929050565b60006020828403121561144557600080fd5b60006114538482850161130a565b91505092915050565b60006020828403121561146e57600080fd5b600061147c8482850161131f565b91505092915050565b6000806000806060858703121561149b57600080fd5b60006114a98782880161137e565b945050602085013567ffffffffffffffff8111156114c657600080fd5b6114d2878288016113a8565b935050604085013567ffffffffffffffff8111156114ef57600080fd5b6114fb87828801611334565b925092505092959194509250565b60006020828403121561151b57600080fd5b600061152984828501611393565b91505092915050565b60008060008060006080868803121561154a57600080fd5b600061155888828901611393565b9550506020611569888289016113c4565b945050604061157a888289016113c4565b935050606086013567ffffffffffffffff81111561159757600080fd5b6115a3888289016112c0565b92509250509295509295909350565b6000602082840312156115c457600080fd5b60006115d2848285016113c4565b91505092915050565b6000602082840312156115ed57600080fd5b60006115fb848285016113d9565b91505092915050565b6000806040838503121561161757600080fd5b6000611625858286016113d9565b9250506020611636858286016113d9565b9150509250929050565b61164981611ecf565b82525050565b61165881611ecf565b82525050565b600061166a8385611dd9565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561169957600080fd5b6020830292506116aa838584611fb9565b82840190509392505050565b6116bf81611eed565b82525050565b6116ce81611ef7565b82525050565b60006116e08385611dea565b93506116ed838584611fb9565b6116f683611ffb565b840190509392505050565b600061170d8385611dfb565b935061171a838584611fb9565b61172383611ffb565b840190509392505050565b600061173982611dc3565b6117438185611e0c565b9350611753818560208601611fc8565b80840191505092915050565b61176881611f71565b82525050565b61177781611f95565b82525050565b61178681611f95565b82525050565b600061179782611dce565b6117a18185611e17565b93506117b1818560208601611fc8565b6117ba81611ffb565b840191505092915050565b60006117d082611dce565b6117da8185611e28565b93506117ea818560208601611fc8565b80840191505092915050565b6000611803602683611e17565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611869601483611e17565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b60006118a9601d83611e17565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006118e9600183611e28565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000611929602a83611e17565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b600061198f600283611e28565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006119cf603683611e17565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b60006101008301611a3c6000840184611ea1565b611a49600086018261176e565b50611a576020840184611ea1565b611a64602086018261176e565b50611a726040840184611e33565b611a7f6040860182611640565b50611a8d6060840184611e33565b611a9a6060860182611640565b50611aa86080840184611eb8565b611ab56080860182611b1a565b50611ac360a0840184611eb8565b611ad060a0860182611b1a565b50611ade60c0840184611eb8565b611aeb60c0860182611b1a565b50611af960e0840184611e4a565b85830360e0870152611b0c8382846116d4565b925050508091505092915050565b611b2381611f67565b82525050565b611b3281611f67565b82525050565b6000611b44828461172e565b915081905092915050565b6000611b5b82876117c5565b9150611b66826118dc565b9150611b7282866117c5565b9150611b7d826118dc565b9150611b8982856117c5565b9150611b9482611982565b9150611ba082846117c5565b915081905095945050505050565b6000602082019050611bc3600083018461164f565b92915050565b6000604082019050611bde600083018561164f565b611beb602083018461164f565b9392505050565b6000604082019050611c07600083018561164f565b611c146020830184611b29565b9392505050565b6000602082019050611c3060008301846116b6565b92915050565b6000602082019050611c4b60008301846116c5565b92915050565b6000606082019050611c66600083018761175f565b8181036020830152611c788186611a28565b90508181036040830152611c8d818486611701565b905095945050505050565b6000608082019050611cad600083018861177d565b611cba6020830187611b29565b611cc76040830186611b29565b8181036060830152611cda81848661165e565b90509695505050505050565b60006020820190508181036000830152611d00818461178c565b905092915050565b60006020820190508181036000830152611d21816117f6565b9050919050565b60006020820190508181036000830152611d418161185c565b9050919050565b60006020820190508181036000830152611d618161189c565b9050919050565b60006020820190508181036000830152611d818161191c565b9050919050565b60006020820190508181036000830152611da1816119c2565b9050919050565b6000602082019050611dbd6000830184611b29565b92915050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611e4260208401846112ab565b905092915050565b60008083356001602003843603038112611e6357600080fd5b83810192508235915060208301925067ffffffffffffffff821115611e8757600080fd5b600182023603841315611e9957600080fd5b509250929050565b6000611eb06020840184611393565b905092915050565b6000611ec760208401846113c4565b905092915050565b6000611eda82611f47565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000611f2e82611ecf565b9050919050565b6000611f4082611ecf565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611f7c82611f83565b9050919050565b6000611f8e82611f47565b9050919050565b6000611fa082611fa7565b9050919050565b6000611fb282611f47565b9050919050565b82818337600083830152505050565b60005b83811015611fe6578082015181840152602081019050611fcb565b83811115611ff5576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015612029576120cc565b60046000803e61203a60005161200c565b6308c379a0811461204b57506120cc565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715612077575050506120cc565b808201805167ffffffffffffffff8111156120965750505050506120cc565b8060208301013d85018111156120b1575050505050506120cc565b6120ba82611ffb565b60208401016040528296505050505050505b90565b6120d881611ecf565b81146120e357600080fd5b50565b6120ef81611ee1565b81146120fa57600080fd5b50565b61210681611eed565b811461211157600080fd5b50565b61211d81611f23565b811461212857600080fd5b50565b61213481611f35565b811461213f57600080fd5b50565b61214b81611f67565b811461215657600080fd5b5056fea2646970667358221220ee03f03f8321a0c3dd0ff6e3332c71be131610af2dac28b76ca99a7a4d576f8564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/oneinchV3/HOneInchV3.sol:HOneInchV3",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/oneinchV3/HOneInchV3.sol:HOneInchV3",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}