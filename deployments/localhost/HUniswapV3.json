{
  "address": "0xc4F65547f0c0e08D2B7Cd8f8C8AcD8Cd4ee0a791",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROUTER",
      "outputs": [
        {
          "internalType": "contract ISwapRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "name": "exactInput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "name": "exactInputFromEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        }
      ],
      "name": "exactInputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        }
      ],
      "name": "exactInputSingleFromEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        }
      ],
      "name": "exactInputSingleToEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMinimum",
          "type": "uint256"
        }
      ],
      "name": "exactInputToEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        }
      ],
      "name": "exactOutput",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        }
      ],
      "name": "exactOutputFromEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        }
      ],
      "name": "exactOutputSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        }
      ],
      "name": "exactOutputSingleFromEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "fee",
          "type": "uint24"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        },
        {
          "internalType": "uint160",
          "name": "sqrtPriceLimitX96",
          "type": "uint160"
        }
      ],
      "name": "exactOutputSingleToEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "path",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMaximum",
          "type": "uint256"
        }
      ],
      "name": "exactOutputToEther",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x29a51c2c8447437d23e67a0da40d56868da7e3ef6e7a1ac326a453858e514322",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0xc4F65547f0c0e08D2B7Cd8f8C8AcD8Cd4ee0a791",
    "transactionIndex": 0,
    "gasUsed": "3126379",
    "logsBloom": "0x
    "blockHash": "0x13b649acd43006d23eb2c4b11523210ad4530f0452ec2d3cb6dda220571c56b4",
    "transactionHash": "0x29a51c2c8447437d23e67a0da40d56868da7e3ef6e7a1ac326a453858e514322",
    "logs": [],
    "blockNumber": 13356634,
    "cumulativeGasUsed": "3126379",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROUTER\",\"outputs\":[{\"internalType\":\"contract ISwapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"exactInput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"exactInputFromEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"exactInputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"exactInputSingleFromEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"exactInputSingleToEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMinimum\",\"type\":\"uint256\"}],\"name\":\"exactInputToEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"name\":\"exactOutput\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"name\":\"exactOutputFromEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"exactOutputSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"exactOutputSingleFromEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceLimitX96\",\"type\":\"uint160\"}],\"name\":\"exactOutputSingleToEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"path\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMaximum\",\"type\":\"uint256\"}],\"name\":\"exactOutputToEther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/uniswapv3/HUniswapV3.sol\":\"HUniswapV3\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/uniswapv3/HUniswapV3.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"../weth/IWETH9.sol\\\";\\nimport \\\"./ISwapRouter.sol\\\";\\nimport \\\"./libraries/BytesLib.sol\\\";\\n\\ncontract HUniswapV3 is HandlerBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n    using BytesLib for bytes;\\n\\n    // prettier-ignore\\n    ISwapRouter public constant ROUTER = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n    // prettier-ignore\\n    IWETH9 public constant WETH = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n\\n    uint256 private constant PATH_SIZE = 43; // address + address + uint24\\n    uint256 private constant ADDRESS_SIZE = 20;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HUniswapV3\\\";\\n    }\\n\\n    function exactInputSingleFromEther(\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum,\\n        uint160 sqrtPriceLimitX96\\n    ) external payable returns (uint256 amountOut) {\\n        // Build params for router call\\n        ISwapRouter.ExactInputSingleParams memory params;\\n        params.tokenIn = address(WETH);\\n        params.tokenOut = tokenOut;\\n        params.fee = fee;\\n        params.amountIn = _getBalance(address(0), amountIn);\\n        params.amountOutMinimum = amountOutMinimum;\\n        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\\n\\n        amountOut = _exactInputSingle(params.amountIn, params);\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function exactInputSingleToEther(\\n        address tokenIn,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum,\\n        uint160 sqrtPriceLimitX96\\n    ) external payable returns (uint256 amountOut) {\\n        // Build params for router call\\n        ISwapRouter.ExactInputSingleParams memory params;\\n        params.tokenIn = tokenIn;\\n        params.tokenOut = address(WETH);\\n        params.fee = fee;\\n        params.amountIn = _getBalance(tokenIn, amountIn);\\n        params.amountOutMinimum = amountOutMinimum;\\n        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\\n\\n        // Approve token\\n        _tokenApprove(tokenIn, address(ROUTER), params.amountIn);\\n        amountOut = _exactInputSingle(0, params);\\n        WETH.withdraw(amountOut);\\n    }\\n\\n    function exactInputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum,\\n        uint160 sqrtPriceLimitX96\\n    ) external payable returns (uint256 amountOut) {\\n        // Build params for router call\\n        ISwapRouter.ExactInputSingleParams memory params;\\n        params.tokenIn = tokenIn;\\n        params.tokenOut = tokenOut;\\n        params.fee = fee;\\n        params.amountIn = _getBalance(tokenIn, amountIn);\\n        params.amountOutMinimum = amountOutMinimum;\\n        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\\n\\n        // Approve token\\n        _tokenApprove(tokenIn, address(ROUTER), params.amountIn);\\n        amountOut = _exactInputSingle(0, params);\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function exactInputFromEther(\\n        bytes memory path,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) external payable returns (uint256 amountOut) {\\n        // Extract tokenIn and tokenOut\\n        address tokenIn = _getFirstToken(path);\\n        address tokenOut = _getLastToken(path);\\n        // Input token must be WETH\\n        if (tokenIn != address(WETH))\\n            _revertMsg(\\\"exactInputFromEther\\\", \\\"Input not WETH\\\");\\n        // Build params for router call\\n        ISwapRouter.ExactInputParams memory params;\\n        params.path = path;\\n        params.amountIn = _getBalance(address(0), amountIn);\\n        params.amountOutMinimum = amountOutMinimum;\\n\\n        amountOut = _exactInput(params.amountIn, params);\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function exactInputToEther(\\n        bytes memory path,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) external payable returns (uint256 amountOut) {\\n        // Extract tokenIn and tokenOut\\n        address tokenIn = _getFirstToken(path);\\n        address tokenOut = _getLastToken(path);\\n        // Output token must be WETH\\n        if (tokenOut != address(WETH))\\n            _revertMsg(\\\"exactInputToEther\\\", \\\"Output not WETH\\\");\\n        // Build params for router call\\n        ISwapRouter.ExactInputParams memory params;\\n        params.path = path;\\n        params.amountIn = _getBalance(tokenIn, amountIn);\\n        params.amountOutMinimum = amountOutMinimum;\\n\\n        // Approve token\\n        _tokenApprove(tokenIn, address(ROUTER), params.amountIn);\\n        amountOut = _exactInput(0, params);\\n\\n        WETH.withdraw(amountOut);\\n    }\\n\\n    function exactInput(\\n        bytes memory path,\\n        uint256 amountIn,\\n        uint256 amountOutMinimum\\n    ) external payable returns (uint256 amountOut) {\\n        // Extract tokenIn and tokenOut\\n        address tokenIn = _getFirstToken(path);\\n        address tokenOut = _getLastToken(path);\\n        // Build params for router call\\n        ISwapRouter.ExactInputParams memory params;\\n        params.path = path;\\n        params.amountIn = _getBalance(tokenIn, amountIn);\\n        params.amountOutMinimum = amountOutMinimum;\\n\\n        // Approve token\\n        _tokenApprove(tokenIn, address(ROUTER), params.amountIn);\\n        amountOut = _exactInput(0, params);\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function exactOutputSingleFromEther(\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        uint160 sqrtPriceLimitX96\\n    ) external payable returns (uint256 amountIn) {\\n        // Build params for router call\\n        ISwapRouter.ExactOutputSingleParams memory params;\\n        params.tokenIn = address(WETH);\\n        params.tokenOut = tokenOut;\\n        params.fee = fee;\\n        params.amountOut = amountOut;\\n        // if amount == uint256(-1) return balance of Proxy\\n        params.amountInMaximum = _getBalance(address(0), amountInMaximum);\\n        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\\n\\n        amountIn = _exactOutputSingle(params.amountInMaximum, params);\\n        ROUTER.refundETH();\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function exactOutputSingleToEther(\\n        address tokenIn,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        uint160 sqrtPriceLimitX96\\n    ) external payable returns (uint256 amountIn) {\\n        // Build params for router call\\n        ISwapRouter.ExactOutputSingleParams memory params;\\n        params.tokenIn = tokenIn;\\n        params.tokenOut = address(WETH);\\n        params.fee = fee;\\n        params.amountOut = amountOut;\\n        // if amount == uint256(-1) return balance of Proxy\\n        params.amountInMaximum = _getBalance(tokenIn, amountInMaximum);\\n        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\\n\\n        // Approve token\\n        _tokenApprove(params.tokenIn, address(ROUTER), params.amountInMaximum);\\n        amountIn = _exactOutputSingle(0, params);\\n        WETH.withdraw(params.amountOut);\\n    }\\n\\n    function exactOutputSingle(\\n        address tokenIn,\\n        address tokenOut,\\n        uint24 fee,\\n        uint256 amountOut,\\n        uint256 amountInMaximum,\\n        uint160 sqrtPriceLimitX96\\n    ) external payable returns (uint256 amountIn) {\\n        // Build params for router call\\n        ISwapRouter.ExactOutputSingleParams memory params;\\n        params.tokenIn = tokenIn;\\n        params.tokenOut = tokenOut;\\n        params.fee = fee;\\n        params.amountOut = amountOut;\\n        // if amount == uint256(-1) return balance of Proxy\\n        params.amountInMaximum = _getBalance(tokenIn, amountInMaximum);\\n        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\\n\\n        // Approve token\\n        _tokenApprove(params.tokenIn, address(ROUTER), params.amountInMaximum);\\n        amountIn = _exactOutputSingle(0, params);\\n\\n        _updateToken(params.tokenOut);\\n    }\\n\\n    function exactOutputFromEther(\\n        bytes memory path,\\n        uint256 amountOut,\\n        uint256 amountInMaximum\\n    ) external payable returns (uint256 amountIn) {\\n        // Extract tokenIn and tokenOut\\n        // Note that the first token is tokenOut in exactOutput functions, vice versa\\n        address tokenIn = _getLastToken(path);\\n        address tokenOut = _getFirstToken(path);\\n        // Input token must be WETH\\n        if (tokenIn != address(WETH))\\n            _revertMsg(\\\"exactOutputFromEther\\\", \\\"Input not WETH\\\");\\n        // Build params for router call\\n        ISwapRouter.ExactOutputParams memory params;\\n        params.path = path;\\n        params.amountOut = amountOut;\\n        params.amountInMaximum = _getBalance(address(0), amountInMaximum);\\n\\n        amountIn = _exactOutput(params.amountInMaximum, params);\\n        ROUTER.refundETH();\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function exactOutputToEther(\\n        bytes memory path,\\n        uint256 amountOut,\\n        uint256 amountInMaximum\\n    ) external payable returns (uint256 amountIn) {\\n        // Extract tokenIn and tokenOut\\n        // Note that the first token is tokenOut in exactOutput functions, vice versa\\n        address tokenIn = _getLastToken(path);\\n        address tokenOut = _getFirstToken(path);\\n        // Out token must be WETH\\n        if (tokenOut != address(WETH))\\n            _revertMsg(\\\"exactOutputToEther\\\", \\\"Output not WETH\\\");\\n        // Build params for router call\\n        ISwapRouter.ExactOutputParams memory params;\\n        params.path = path;\\n        params.amountOut = amountOut;\\n        // if amount == uint256(-1) return balance of Proxy\\n        params.amountInMaximum = _getBalance(tokenIn, amountInMaximum);\\n\\n        // Approve token\\n        _tokenApprove(tokenIn, address(ROUTER), params.amountInMaximum);\\n        amountIn = _exactOutput(0, params);\\n\\n        WETH.withdraw(amountOut);\\n    }\\n\\n    function exactOutput(\\n        bytes memory path,\\n        uint256 amountOut,\\n        uint256 amountInMaximum\\n    ) external payable returns (uint256 amountIn) {\\n        // Extract tokenIn and tokenOut\\n        // Note that the first token is tokenOut in exactOutput functions, vice versa\\n        address tokenIn = _getLastToken(path);\\n        address tokenOut = _getFirstToken(path);\\n        // Build params for router call\\n        ISwapRouter.ExactOutputParams memory params;\\n        params.path = path;\\n        params.amountOut = amountOut;\\n        // if amount == uint256(-1) return balance of Proxy\\n        params.amountInMaximum = _getBalance(tokenIn, amountInMaximum);\\n\\n        // Approve token\\n        _tokenApprove(tokenIn, address(ROUTER), params.amountInMaximum);\\n        amountIn = _exactOutput(0, params);\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function _getFirstToken(bytes memory path) internal pure returns (address) {\\n        return path.toAddress(0);\\n    }\\n\\n    function _getLastToken(bytes memory path) internal view returns (address) {\\n        if (path.length < PATH_SIZE)\\n            _revertMsg(\\\"General\\\", \\\"Path size too small\\\");\\n        return path.toAddress(path.length - ADDRESS_SIZE);\\n    }\\n\\n    function _exactInputSingle(\\n        uint256 value,\\n        ISwapRouter.ExactInputSingleParams memory params\\n    ) internal returns (uint256) {\\n        params.deadline = now;\\n        params.recipient = address(this);\\n\\n        try ROUTER.exactInputSingle{value: value}(params) returns (\\n            uint256 amountOut\\n        ) {\\n            return amountOut;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"exactInputSingle\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exactInputSingle\\\");\\n        }\\n    }\\n\\n    function _exactInput(\\n        uint256 value,\\n        ISwapRouter.ExactInputParams memory params\\n    ) internal returns (uint256) {\\n        params.deadline = now;\\n        params.recipient = address(this);\\n\\n        try ROUTER.exactInput{value: value}(params) returns (\\n            uint256 amountOut\\n        ) {\\n            return amountOut;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"exactInput\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exactInput\\\");\\n        }\\n    }\\n\\n    function _exactOutputSingle(\\n        uint256 value,\\n        ISwapRouter.ExactOutputSingleParams memory params\\n    ) internal returns (uint256) {\\n        params.deadline = now;\\n        params.recipient = address(this);\\n\\n        try ROUTER.exactOutputSingle{value: value}(params) returns (\\n            uint256 amountIn\\n        ) {\\n            return amountIn;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"exactOutputSingle\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exactOutputSingle\\\");\\n        }\\n    }\\n\\n    function _exactOutput(\\n        uint256 value,\\n        ISwapRouter.ExactOutputParams memory params\\n    ) internal returns (uint256) {\\n        params.deadline = now;\\n        params.recipient = address(this);\\n\\n        try ROUTER.exactOutput{value: value}(params) returns (\\n            uint256 amountIn\\n        ) {\\n            return amountIn;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"exactOutput\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exactOutput\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2109bbe7648eb87b7cf841bba41ef99159e93ee549f3de2e9fc3952fae8971f4\"},\"contracts/handlers/uniswapv3/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Periphery Payments\\n/// @notice Functions to ease deposits and withdrawals of ETH\\ninterface IPeripheryPayments {\\n    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\\n    /// @param amountMinimum The minimum amount of WETH9 to unwrap\\n    /// @param recipient The address receiving ETH\\n    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\\n\\n    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\\n    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\\n    /// that use ether for the input amount\\n    function refundETH() external payable;\\n\\n    /// @notice Transfers the full amount of a token held by this contract to recipient\\n    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\\n    /// @param token The contract address of the token which will be transferred to `recipient`\\n    /// @param amountMinimum The minimum amount of token required for a transfer\\n    /// @param recipient The destination address of the token\\n    function sweepToken(\\n        address token,\\n        uint256 amountMinimum,\\n        address recipient\\n    ) external payable;\\n}\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback, IPeripheryPayments {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x8b70d7288336f5bfbdf3dc86594ab97e6308fd0fc88a6118cec9599c9cddf39b\",\"license\":\"GPL-2.0-or-later\"},\"contracts/handlers/uniswapv3/libraries/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.5.0 <0.8.0;\\n\\nlibrary BytesLib {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(\\n                        add(tempBytes, lengthmod),\\n                        mul(0x20, iszero(lengthmod))\\n                    )\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(\\n                            add(\\n                                add(_bytes, lengthmod),\\n                                mul(0x20, iszero(lengthmod))\\n                            ),\\n                            _start\\n                        )\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        require(_start + 20 >= _start, \\\"toAddress_overflow\\\");\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        internal\\n        pure\\n        returns (uint24)\\n    {\\n        require(_start + 3 >= _start, \\\"toUint24_overflow\\\");\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n        uint24 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x3), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n}\\n\",\"keccak256\":\"0xfe7cc9dd09b1e1f6274c95eae618a957becfb04fe3a017641cbcbe26912b3a51\",\"license\":\"GPL-2.0-or-later\"},\"contracts/handlers/weth/IWETH9.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IWETH9 {\\n    fallback() external payable;\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xd54dceb2d3272ab53b74e40fa3d6a0440043cfd6bc2ce76eb9e1c7a4d5cd827f\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506137c5806100206000396000f3fe6080604052600436106101355760003560e01c8063bfd62c5e116100ab578063e473efd31161006f578063e473efd314610415578063f4f47ee114610445578063f5f5ba7214610475578063f900e577146104a0578063fa2901a5146104d0578063fd9b1912146104fb57610135565b8063bfd62c5e1461033e578063c27229161461036e578063d3695b0914610378578063dc9031c4146103a8578063df58a96f146103e557610135565b806387c13943116100fd57806387c139431461021b5780638aa5b89b1461024657806399eb59b914610276578063a2608210146102b3578063ad5c4648146102e3578063b5619b551461030e57610135565b80630f532d181461013a578063110cb594146101655780631413dc7d1461019557806332fe7b26146101c05780634eb4ccef146101eb575b600080fd5b34801561014657600080fd5b5061014f61052b565b60405161015c919061326e565b60405180910390f35b61017f600480360381019061017a9190612a86565b610552565b60405161018c9190613458565b60405180910390f35b3480156101a157600080fd5b506101aa6105de565b6040516101b7919061326e565b60405180910390f35b3480156101cc57600080fd5b506101d5610605565b6040516101e291906132a4565b60405180910390f35b610205600480360381019061020091906129bd565b61061d565b6040516102129190613458565b60405180910390f35b34801561022757600080fd5b506102306107ae565b60405161023d9190613458565b60405180910390f35b610260600480360381019061025b91906129bd565b6107ba565b60405161026d9190613458565b60405180910390f35b34801561028257600080fd5b5061029d60048036038101906102989190612a5d565b6108d7565b6040516102aa919061326e565b60405180910390f35b6102cd60048036038101906102c89190612934565b6108ef565b6040516102da9190613458565b60405180910390f35b3480156102ef57600080fd5b506102f8610a18565b60405161030591906132bf565b60405180910390f35b61032860048036038101906103239190612a86565b610a30565b6040516103359190613458565b60405180910390f35b610358600480360381019061035391906129bd565b610b59565b6040516103659190613458565b60405180910390f35b610376610d13565b005b610392600480360381019061038d9190612a86565b610d4e565b60405161039f9190613458565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190612aed565b610f0c565b6040516103dc919061326e565b60405180910390f35b6103ff60048036038101906103fa9190612a86565b610f2d565b60405161040c9190613458565b60405180910390f35b61042f600480360381019061042a91906129bd565b610fb9565b60405161043c9190613458565b60405180910390f35b61045f600480360381019061045a9190612a86565b61116b565b60405161046c9190613458565b60405180910390f35b34801561048157600080fd5b5061048a611308565b60405161049791906132da565b60405180910390f35b6104ba60048036038101906104b59190612934565b611345565b6040516104c79190613458565b60405180910390f35b3480156104dc57600080fd5b506104e5611476565b6040516104f29190613289565b60405180910390f35b61051560048036038101906105109190612a86565b611481565b6040516105229190613458565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b60008061055e8561163f565b9050600061056b866116de565b905061057561267f565b8681600001819052508581606001818152505061059283866116fb565b8160800181815250506105be8373e592427a0aece92de3edee1f18e0157c058615648360800151611845565b6105c9600082611911565b93506105d482611a9e565b5050509392505050565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b73e592427a0aece92de3edee1f18e0157c0586156481565b60006106276126c4565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff1681525050848160a00181815250506106d66000856116fb565b8160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506107258160c0015182611ab5565b915073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050506107a487611a9e565b5095945050505050565b670de0b6b3a764000081565b60006107c4612766565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff16815250506108696000866116fb565b8160a0018181525050838160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506108c28160a0015182611c42565b91506108cd87611a9e565b5095945050505050565b60016020528060005260406000206000915090505481565b60006108f9612766565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff168152505061098988866116fb565b8160a0018181525050838160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506109f78873e592427a0aece92de3edee1f18e0157c058615648360a00151611845565b610a02600082611c42565b9150610a0d87611a9e565b509695505050505050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b600080610a3c856116de565b90506000610a498661163f565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b0757610b066040518060400160405280601381526020017f6578616374496e70757446726f6d4574686572000000000000000000000000008152506040518060400160405280600e81526020017f496e707574206e6f742057455448000000000000000000000000000000000000815250611dcf565b5b610b0f612808565b868160000181905250610b236000876116fb565b81606001818152505084816080018181525050610b44816060015182611e47565b9350610b4f82611a9e565b5050509392505050565b6000610b636126c4565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff1681525050848160a0018181525050610c1187856116fb565b8160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610c79816000015173e592427a0aece92de3edee1f18e0157c058615648360c00151611845565b610c84600082611ab5565b915073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d8260a001516040518263ffffffff1660e01b8152600401610cd79190613458565b600060405180830381600087803b158015610cf157600080fd5b505af1158015610d05573d6000803e3d6000fd5b505050505095945050505050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d459061333c565b60405180910390fd5b600080610d5a856116de565b90506000610d678661163f565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e2557610e246040518060400160405280601181526020017f6578616374496e707574546f45746865720000000000000000000000000000008152506040518060400160405280600f81526020017f4f7574707574206e6f7420574554480000000000000000000000000000000000815250611dcf565b5b610e2d612808565b868160000181905250610e4083876116fb565b81606001818152505084816080018181525050610e768373e592427a0aece92de3edee1f18e0157c058615648360600151611845565b610e81600082611e47565b935073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d856040518263ffffffff1660e01b8152600401610ed09190613458565b600060405180830381600087803b158015610eea57600080fd5b505af1158015610efe573d6000803e3d6000fd5b505050505050509392505050565b60008181548110610f1957fe5b906000526020600020016000915090505481565b600080610f39856116de565b90506000610f468661163f565b9050610f50612808565b868160000181905250610f6383876116fb565b81606001818152505084816080018181525050610f998373e592427a0aece92de3edee1f18e0157c058615648360600151611845565b610fa4600082611e47565b9350610faf82611a9e565b5050509392505050565b6000610fc3612766565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff168152505061106787866116fb565b8160a0018181525050838160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506110d58773e592427a0aece92de3edee1f18e0157c058615648360a00151611845565b6110e0600082611c42565b915073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040161112f9190613458565b600060405180830381600087803b15801561114957600080fd5b505af115801561115d573d6000803e3d6000fd5b505050505095945050505050565b6000806111778561163f565b90506000611184866116de565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611242576112416040518060400160405280601481526020017f65786163744f757470757446726f6d45746865720000000000000000000000008152506040518060400160405280600e81526020017f496e707574206e6f742057455448000000000000000000000000000000000000815250611dcf565b5b61124a61267f565b868160000181905250858160600181815250506112686000866116fb565b81608001818152505061127f816080015182611911565b935073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b505050506112fe82611a9e565b5050509392505050565b60606040518060400160405280600a81526020017f48556e6973776170563300000000000000000000000000000000000000000000815250905090565b600061134f6126c4565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff1681525050848160a00181815250506113e988856116fb565b8160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611451816000015173e592427a0aece92de3edee1f18e0157c058615648360c00151611845565b61145c600082611ab5565b915061146b8160200151611a9e565b509695505050505050565b63c272291660e01b81565b60008061148d8561163f565b9050600061149a866116de565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611558576115576040518060400160405280601281526020017f65786163744f7574707574546f457468657200000000000000000000000000008152506040518060400160405280600f81526020017f4f7574707574206e6f7420574554480000000000000000000000000000000000815250611dcf565b5b61156061267f565b8681600001819052508581606001818152505061157d83866116fb565b8160800181815250506115a98373e592427a0aece92de3edee1f18e0157c058615648360800151611845565b6115b4600082611911565b935073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d876040518263ffffffff1660e01b81526004016116039190613458565b600060405180830381600087803b15801561161d57600080fd5b505af1158015611631573d6000803e3d6000fd5b505050505050509392505050565b6000602b825110156116c0576116bf6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601381526020017f506174682073697a6520746f6f20736d616c6c00000000000000000000000000815250611dcf565b5b6116d7601483510383611fd490919063ffffffff16565b9050919050565b60006116f4600083611fd490919063ffffffff16565b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461172c5781905061183f565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806117a6575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b156117b35747905061183f565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117ec9190613201565b60206040518083038186803b15801561180457600080fd5b505afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190612b16565b90505b92915050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401611880929190613245565b600060405180830381600087803b15801561189a57600080fd5b505af19250505080156118ab575060015b61190b576118db8260008573ffffffffffffffffffffffffffffffffffffffff166120879092919063ffffffff16565b61190682828573ffffffffffffffffffffffffffffffffffffffff166120879092919063ffffffff16565b61190c565b5b505050565b60004282604001818152505030826020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663f28c049884846040518363ffffffff1660e01b81526004016119a3919061341a565b6020604051808303818588803b1580156119bc57600080fd5b505af1935050505080156119ee57506040513d601f19601f820116820180604052508101906119eb9190612b16565b60015b611a8e576119fa61364f565b80611a055750611a4a565b611a446040518060400160405280600b81526020017f65786163744f757470757400000000000000000000000000000000000000000081525082611dcf565b50611a89565b611a886040518060400160405280600b81526020017f65786163744f75747075740000000000000000000000000000000000000000008152506121e5565b5b611a97565b80915050611a98565b5b92915050565b611ab281600061222790919063ffffffff16565b50565b60004282608001818152505030826060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663db3e219884846040518363ffffffff1660e01b8152600401611b47919061343c565b6020604051808303818588803b158015611b6057600080fd5b505af193505050508015611b9257506040513d601f19601f82011682018060405250810190611b8f9190612b16565b60015b611c3257611b9e61364f565b80611ba95750611bee565b611be86040518060400160405280601181526020017f65786163744f757470757453696e676c6500000000000000000000000000000081525082611dcf565b50611c2d565b611c2c6040518060400160405280601181526020017f65786163744f757470757453696e676c650000000000000000000000000000008152506121e5565b5b611c3b565b80915050611c3c565b5b92915050565b60004282608001818152505030826060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663414bf38984846040518363ffffffff1660e01b8152600401611cd491906133fe565b6020604051808303818588803b158015611ced57600080fd5b505af193505050508015611d1f57506040513d601f19601f82011682018060405250810190611d1c9190612b16565b60015b611dbf57611d2b61364f565b80611d365750611d7b565b611d756040518060400160405280601081526020017f6578616374496e70757453696e676c650000000000000000000000000000000081525082611dcf565b50611dba565b611db96040518060400160405280601081526020017f6578616374496e70757453696e676c65000000000000000000000000000000008152506121e5565b5b611dc8565b80915050611dc9565b5b92915050565b611ddf611dda61226c565b6122aa565b611de7611308565b8383604051602001611dfc94939291906131a2565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3e91906132da565b60405180910390fd5b60004282604001818152505030826020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663c04b8d5984846040518363ffffffff1660e01b8152600401611ed991906133dc565b6020604051808303818588803b158015611ef257600080fd5b505af193505050508015611f2457506040513d601f19601f82011682018060405250810190611f219190612b16565b60015b611fc457611f3061364f565b80611f3b5750611f80565b611f7a6040518060400160405280600a81526020017f6578616374496e7075740000000000000000000000000000000000000000000081525082611dcf565b50611fbf565b611fbe6040518060400160405280600a81526020017f6578616374496e707574000000000000000000000000000000000000000000008152506121e5565b5b611fcd565b80915050611fce565b5b92915050565b60008160148301101561201c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612013906133bc565b60405180910390fd5b6014820183511015612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205a9061331c565b60405180910390fd5b60006c01000000000000000000000000836020860101510490508091505092915050565b6000811480612120575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016120ce92919061321c565b60206040518083038186803b1580156120e657600080fd5b505afa1580156120fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211e9190612b16565b145b61215f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121569061339c565b60405180910390fd5b6121e08363095ea7b360e01b848460405160240161217e929190613245565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506123f1565b505050565b612224816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250611dcf565b50565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60006122a57ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b60016124b890919063ffffffff16565b905090565b606060008214156122f2576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506123ec565b6000808390505b600081111561231c578180600101925050600a818161231457fe5b0490506122f9565b5060608167ffffffffffffffff8111801561233657600080fd5b506040519080825280601f01601f1916602001820160405280156123695781602001600182028036833780820191505090505b50905060008290505b60008111156123e557600a858161238557fe5b0660300160f81b82600183038151811061239b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85816123d457fe5b049450808060019003915050612372565b5080925050505b919050565b6060612453826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166124d89092919063ffffffff16565b90506000815111156124b357808060200190518101906124739190612a34565b6124b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a99061337c565b60405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b60606124e784846000856124f0565b90509392505050565b606082471015612535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252c906132fc565b60405180910390fd5b61253e85612605565b61257d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125749061335c565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516125a7919061318b565b60006040518083038185875af1925050503d80600081146125e4576040519150601f19603f3d011682016040523d82523d6000602084013e6125e9565b606091505b50915091506125f9828286612618565b92505050949350505050565b600080823b905060008111915050919050565b6060831561262857829050612678565b60008351111561263b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266f91906132da565b60405180910390fd5b9392505050565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600062ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600062ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b60008135905061285c81613705565b92915050565b6000815190506128718161371c565b92915050565b60008135905061288681613733565b92915050565b600082601f83011261289d57600080fd5b81356128b06128ab826134a0565b613473565b915080825260208301602083018583830111156128cc57600080fd5b6128d78382846135ef565b50505092915050565b6000813590506128ef8161374a565b92915050565b60008135905061290481613761565b92915050565b60008135905061291981613778565b92915050565b60008151905061292e81613778565b92915050565b60008060008060008060c0878903121561294d57600080fd5b600061295b89828a0161284d565b965050602061296c89828a0161284d565b955050604061297d89828a016128f5565b945050606061298e89828a0161290a565b935050608061299f89828a0161290a565b92505060a06129b089828a016128e0565b9150509295509295509295565b600080600080600060a086880312156129d557600080fd5b60006129e38882890161284d565b95505060206129f4888289016128f5565b9450506040612a058882890161290a565b9350506060612a168882890161290a565b9250506080612a27888289016128e0565b9150509295509295909350565b600060208284031215612a4657600080fd5b6000612a5484828501612862565b91505092915050565b600060208284031215612a6f57600080fd5b6000612a7d84828501612877565b91505092915050565b600080600060608486031215612a9b57600080fd5b600084013567ffffffffffffffff811115612ab557600080fd5b612ac18682870161288c565b9350506020612ad28682870161290a565b9250506040612ae38682870161290a565b9150509250925092565b600060208284031215612aff57600080fd5b6000612b0d8482850161290a565b91505092915050565b600060208284031215612b2857600080fd5b6000612b368482850161291f565b91505092915050565b612b488161351a565b82525050565b612b578161351a565b82525050565b612b6681613538565b82525050565b612b7581613542565b82525050565b6000612b86826134cc565b612b9081856134e2565b9350612ba08185602086016135fe565b612ba981613631565b840191505092915050565b6000612bbf826134cc565b612bc981856134f3565b9350612bd98185602086016135fe565b80840191505092915050565b612bee816135a7565b82525050565b612bfd816135cb565b82525050565b6000612c0e826134d7565b612c1881856134fe565b9350612c288185602086016135fe565b612c3181613631565b840191505092915050565b6000612c47826134d7565b612c51818561350f565b9350612c618185602086016135fe565b80840191505092915050565b6000612c7a6026836134fe565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612ce06015836134fe565b91507f746f416464726573735f6f75744f66426f756e647300000000000000000000006000830152602082019050919050565b6000612d206014836134fe565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b6000612d60601d836134fe565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612da060018361350f565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000612de0602a836134fe565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612e4660028361350f565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000612e866036836134fe565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b6000612eec6012836134fe565b91507f746f416464726573735f6f766572666c6f7700000000000000000000000000006000830152602082019050919050565b600060a0830160008301518482036000860152612f3c8282612b7b565b9150506020830151612f516020860182612b3f565b506040830151612f64604086018261316d565b506060830151612f77606086018261316d565b506080830151612f8a608086018261316d565b508091505092915050565b61010082016000820151612fac6000850182612b3f565b506020820151612fbf6020850182612b3f565b506040820151612fd2604085018261315e565b506060820151612fe56060850182612b3f565b506080820151612ff8608085018261316d565b5060a082015161300b60a085018261316d565b5060c082015161301e60c085018261316d565b5060e082015161303160e085018261314f565b50505050565b600060a08301600083015184820360008601526130548282612b7b565b91505060208301516130696020860182612b3f565b50604083015161307c604086018261316d565b50606083015161308f606086018261316d565b5060808301516130a2608086018261316d565b508091505092915050565b610100820160008201516130c46000850182612b3f565b5060208201516130d76020850182612b3f565b5060408201516130ea604085018261315e565b5060608201516130fd6060850182612b3f565b506080820151613110608085018261316d565b5060a082015161312360a085018261316d565b5060c082015161313660c085018261316d565b5060e082015161314960e085018261314f565b50505050565b6131588161356e565b82525050565b6131678161358e565b82525050565b6131768161359d565b82525050565b6131858161359d565b82525050565b60006131978284612bb4565b915081905092915050565b60006131ae8287612c3c565b91506131b982612d93565b91506131c58286612c3c565b91506131d082612d93565b91506131dc8285612c3c565b91506131e782612e39565b91506131f38284612c3c565b915081905095945050505050565b60006020820190506132166000830184612b4e565b92915050565b60006040820190506132316000830185612b4e565b61323e6020830184612b4e565b9392505050565b600060408201905061325a6000830185612b4e565b613267602083018461317c565b9392505050565b60006020820190506132836000830184612b5d565b92915050565b600060208201905061329e6000830184612b6c565b92915050565b60006020820190506132b96000830184612be5565b92915050565b60006020820190506132d46000830184612bf4565b92915050565b600060208201905081810360008301526132f48184612c03565b905092915050565b6000602082019050818103600083015261331581612c6d565b9050919050565b6000602082019050818103600083015261333581612cd3565b9050919050565b6000602082019050818103600083015261335581612d13565b9050919050565b6000602082019050818103600083015261337581612d53565b9050919050565b6000602082019050818103600083015261339581612dd3565b9050919050565b600060208201905081810360008301526133b581612e79565b9050919050565b600060208201905081810360008301526133d581612edf565b9050919050565b600060208201905081810360008301526133f68184612f1f565b905092915050565b6000610100820190506134146000830184612f95565b92915050565b600060208201905081810360008301526134348184613037565b905092915050565b60006101008201905061345260008301846130ad565b92915050565b600060208201905061346d600083018461317c565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561349657600080fd5b8060405250919050565b600067ffffffffffffffff8211156134b757600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006135258261356e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006135b2826135b9565b9050919050565b60006135c48261356e565b9050919050565b60006135d6826135dd565b9050919050565b60006135e88261356e565b9050919050565b82818337600083830152505050565b60005b8381101561361c578082015181840152602081019050613601565b8381111561362b576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d101561365f57613702565b60046000803e613670600051613642565b6308c379a081146136815750613702565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156136ad57505050613702565b808201805167ffffffffffffffff8111156136cc575050505050613702565b8060208301013d85018111156136e757505050505050613702565b6136f082613631565b60208401016040528296505050505050505b90565b61370e8161351a565b811461371957600080fd5b50565b6137258161352c565b811461373057600080fd5b50565b61373c81613538565b811461374757600080fd5b50565b6137538161356e565b811461375e57600080fd5b50565b61376a8161358e565b811461377557600080fd5b50565b6137818161359d565b811461378c57600080fd5b5056fea2646970667358221220ff4652b524365c7617497cbcbb43d211125df030c127bfb6a1381238629df98564736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c8063bfd62c5e116100ab578063e473efd31161006f578063e473efd314610415578063f4f47ee114610445578063f5f5ba7214610475578063f900e577146104a0578063fa2901a5146104d0578063fd9b1912146104fb57610135565b8063bfd62c5e1461033e578063c27229161461036e578063d3695b0914610378578063dc9031c4146103a8578063df58a96f146103e557610135565b806387c13943116100fd57806387c139431461021b5780638aa5b89b1461024657806399eb59b914610276578063a2608210146102b3578063ad5c4648146102e3578063b5619b551461030e57610135565b80630f532d181461013a578063110cb594146101655780631413dc7d1461019557806332fe7b26146101c05780634eb4ccef146101eb575b600080fd5b34801561014657600080fd5b5061014f61052b565b60405161015c919061326e565b60405180910390f35b61017f600480360381019061017a9190612a86565b610552565b60405161018c9190613458565b60405180910390f35b3480156101a157600080fd5b506101aa6105de565b6040516101b7919061326e565b60405180910390f35b3480156101cc57600080fd5b506101d5610605565b6040516101e291906132a4565b60405180910390f35b610205600480360381019061020091906129bd565b61061d565b6040516102129190613458565b60405180910390f35b34801561022757600080fd5b506102306107ae565b60405161023d9190613458565b60405180910390f35b610260600480360381019061025b91906129bd565b6107ba565b60405161026d9190613458565b60405180910390f35b34801561028257600080fd5b5061029d60048036038101906102989190612a5d565b6108d7565b6040516102aa919061326e565b60405180910390f35b6102cd60048036038101906102c89190612934565b6108ef565b6040516102da9190613458565b60405180910390f35b3480156102ef57600080fd5b506102f8610a18565b60405161030591906132bf565b60405180910390f35b61032860048036038101906103239190612a86565b610a30565b6040516103359190613458565b60405180910390f35b610358600480360381019061035391906129bd565b610b59565b6040516103659190613458565b60405180910390f35b610376610d13565b005b610392600480360381019061038d9190612a86565b610d4e565b60405161039f9190613458565b60405180910390f35b3480156103b457600080fd5b506103cf60048036038101906103ca9190612aed565b610f0c565b6040516103dc919061326e565b60405180910390f35b6103ff60048036038101906103fa9190612a86565b610f2d565b60405161040c9190613458565b60405180910390f35b61042f600480360381019061042a91906129bd565b610fb9565b60405161043c9190613458565b60405180910390f35b61045f600480360381019061045a9190612a86565b61116b565b60405161046c9190613458565b60405180910390f35b34801561048157600080fd5b5061048a611308565b60405161049791906132da565b60405180910390f35b6104ba60048036038101906104b59190612934565b611345565b6040516104c79190613458565b60405180910390f35b3480156104dc57600080fd5b506104e5611476565b6040516104f29190613289565b60405180910390f35b61051560048036038101906105109190612a86565b611481565b6040516105229190613458565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b60008061055e8561163f565b9050600061056b866116de565b905061057561267f565b8681600001819052508581606001818152505061059283866116fb565b8160800181815250506105be8373e592427a0aece92de3edee1f18e0157c058615648360800151611845565b6105c9600082611911565b93506105d482611a9e565b5050509392505050565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b73e592427a0aece92de3edee1f18e0157c0586156481565b60006106276126c4565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff1681525050848160a00181815250506106d66000856116fb565b8160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506107258160c0015182611ab5565b915073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050506107a487611a9e565b5095945050505050565b670de0b6b3a764000081565b60006107c4612766565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff16815250506108696000866116fb565b8160a0018181525050838160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506108c28160a0015182611c42565b91506108cd87611a9e565b5095945050505050565b60016020528060005260406000206000915090505481565b60006108f9612766565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff168152505061098988866116fb565b8160a0018181525050838160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506109f78873e592427a0aece92de3edee1f18e0157c058615648360a00151611845565b610a02600082611c42565b9150610a0d87611a9e565b509695505050505050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b600080610a3c856116de565b90506000610a498661163f565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610b0757610b066040518060400160405280601381526020017f6578616374496e70757446726f6d4574686572000000000000000000000000008152506040518060400160405280600e81526020017f496e707574206e6f742057455448000000000000000000000000000000000000815250611dcf565b5b610b0f612808565b868160000181905250610b236000876116fb565b81606001818152505084816080018181525050610b44816060015182611e47565b9350610b4f82611a9e565b5050509392505050565b6000610b636126c4565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff1681525050848160a0018181525050610c1187856116fb565b8160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610c79816000015173e592427a0aece92de3edee1f18e0157c058615648360c00151611845565b610c84600082611ab5565b915073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d8260a001516040518263ffffffff1660e01b8152600401610cd79190613458565b600060405180830381600087803b158015610cf157600080fd5b505af1158015610d05573d6000803e3d6000fd5b505050505095945050505050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d459061333c565b60405180910390fd5b600080610d5a856116de565b90506000610d678661163f565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e2557610e246040518060400160405280601181526020017f6578616374496e707574546f45746865720000000000000000000000000000008152506040518060400160405280600f81526020017f4f7574707574206e6f7420574554480000000000000000000000000000000000815250611dcf565b5b610e2d612808565b868160000181905250610e4083876116fb565b81606001818152505084816080018181525050610e768373e592427a0aece92de3edee1f18e0157c058615648360600151611845565b610e81600082611e47565b935073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d856040518263ffffffff1660e01b8152600401610ed09190613458565b600060405180830381600087803b158015610eea57600080fd5b505af1158015610efe573d6000803e3d6000fd5b505050505050509392505050565b60008181548110610f1957fe5b906000526020600020016000915090505481565b600080610f39856116de565b90506000610f468661163f565b9050610f50612808565b868160000181905250610f6383876116fb565b81606001818152505084816080018181525050610f998373e592427a0aece92de3edee1f18e0157c058615648360600151611845565b610fa4600082611e47565b9350610faf82611a9e565b5050509392505050565b6000610fc3612766565b86816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff168152505061106787866116fb565b8160a0018181525050838160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250506110d58773e592427a0aece92de3edee1f18e0157c058615648360a00151611845565b6110e0600082611c42565b915073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d836040518263ffffffff1660e01b815260040161112f9190613458565b600060405180830381600087803b15801561114957600080fd5b505af115801561115d573d6000803e3d6000fd5b505050505095945050505050565b6000806111778561163f565b90506000611184866116de565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614611242576112416040518060400160405280601481526020017f65786163744f757470757446726f6d45746865720000000000000000000000008152506040518060400160405280600e81526020017f496e707574206e6f742057455448000000000000000000000000000000000000815250611dcf565b5b61124a61267f565b868160000181905250858160600181815250506112686000866116fb565b81608001818152505061127f816080015182611911565b935073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff166312210e8a6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156112dd57600080fd5b505af11580156112f1573d6000803e3d6000fd5b505050506112fe82611a9e565b5050509392505050565b60606040518060400160405280600a81526020017f48556e6973776170563300000000000000000000000000000000000000000000815250905090565b600061134f6126c4565b87816000019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505086816020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505085816040019062ffffff16908162ffffff1681525050848160a00181815250506113e988856116fb565b8160c0018181525050828160e0019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611451816000015173e592427a0aece92de3edee1f18e0157c058615648360c00151611845565b61145c600082611ab5565b915061146b8160200151611a9e565b509695505050505050565b63c272291660e01b81565b60008061148d8561163f565b9050600061149a866116de565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611558576115576040518060400160405280601281526020017f65786163744f7574707574546f457468657200000000000000000000000000008152506040518060400160405280600f81526020017f4f7574707574206e6f7420574554480000000000000000000000000000000000815250611dcf565b5b61156061267f565b8681600001819052508581606001818152505061157d83866116fb565b8160800181815250506115a98373e592427a0aece92de3edee1f18e0157c058615648360800151611845565b6115b4600082611911565b935073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d876040518263ffffffff1660e01b81526004016116039190613458565b600060405180830381600087803b15801561161d57600080fd5b505af1158015611631573d6000803e3d6000fd5b505050505050509392505050565b6000602b825110156116c0576116bf6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601381526020017f506174682073697a6520746f6f20736d616c6c00000000000000000000000000815250611dcf565b5b6116d7601483510383611fd490919063ffffffff16565b9050919050565b60006116f4600083611fd490919063ffffffff16565b9050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461172c5781905061183f565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806117a6575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b156117b35747905061183f565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117ec9190613201565b60206040518083038186803b15801561180457600080fd5b505afa158015611818573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061183c9190612b16565b90505b92915050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401611880929190613245565b600060405180830381600087803b15801561189a57600080fd5b505af19250505080156118ab575060015b61190b576118db8260008573ffffffffffffffffffffffffffffffffffffffff166120879092919063ffffffff16565b61190682828573ffffffffffffffffffffffffffffffffffffffff166120879092919063ffffffff16565b61190c565b5b505050565b60004282604001818152505030826020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663f28c049884846040518363ffffffff1660e01b81526004016119a3919061341a565b6020604051808303818588803b1580156119bc57600080fd5b505af1935050505080156119ee57506040513d601f19601f820116820180604052508101906119eb9190612b16565b60015b611a8e576119fa61364f565b80611a055750611a4a565b611a446040518060400160405280600b81526020017f65786163744f757470757400000000000000000000000000000000000000000081525082611dcf565b50611a89565b611a886040518060400160405280600b81526020017f65786163744f75747075740000000000000000000000000000000000000000008152506121e5565b5b611a97565b80915050611a98565b5b92915050565b611ab281600061222790919063ffffffff16565b50565b60004282608001818152505030826060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663db3e219884846040518363ffffffff1660e01b8152600401611b47919061343c565b6020604051808303818588803b158015611b6057600080fd5b505af193505050508015611b9257506040513d601f19601f82011682018060405250810190611b8f9190612b16565b60015b611c3257611b9e61364f565b80611ba95750611bee565b611be86040518060400160405280601181526020017f65786163744f757470757453696e676c6500000000000000000000000000000081525082611dcf565b50611c2d565b611c2c6040518060400160405280601181526020017f65786163744f757470757453696e676c650000000000000000000000000000008152506121e5565b5b611c3b565b80915050611c3c565b5b92915050565b60004282608001818152505030826060019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663414bf38984846040518363ffffffff1660e01b8152600401611cd491906133fe565b6020604051808303818588803b158015611ced57600080fd5b505af193505050508015611d1f57506040513d601f19601f82011682018060405250810190611d1c9190612b16565b60015b611dbf57611d2b61364f565b80611d365750611d7b565b611d756040518060400160405280601081526020017f6578616374496e70757453696e676c650000000000000000000000000000000081525082611dcf565b50611dba565b611db96040518060400160405280601081526020017f6578616374496e70757453696e676c65000000000000000000000000000000008152506121e5565b5b611dc8565b80915050611dc9565b5b92915050565b611ddf611dda61226c565b6122aa565b611de7611308565b8383604051602001611dfc94939291906131a2565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e3e91906132da565b60405180910390fd5b60004282604001818152505030826020019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073e592427a0aece92de3edee1f18e0157c0586156473ffffffffffffffffffffffffffffffffffffffff1663c04b8d5984846040518363ffffffff1660e01b8152600401611ed991906133dc565b6020604051808303818588803b158015611ef257600080fd5b505af193505050508015611f2457506040513d601f19601f82011682018060405250810190611f219190612b16565b60015b611fc457611f3061364f565b80611f3b5750611f80565b611f7a6040518060400160405280600a81526020017f6578616374496e7075740000000000000000000000000000000000000000000081525082611dcf565b50611fbf565b611fbe6040518060400160405280600a81526020017f6578616374496e707574000000000000000000000000000000000000000000008152506121e5565b5b611fcd565b80915050611fce565b5b92915050565b60008160148301101561201c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612013906133bc565b60405180910390fd5b6014820183511015612063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205a9061331c565b60405180910390fd5b60006c01000000000000000000000000836020860101510490508091505092915050565b6000811480612120575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016120ce92919061321c565b60206040518083038186803b1580156120e657600080fd5b505afa1580156120fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061211e9190612b16565b145b61215f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121569061339c565b60405180910390fd5b6121e08363095ea7b360e01b848460405160240161217e929190613245565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506123f1565b505050565b612224816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250611dcf565b50565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60006122a57ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b60016124b890919063ffffffff16565b905090565b606060008214156122f2576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506123ec565b6000808390505b600081111561231c578180600101925050600a818161231457fe5b0490506122f9565b5060608167ffffffffffffffff8111801561233657600080fd5b506040519080825280601f01601f1916602001820160405280156123695781602001600182028036833780820191505090505b50905060008290505b60008111156123e557600a858161238557fe5b0660300160f81b82600183038151811061239b57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85816123d457fe5b049450808060019003915050612372565b5080925050505b919050565b6060612453826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166124d89092919063ffffffff16565b90506000815111156124b357808060200190518101906124739190612a34565b6124b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124a99061337c565b60405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b60606124e784846000856124f0565b90509392505050565b606082471015612535576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161252c906132fc565b60405180910390fd5b61253e85612605565b61257d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125749061335c565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516125a7919061318b565b60006040518083038185875af1925050503d80600081146125e4576040519150601f19603f3d011682016040523d82523d6000602084013e6125e9565b606091505b50915091506125f9828286612618565b92505050949350505050565b600080823b905060008111915050919050565b6060831561262857829050612678565b60008351111561263b5782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161266f91906132da565b60405180910390fd5b9392505050565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600062ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600062ffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6040518060a0016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081525090565b60008135905061285c81613705565b92915050565b6000815190506128718161371c565b92915050565b60008135905061288681613733565b92915050565b600082601f83011261289d57600080fd5b81356128b06128ab826134a0565b613473565b915080825260208301602083018583830111156128cc57600080fd5b6128d78382846135ef565b50505092915050565b6000813590506128ef8161374a565b92915050565b60008135905061290481613761565b92915050565b60008135905061291981613778565b92915050565b60008151905061292e81613778565b92915050565b60008060008060008060c0878903121561294d57600080fd5b600061295b89828a0161284d565b965050602061296c89828a0161284d565b955050604061297d89828a016128f5565b945050606061298e89828a0161290a565b935050608061299f89828a0161290a565b92505060a06129b089828a016128e0565b9150509295509295509295565b600080600080600060a086880312156129d557600080fd5b60006129e38882890161284d565b95505060206129f4888289016128f5565b9450506040612a058882890161290a565b9350506060612a168882890161290a565b9250506080612a27888289016128e0565b9150509295509295909350565b600060208284031215612a4657600080fd5b6000612a5484828501612862565b91505092915050565b600060208284031215612a6f57600080fd5b6000612a7d84828501612877565b91505092915050565b600080600060608486031215612a9b57600080fd5b600084013567ffffffffffffffff811115612ab557600080fd5b612ac18682870161288c565b9350506020612ad28682870161290a565b9250506040612ae38682870161290a565b9150509250925092565b600060208284031215612aff57600080fd5b6000612b0d8482850161290a565b91505092915050565b600060208284031215612b2857600080fd5b6000612b368482850161291f565b91505092915050565b612b488161351a565b82525050565b612b578161351a565b82525050565b612b6681613538565b82525050565b612b7581613542565b82525050565b6000612b86826134cc565b612b9081856134e2565b9350612ba08185602086016135fe565b612ba981613631565b840191505092915050565b6000612bbf826134cc565b612bc981856134f3565b9350612bd98185602086016135fe565b80840191505092915050565b612bee816135a7565b82525050565b612bfd816135cb565b82525050565b6000612c0e826134d7565b612c1881856134fe565b9350612c288185602086016135fe565b612c3181613631565b840191505092915050565b6000612c47826134d7565b612c51818561350f565b9350612c618185602086016135fe565b80840191505092915050565b6000612c7a6026836134fe565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612ce06015836134fe565b91507f746f416464726573735f6f75744f66426f756e647300000000000000000000006000830152602082019050919050565b6000612d206014836134fe565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b6000612d60601d836134fe565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612da060018361350f565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000612de0602a836134fe565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612e4660028361350f565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000612e866036836134fe565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b6000612eec6012836134fe565b91507f746f416464726573735f6f766572666c6f7700000000000000000000000000006000830152602082019050919050565b600060a0830160008301518482036000860152612f3c8282612b7b565b9150506020830151612f516020860182612b3f565b506040830151612f64604086018261316d565b506060830151612f77606086018261316d565b506080830151612f8a608086018261316d565b508091505092915050565b61010082016000820151612fac6000850182612b3f565b506020820151612fbf6020850182612b3f565b506040820151612fd2604085018261315e565b506060820151612fe56060850182612b3f565b506080820151612ff8608085018261316d565b5060a082015161300b60a085018261316d565b5060c082015161301e60c085018261316d565b5060e082015161303160e085018261314f565b50505050565b600060a08301600083015184820360008601526130548282612b7b565b91505060208301516130696020860182612b3f565b50604083015161307c604086018261316d565b50606083015161308f606086018261316d565b5060808301516130a2608086018261316d565b508091505092915050565b610100820160008201516130c46000850182612b3f565b5060208201516130d76020850182612b3f565b5060408201516130ea604085018261315e565b5060608201516130fd6060850182612b3f565b506080820151613110608085018261316d565b5060a082015161312360a085018261316d565b5060c082015161313660c085018261316d565b5060e082015161314960e085018261314f565b50505050565b6131588161356e565b82525050565b6131678161358e565b82525050565b6131768161359d565b82525050565b6131858161359d565b82525050565b60006131978284612bb4565b915081905092915050565b60006131ae8287612c3c565b91506131b982612d93565b91506131c58286612c3c565b91506131d082612d93565b91506131dc8285612c3c565b91506131e782612e39565b91506131f38284612c3c565b915081905095945050505050565b60006020820190506132166000830184612b4e565b92915050565b60006040820190506132316000830185612b4e565b61323e6020830184612b4e565b9392505050565b600060408201905061325a6000830185612b4e565b613267602083018461317c565b9392505050565b60006020820190506132836000830184612b5d565b92915050565b600060208201905061329e6000830184612b6c565b92915050565b60006020820190506132b96000830184612be5565b92915050565b60006020820190506132d46000830184612bf4565b92915050565b600060208201905081810360008301526132f48184612c03565b905092915050565b6000602082019050818103600083015261331581612c6d565b9050919050565b6000602082019050818103600083015261333581612cd3565b9050919050565b6000602082019050818103600083015261335581612d13565b9050919050565b6000602082019050818103600083015261337581612d53565b9050919050565b6000602082019050818103600083015261339581612dd3565b9050919050565b600060208201905081810360008301526133b581612e79565b9050919050565b600060208201905081810360008301526133d581612edf565b9050919050565b600060208201905081810360008301526133f68184612f1f565b905092915050565b6000610100820190506134146000830184612f95565b92915050565b600060208201905081810360008301526134348184613037565b905092915050565b60006101008201905061345260008301846130ad565b92915050565b600060208201905061346d600083018461317c565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561349657600080fd5b8060405250919050565b600067ffffffffffffffff8211156134b757600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006135258261356e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062ffffff82169050919050565b6000819050919050565b60006135b2826135b9565b9050919050565b60006135c48261356e565b9050919050565b60006135d6826135dd565b9050919050565b60006135e88261356e565b9050919050565b82818337600083830152505050565b60005b8381101561361c578082015181840152602081019050613601565b8381111561362b576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d101561365f57613702565b60046000803e613670600051613642565b6308c379a081146136815750613702565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156136ad57505050613702565b808201805167ffffffffffffffff8111156136cc575050505050613702565b8060208301013d85018111156136e757505050505050613702565b6136f082613631565b60208401016040528296505050505050505b90565b61370e8161351a565b811461371957600080fd5b50565b6137258161352c565b811461373057600080fd5b50565b61373c81613538565b811461374757600080fd5b50565b6137538161356e565b811461375e57600080fd5b50565b61376a8161358e565b811461377557600080fd5b50565b6137818161359d565b811461378c57600080fd5b5056fea2646970667358221220ff4652b524365c7617497cbcbb43d211125df030c127bfb6a1381238629df98564736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/uniswapv3/HUniswapV3.sol:HUniswapV3",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/uniswapv3/HUniswapV3.sol:HUniswapV3",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}