{
  "address": "0x6262640bdd96B483575BA4fEE55C6dfd8f547d25",
  "abi": [
    {
      "inputs": [],
      "name": "CETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMPTROLLER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "COMP_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FCOMPOUND_ACTIONS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dsProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenBorrow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "uBorrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "enterMarket",
          "type": "bool"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dsProxy",
          "type": "address"
        }
      ],
      "name": "claimComp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dsProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dsProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "enterMarket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dsProxy",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "cTokens",
          "type": "address[]"
        }
      ],
      "name": "enterMarkets",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dsProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cToken",
          "type": "address"
        }
      ],
      "name": "exitMarket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dsProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenRepay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "cTokenWithdraw",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "uRepayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cWithdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "repayBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dsProxy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6af2bda48b25c0910ab2d4f99c18862a061df820be2cb7c14ae03d20bcfa2ec6",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x6262640bdd96B483575BA4fEE55C6dfd8f547d25",
    "transactionIndex": 0,
    "gasUsed": "3022751",
    "logsBloom": "0x
    "blockHash": "0xb1a05f0c7756b7eb4982e7597c6a491da5b2bebd5ec70820f294c5536ed35a85",
    "transactionHash": "0x6af2bda48b25c0910ab2d4f99c18862a061df820be2cb7c14ae03d20bcfa2ec6",
    "logs": [],
    "blockNumber": 13356617,
    "cumulativeGasUsed": "3022751",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMPTROLLER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"COMP_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FCOMPOUND_ACTIONS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dsProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"uBorrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"enterMarket\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dsProxy\",\"type\":\"address\"}],\"name\":\"claimComp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dsProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dsProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"enterMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dsProxy\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"cTokens\",\"type\":\"address[]\"}],\"name\":\"enterMarkets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dsProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cToken\",\"type\":\"address\"}],\"name\":\"exitMarket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dsProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenRepay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenWithdraw\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"uRepayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cWithdrawAmount\",\"type\":\"uint256\"}],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dsProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/compound/HSCompound.sol\":\"HSCompound\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/compound/HSCompound.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"../maker/IDSProxy.sol\\\";\\nimport \\\"./ICToken.sol\\\";\\nimport \\\"./IComptroller.sol\\\";\\n\\ncontract HSCompound is HandlerBase {\\n    using SafeERC20 for IERC20;\\n\\n    // prettier-ignore\\n    address public constant FCOMPOUND_ACTIONS = 0x05EF8eb657027927fAB9b279138f0189CB144976;\\n    // prettier-ignore\\n    address public constant COMPTROLLER = 0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B;\\n    // prettier-ignore\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    // prettier-ignore\\n    address public constant CETH_ADDRESS = 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5;\\n    // prettier-ignore\\n    address public constant COMP_ADDRESS = 0xc00e94Cb662C3520282E6f5717214004A7f26888;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HSCompound\\\";\\n    }\\n\\n    modifier isDSProxyOwner(address dsProxy) {\\n        address sender = _getSender();\\n        if (IDSProxy(dsProxy).owner() != sender)\\n            _revertMsg(\\\"General\\\", \\\"Not owner of the DSProxy\\\");\\n        _;\\n    }\\n\\n    function deposit(\\n        address dsProxy,\\n        address token,\\n        uint256 amount\\n    ) external payable isDSProxyOwner(dsProxy) {\\n        _deposit(dsProxy, token, amount);\\n    }\\n\\n    function withdraw(\\n        address dsProxy,\\n        address token,\\n        uint256 amount\\n    ) external payable isDSProxyOwner(dsProxy) {\\n        _withdraw(dsProxy, token, amount);\\n        if (token != ETH_ADDRESS) _updateToken(token);\\n    }\\n\\n    function borrow(\\n        address dsProxy,\\n        address cTokenIn,\\n        address cTokenBorrow,\\n        uint256 cAmountIn,\\n        uint256 uBorrowAmount,\\n        bool enterMarket\\n    ) external payable isDSProxyOwner(dsProxy) {\\n        if (cAmountIn > 0) {\\n            _deposit(dsProxy, cTokenIn, cAmountIn);\\n        }\\n\\n        if (enterMarket) {\\n            _enterMarket(dsProxy, cTokenIn);\\n        }\\n\\n        if (uBorrowAmount > 0) {\\n            address underlying;\\n            if (cTokenBorrow == CETH_ADDRESS) {\\n                underlying = ETH_ADDRESS;\\n            } else {\\n                underlying = _getToken(cTokenBorrow);\\n            }\\n            // Execute borrow, borrowed token will stay in the DSProxy\\n            try\\n                IDSProxy(dsProxy).execute(\\n                    FCOMPOUND_ACTIONS,\\n                    abi.encodeWithSelector(\\n                        // selector of \\\"borrow(address,uint256)\\\"\\n                        0x4b8a3529,\\n                        cTokenBorrow,\\n                        uBorrowAmount\\n                    )\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"borrow\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"borrow\\\");\\n            }\\n            // Withdraw borrowed token from the DSProxy\\n            _withdraw(dsProxy, underlying, uBorrowAmount);\\n\\n            // Update borrowed token\\n            if (underlying != ETH_ADDRESS) _updateToken(underlying);\\n        }\\n    }\\n\\n    function repayBorrow(\\n        address dsProxy,\\n        address cTokenRepay,\\n        address cTokenWithdraw,\\n        uint256 uRepayAmount,\\n        uint256 cWithdrawAmount\\n    ) external payable isDSProxyOwner(dsProxy) {\\n        // Execute repay only when `uRepayAmount` is greater than 0\\n        if (uRepayAmount > 0) {\\n            if (cTokenRepay == CETH_ADDRESS) {\\n                // Execute ether repay\\n                try\\n                    IDSProxy(dsProxy).execute{value: uRepayAmount}(\\n                        FCOMPOUND_ACTIONS,\\n                        abi.encodeWithSelector(\\n                            // selector of \\\"repayBorrow(address,uint256)\\\"\\n                            0xabdb5ea8,\\n                            cTokenRepay,\\n                            uRepayAmount\\n                        )\\n                    )\\n                {} catch Error(string memory reason) {\\n                    _revertMsg(\\\"repayBorrow\\\", reason);\\n                } catch {\\n                    _revertMsg(\\\"repayBorrow\\\");\\n                }\\n            } else {\\n                // Approve repay token to DSProxy\\n                address underlying = _getToken(cTokenRepay);\\n                IERC20(underlying).safeApprove(dsProxy, uRepayAmount);\\n                // Execute token repay\\n                try\\n                    IDSProxy(dsProxy).execute(\\n                        FCOMPOUND_ACTIONS,\\n                        abi.encodeWithSelector(\\n                            // selector of \\\"repayBorrow(address,uint256)\\\"\\n                            0xabdb5ea8,\\n                            cTokenRepay,\\n                            uRepayAmount\\n                        )\\n                    )\\n                {} catch Error(string memory reason) {\\n                    _revertMsg(\\\"repayBorrow\\\", reason);\\n                } catch {\\n                    _revertMsg(\\\"repayBorrow\\\");\\n                }\\n                IERC20(underlying).safeApprove(dsProxy, 0);\\n            }\\n        }\\n\\n        if (cWithdrawAmount > 0) {\\n            // Withdraw collateral from DSProxy\\n            _withdraw(dsProxy, cTokenWithdraw, cWithdrawAmount);\\n            // Update collateral token\\n            _updateToken(cTokenWithdraw);\\n        }\\n    }\\n\\n    function enterMarket(address dsProxy, address cToken)\\n        external\\n        payable\\n        isDSProxyOwner(dsProxy)\\n    {\\n        _enterMarket(dsProxy, cToken);\\n    }\\n\\n    function enterMarkets(address dsProxy, address[] calldata cTokens)\\n        external\\n        payable\\n        isDSProxyOwner(dsProxy)\\n    {\\n        try\\n            IDSProxy(dsProxy).execute(\\n                FCOMPOUND_ACTIONS,\\n                abi.encodeWithSelector(\\n                    // selector of \\\"enterMarkets(address[])\\\"\\n                    0xc2998238,\\n                    cTokens\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"enterMarkets\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"enterMarkets\\\");\\n        }\\n    }\\n\\n    function exitMarket(address dsProxy, address cToken)\\n        external\\n        payable\\n        isDSProxyOwner(dsProxy)\\n    {\\n        try\\n            IDSProxy(dsProxy).execute(\\n                FCOMPOUND_ACTIONS,\\n                abi.encodeWithSelector(\\n                    // selector of \\\"exitMarket(address)\\\"\\n                    0xede4edd0,\\n                    cToken\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"exitMarket\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exitMarket\\\");\\n        }\\n    }\\n\\n    function claimComp(address dsProxy)\\n        external\\n        payable\\n        isDSProxyOwner(dsProxy)\\n        returns (uint256)\\n    {\\n        try IComptroller(COMPTROLLER).claimComp(dsProxy) {} catch Error(\\n            string memory reason\\n        ) {\\n            _revertMsg(\\\"claimComp\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"claimComp\\\");\\n        }\\n        uint256 balance = IERC20(COMP_ADDRESS).balanceOf(dsProxy);\\n        // Withdraw whole COMP balance of DSProxy\\n        _withdraw(dsProxy, COMP_ADDRESS, balance);\\n        _updateToken(COMP_ADDRESS);\\n\\n        return balance;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _deposit(\\n        address dsProxy,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        if (token == ETH_ADDRESS) {\\n            address payable dsProxyPayable = address(uint160(dsProxy));\\n            dsProxyPayable.transfer(amount);\\n        } else {\\n            IERC20(token).safeTransfer(dsProxy, amount);\\n        }\\n    }\\n\\n    function _withdraw(\\n        address dsProxy,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        try\\n            IDSProxy(dsProxy).execute(\\n                FCOMPOUND_ACTIONS,\\n                abi.encodeWithSelector(\\n                    // selector of \\\"withdraw(address,uint256)\\\"\\n                    0xf3fef3a3,\\n                    token,\\n                    amount\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"_withdraw\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"_withdraw\\\");\\n        }\\n    }\\n\\n    function _enterMarket(address dsProxy, address cToken) internal {\\n        try\\n            IDSProxy(dsProxy).execute(\\n                FCOMPOUND_ACTIONS,\\n                abi.encodeWithSelector(\\n                    // selector of \\\"enterMarket(address)\\\"\\n                    0x3fe5d425,\\n                    cToken\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"_enterMarket\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"_enterMarket\\\");\\n        }\\n    }\\n\\n    function _getToken(address token) internal view returns (address) {\\n        return ICToken(token).underlying();\\n    }\\n}\\n\",\"keccak256\":\"0x8f47df32fa9a29aa3e9014c379d065d8e6a0698ca8510bf3025a3aaf555c87e8\"},\"contracts/handlers/compound/ICToken.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ICToken {\\n    function mint(uint mintAmount) external returns (uint);\\n    function redeem(uint redeemTokens) external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) external returns (uint);\\n    function borrow(uint borrowAmount) external returns (uint);\\n    function repayBorrow(uint repayAmount) external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint);\\n    function transfer(address dst, uint amount) external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) external returns (bool);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function balanceOfUnderlying(address owner) external returns (uint);\\n    function getAccountSnapshot(address account) external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() external view returns (uint);\\n    function supplyRatePerBlock() external view returns (uint);\\n    function totalBorrowsCurrent() external returns (uint);\\n    function borrowBalanceCurrent(address account) external returns (uint);\\n    function borrowBalanceStored(address account) external view returns (uint);\\n    function exchangeRateCurrent() external returns (uint);\\n    function exchangeRateStored() external view returns (uint);\\n    function getCash() external view returns (uint);\\n    function accrueInterest() external returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) external returns (uint);\\n\\n    function underlying() external view returns (address);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function admin() external view returns (address);\\n    function pendingAdmin() external view returns (address);\\n    function reserveFactorMantissa() external view returns (uint256);\\n    function accrualBlockNumber() external view returns (uint256);\\n    function borrowIndex() external view returns (uint256);\\n    function totalBorrows() external view returns (uint256);\\n    function totalReserves() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcd17ec8a2d4ec530c7b228183bc3bda2c1dc0f6ae4e56e921da7eea23646e5f2\"},\"contracts/handlers/compound/IComptroller.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IComptroller {\\n    function enterMarkets  (address[] calldata cTokens) external returns (uint[] memory);\\n    function exitMarket(address cToken) external returns (uint);\\n    function checkMembership(address account, address cToken) external view returns (bool);\\n    function claimComp(address holder) external;\\n    function getCompAddress() external view returns(address);\\n}\\n\",\"keccak256\":\"0xe6baa48b5a7759673a61935b578879f6772976c26d51f4110c3d4ade61e0d6c0\"},\"contracts/handlers/maker/IDSProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IDSProxy {\\n    function execute(address _target, bytes calldata _data) external payable returns (bytes32 response);\\n    function owner() external view returns (address);\\n    function setAuthority(address authority_) external;\\n}\\n\\ninterface IDSProxyFactory {\\n    function isProxy(address proxy) external view returns (bool);\\n    function build() external returns (address);\\n    function build(address owner) external returns (address);\\n}\\n\\ninterface IDSProxyRegistry {\\n    function proxies(address input) external view returns (address);\\n    function build() external returns (address);\\n    function build(address owner) external returns (address);\\n}\\n\",\"keccak256\":\"0xa48fa308aae7ac9194c8fa839cf4e389f05ec214f25f0e415de8b72b658405e9\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506135e8806100206000396000f3fe60806040526004361061012a5760003560e01c8063a734f06e116100ab578063dc9031c41161006f578063dc9031c4146105cb578063e9af02921461061a578063f53cc4b314610672578063f5f5ba72146106d6578063fa2901a514610766578063fffdb6a0146107b05761012a565b8063a734f06e14610490578063b2b8b7dc146104d1578063c272291614610512578063d6a898c71461051c578063d9caed121461055d5761012a565b80634ab45d33116100f25780634ab45d33146103265780635f82c67e146103675780638340f549146103a857806387c139431461041657806399eb59b9146104415761012a565b80630f532d181461012f5780631413dc7d1461015a57806324991d66146101855780632e528a37146101e95780634883400d1461028d575b600080fd5b34801561013b57600080fd5b50610144610848565b6040518082815260200191505060405180910390f35b34801561016657600080fd5b5061016f61086f565b6040518082815260200191505060405180910390f35b6101e76004803603604081101561019b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610896565b005b61028b600480360360c08110156101ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035151590602001909291905050506109db565b005b610324600480360360408110156102a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156102e057600080fd5b8201836020820111156102f257600080fd5b8035906020019184602083028401116401000000008311171561031457600080fd5b9091929391929390505050610e4d565b005b34801561033257600080fd5b5061033b6111ce565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037357600080fd5b5061037c6111e6565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610414600480360360608110156103be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111fe565b005b34801561042257600080fd5b5061042b611345565b6040518082815260200191505060405180910390f35b34801561044d57600080fd5b5061047a6004803603602081101561046457600080fd5b8101908080359060200190929190505050611351565b6040518082815260200191505060405180910390f35b34801561049c57600080fd5b506104a5611369565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104dd57600080fd5b506104e6611381565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61051a611399565b005b34801561052857600080fd5b50610531611407565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105c96004803603606081101561057357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061141f565b005b3480156105d757600080fd5b50610604600480360360208110156105ee57600080fd5b81019080803590602001909291905050506115b7565b6040518082815260200191505060405180910390f35b61065c6004803603602081101561063057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115d8565b6040518082815260200191505060405180910390f35b6106d46004803603604081101561068857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061193f565b005b3480156106e257600080fd5b506106eb611ca6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561072b578082015181840152602081019050610710565b50505050905090810190601f1680156107585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561077257600080fd5b5061077b611ce3565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610846600480360360a08110156107c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611cee565b005b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b8160006108a1612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d602081101561092a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146109cb576109ca6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b6109d58484612641565b50505050565b8560006109e6612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d6020811015610a6f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614610b1057610b0f6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b6000851115610b2557610b24888887612871565b5b8215610b3657610b358888612641565b5b6000841115610e43576000734ddc2d193948926d02f9b1fe9e1daa0718270ed573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610ba55773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee9050610bb1565b610bae8761293c565b90505b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb144976634b8a35298a89604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610cc2578082015181840152602081019050610ca7565b50505050905090810190601f168015610cef5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610d0f57600080fd5b505af1925050508015610d4357506040513d6020811015610d2f57600080fd5b810190808051906020019092919050505060015b610de357610d4f613476565b80610d5a5750610d9f565b610d996040518060400160405280600681526020017f626f72726f770000000000000000000000000000000000000000000000000000815250826123ae565b50610dde565b610ddd6040518060400160405280600681526020017f626f72726f7700000000000000000000000000000000000000000000000000008152506129c6565b5b610de5565b505b610df0898287612a08565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e4157610e4081612c41565b5b505b5050505050505050565b826000610e58612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d6020811015610ee157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614610f8257610f816040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b8473ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb14497663c2998238878760405160240180806020018281038252848482818152602001925060200280828437600081840152601f19601f82011690508083019250505093505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110a4578082015181840152602081019050611089565b50505050905090810190601f1680156110d15780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156110f157600080fd5b505af192505050801561112557506040513d602081101561111157600080fd5b810190808051906020019092919050505060015b6111c557611131613476565b8061113c5750611181565b61117b6040518060400160405280600c81526020017f656e7465724d61726b6574730000000000000000000000000000000000000000815250826123ae565b506111c0565b6111bf6040518060400160405280600c81526020017f656e7465724d61726b65747300000000000000000000000000000000000000008152506129c6565b5b6111c7565b505b5050505050565b734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b826000611209612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561126857600080fd5b505afa15801561127c573d6000803e3d6000fd5b505050506040513d602081101561129257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611333576113326040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b61133e858585612871565b5050505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b73c00e94cb662c3520282e6f5717214004a7f2688881565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b7305ef8eb657027927fab9b279138f0189cb14497681565b82600061142a612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148957600080fd5b505afa15801561149d573d6000803e3d6000fd5b505050506040513d60208110156114b357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611554576115536040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b61155f858585612a08565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146115b0576115af84612c41565b5b5050505050565b600081815481106115c457fe5b906000526020600020016000915090505481565b60008160006115e5612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d602081101561166e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461170f5761170e6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff1663e9af0292856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561178c57600080fd5b505af192505050801561179d575060015b61183d576117a9613476565b806117b457506117f9565b6117f36040518060400160405280600981526020017f636c61696d436f6d700000000000000000000000000000000000000000000000815250826123ae565b50611838565b6118376040518060400160405280600981526020017f636c61696d436f6d7000000000000000000000000000000000000000000000008152506129c6565b5b61183e565b5b600073c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d60208110156118e557600080fd5b810190808051906020019092919050505090506119178573c00e94cb662c3520282e6f5717214004a7f2688883612a08565b61193473c00e94cb662c3520282e6f5717214004a7f26888612c41565b809350505050919050565b81600061194a612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a957600080fd5b505afa1580156119bd573d6000803e3d6000fd5b505050506040513d60208110156119d357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611a7457611a736040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b8373ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb14497663ede4edd086604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b7d578082015181840152602081019050611b62565b50505050905090810190601f168015611baa5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611bca57600080fd5b505af1925050508015611bfe57506040513d6020811015611bea57600080fd5b810190808051906020019092919050505060015b611c9e57611c0a613476565b80611c155750611c5a565b611c546040518060400160405280600a81526020017f657869744d61726b657400000000000000000000000000000000000000000000815250826123ae565b50611c99565b611c986040518060400160405280600a81526020017f657869744d61726b6574000000000000000000000000000000000000000000008152506129c6565b5b611ca0565b505b50505050565b60606040518060400160405280600a81526020017f4853436f6d706f756e6400000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b846000611cf9612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5857600080fd5b505afa158015611d6c573d6000803e3d6000fd5b505050506040513d6020811015611d8257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611e2357611e226040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b600084111561234957734ddc2d193948926d02f9b1fe9e1daa0718270ed573ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156120ae578673ffffffffffffffffffffffffffffffffffffffff16631cff79cd857305ef8eb657027927fab9b279138f0189cb14497663abdb5ea88a89604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611f86578082015181840152602081019050611f6b565b50505050905090810190601f168015611fb35780820380516001836020036101000a031916815260200191505b5093505050506020604051808303818588803b158015611fd257600080fd5b505af19350505050801561200757506040513d6020811015611ff357600080fd5b810190808051906020019092919050505060015b6120a757612013613476565b8061201e5750612063565b61205d6040518060400160405280600b81526020017f7265706179426f72726f77000000000000000000000000000000000000000000815250826123ae565b506120a2565b6120a16040518060400160405280600b81526020017f7265706179426f72726f770000000000000000000000000000000000000000008152506129c6565b5b6120a9565b505b612348565b60006120b98761293c565b90506120e688868373ffffffffffffffffffffffffffffffffffffffff16612c589092919063ffffffff16565b8773ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb14497663abdb5ea88a89604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156121f75780820151818401526020810190506121dc565b50505050905090810190601f1680156122245780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561224457600080fd5b505af192505050801561227857506040513d602081101561226457600080fd5b810190808051906020019092919050505060015b61231857612284613476565b8061228f57506122d4565b6122ce6040518060400160405280600b81526020017f7265706179426f72726f77000000000000000000000000000000000000000000815250826123ae565b50612313565b6123126040518060400160405280600b81526020017f7265706179426f72726f770000000000000000000000000000000000000000008152506129c6565b5b61231a565b505b6123468860008373ffffffffffffffffffffffffffffffffffffffff16612c589092919063ffffffff16565b505b5b60008311156123675761235d878685612a08565b61236685612c41565b5b50505050505050565b60006123a97fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b6001612e1d90919063ffffffff16565b905090565b6123be6123b9612e3d565b612e7b565b6123c6611ca6565b83836040516020018085805190602001908083835b602083106123fe57805182526020820191506020810190506020830392506123db565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b602083106124775780518252602082019150602081019050602083039250612454565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b602083106124f057805182526020820191506020810190506020830392506124cd565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b602083106125695780518252602082019150602081019050602083039250612546565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126065780820151818401526020810190506125eb565b50505050905090810190601f1680156126335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb144976633fe5d42584604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561274a57808201518184015260208101905061272f565b50505050905090810190601f1680156127775780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561279757600080fd5b505af19250505080156127cb57506040513d60208110156127b757600080fd5b810190808051906020019092919050505060015b61286b576127d7613476565b806127e25750612827565b6128216040518060400160405280600c81526020017f5f656e7465724d61726b65740000000000000000000000000000000000000000815250826123ae565b50612866565b6128656040518060400160405280600c81526020017f5f656e7465724d61726b657400000000000000000000000000000000000000008152506129c6565b5b61286d565b505b5050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561290b5760008390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612904573d6000803e3d6000fd5b5050612937565b61293683828473ffffffffffffffffffffffffffffffffffffffff16612fc29092919063ffffffff16565b5b505050565b60008173ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561298457600080fd5b505afa158015612998573d6000803e3d6000fd5b505050506040513d60208110156129ae57600080fd5b81019080805190602001909291905050509050919050565b612a05816040518060400160405280600b81526020017f556e7370656369666965640000000000000000000000000000000000000000008152506123ae565b50565b8273ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb14497663f3fef3a38585604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612b19578082015181840152602081019050612afe565b50505050905090810190601f168015612b465780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612b6657600080fd5b505af1925050508015612b9a57506040513d6020811015612b8657600080fd5b810190808051906020019092919050505060015b612c3a57612ba6613476565b80612bb15750612bf6565b612bf06040518060400160405280600981526020017f5f77697468647261770000000000000000000000000000000000000000000000815250826123ae565b50612c35565b612c346040518060400160405280600981526020017f5f776974686472617700000000000000000000000000000000000000000000008152506129c6565b5b612c3c565b505b505050565b612c5581600061306490919063ffffffff16565b50565b6000811480612d26575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015612ce957600080fd5b505afa158015612cfd573d6000803e3d6000fd5b505050506040513d6020811015612d1357600080fd5b8101908080519060200190929190505050145b612d7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061357d6036913960400191505060405180910390fd5b612e188363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506130a9565b505050565b60008260008381526020019081526020016000205460001c905092915050565b6000612e767ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161319890919063ffffffff16565b905090565b60606000821415612ec3576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612fbd565b6000808390505b6000811115612eed578180600101925050600a8181612ee557fe5b049050612eca565b5060608167ffffffffffffffff81118015612f0757600080fd5b506040519080825280601f01601f191660200182016040528015612f3a5781602001600182028036833780820191505090505b50905060008290505b6000811115612fb657600a8581612f5657fe5b0660300160f81b826001830381518110612f6c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581612fa557fe5b049450808060019003915050612f43565b5080925050505b919050565b61305f8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506130a9565b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b606061310b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131b89092919063ffffffff16565b90506000815111156131935780806020019051602081101561312c57600080fd5b8101908080519060200190929190505050613192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613553602a913960400191505060405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b60606131c784846000856131d0565b90509392505050565b60608247101561322b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061352d6026913960400191505060405180910390fd5b61323485613379565b6132a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106132f657805182526020820191506020810190506020830392506132d3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613358576040519150601f19603f3d011682016040523d82523d6000602084013e61335d565b606091505b509150915061336d82828661338c565b92505050949350505050565b600080823b905060008111915050919050565b6060831561339c57829050613451565b6000835111156133af5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134165780820151818401526020810190506133fb565b50505050905090810190601f1680156134435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d101561348657613529565b60046000803e613497600051613469565b6308c379a081146134a85750613529565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156134d457505050613529565b808201805167ffffffffffffffff8111156134f3575050505050613529565b8060208301013d850181111561350e57505050505050613529565b61351782613458565b60208401016040528296505050505050505b9056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220e705c8ca3ac0a6dcfa605ceb335148796aa1c244812aed3dbddaadb72b62e52764736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c8063a734f06e116100ab578063dc9031c41161006f578063dc9031c4146105cb578063e9af02921461061a578063f53cc4b314610672578063f5f5ba72146106d6578063fa2901a514610766578063fffdb6a0146107b05761012a565b8063a734f06e14610490578063b2b8b7dc146104d1578063c272291614610512578063d6a898c71461051c578063d9caed121461055d5761012a565b80634ab45d33116100f25780634ab45d33146103265780635f82c67e146103675780638340f549146103a857806387c139431461041657806399eb59b9146104415761012a565b80630f532d181461012f5780631413dc7d1461015a57806324991d66146101855780632e528a37146101e95780634883400d1461028d575b600080fd5b34801561013b57600080fd5b50610144610848565b6040518082815260200191505060405180910390f35b34801561016657600080fd5b5061016f61086f565b6040518082815260200191505060405180910390f35b6101e76004803603604081101561019b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610896565b005b61028b600480360360c08110156101ff57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035151590602001909291905050506109db565b005b610324600480360360408110156102a357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156102e057600080fd5b8201836020820111156102f257600080fd5b8035906020019184602083028401116401000000008311171561031457600080fd5b9091929391929390505050610e4d565b005b34801561033257600080fd5b5061033b6111ce565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561037357600080fd5b5061037c6111e6565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610414600480360360608110156103be57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506111fe565b005b34801561042257600080fd5b5061042b611345565b6040518082815260200191505060405180910390f35b34801561044d57600080fd5b5061047a6004803603602081101561046457600080fd5b8101908080359060200190929190505050611351565b6040518082815260200191505060405180910390f35b34801561049c57600080fd5b506104a5611369565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104dd57600080fd5b506104e6611381565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61051a611399565b005b34801561052857600080fd5b50610531611407565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105c96004803603606081101561057357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061141f565b005b3480156105d757600080fd5b50610604600480360360208110156105ee57600080fd5b81019080803590602001909291905050506115b7565b6040518082815260200191505060405180910390f35b61065c6004803603602081101561063057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506115d8565b6040518082815260200191505060405180910390f35b6106d46004803603604081101561068857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061193f565b005b3480156106e257600080fd5b506106eb611ca6565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561072b578082015181840152602081019050610710565b50505050905090810190601f1680156107585780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561077257600080fd5b5061077b611ce3565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610846600480360360a08110156107c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611cee565b005b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b8160006108a1612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561090057600080fd5b505afa158015610914573d6000803e3d6000fd5b505050506040513d602081101561092a57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff16146109cb576109ca6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b6109d58484612641565b50505050565b8560006109e6612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d6020811015610a6f57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614610b1057610b0f6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b6000851115610b2557610b24888887612871565b5b8215610b3657610b358888612641565b5b6000841115610e43576000734ddc2d193948926d02f9b1fe9e1daa0718270ed573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff161415610ba55773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee9050610bb1565b610bae8761293c565b90505b8873ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb144976634b8a35298a89604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610cc2578082015181840152602081019050610ca7565b50505050905090810190601f168015610cef5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610d0f57600080fd5b505af1925050508015610d4357506040513d6020811015610d2f57600080fd5b810190808051906020019092919050505060015b610de357610d4f613476565b80610d5a5750610d9f565b610d996040518060400160405280600681526020017f626f72726f770000000000000000000000000000000000000000000000000000815250826123ae565b50610dde565b610ddd6040518060400160405280600681526020017f626f72726f7700000000000000000000000000000000000000000000000000008152506129c6565b5b610de5565b505b610df0898287612a08565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610e4157610e4081612c41565b5b505b5050505050505050565b826000610e58612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610eb757600080fd5b505afa158015610ecb573d6000803e3d6000fd5b505050506040513d6020811015610ee157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614610f8257610f816040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b8473ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb14497663c2998238878760405160240180806020018281038252848482818152602001925060200280828437600081840152601f19601f82011690508083019250505093505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156110a4578082015181840152602081019050611089565b50505050905090810190601f1680156110d15780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156110f157600080fd5b505af192505050801561112557506040513d602081101561111157600080fd5b810190808051906020019092919050505060015b6111c557611131613476565b8061113c5750611181565b61117b6040518060400160405280600c81526020017f656e7465724d61726b6574730000000000000000000000000000000000000000815250826123ae565b506111c0565b6111bf6040518060400160405280600c81526020017f656e7465724d61726b65747300000000000000000000000000000000000000008152506129c6565b5b6111c7565b505b5050505050565b734ddc2d193948926d02f9b1fe9e1daa0718270ed581565b733d9819210a31b4961b30ef54be2aed79b9c9cd3b81565b826000611209612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561126857600080fd5b505afa15801561127c573d6000803e3d6000fd5b505050506040513d602081101561129257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611333576113326040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b61133e858585612871565b5050505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b73c00e94cb662c3520282e6f5717214004a7f2688881565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b7305ef8eb657027927fab9b279138f0189cb14497681565b82600061142a612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561148957600080fd5b505afa15801561149d573d6000803e3d6000fd5b505050506040513d60208110156114b357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611554576115536040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b61155f858585612a08565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146115b0576115af84612c41565b5b5050505050565b600081815481106115c457fe5b906000526020600020016000915090505481565b60008160006115e5612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d602081101561166e57600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff161461170f5761170e6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b733d9819210a31b4961b30ef54be2aed79b9c9cd3b73ffffffffffffffffffffffffffffffffffffffff1663e9af0292856040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b15801561178c57600080fd5b505af192505050801561179d575060015b61183d576117a9613476565b806117b457506117f9565b6117f36040518060400160405280600981526020017f636c61696d436f6d700000000000000000000000000000000000000000000000815250826123ae565b50611838565b6118376040518060400160405280600981526020017f636c61696d436f6d7000000000000000000000000000000000000000000000008152506129c6565b5b61183e565b5b600073c00e94cb662c3520282e6f5717214004a7f2688873ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156118bb57600080fd5b505afa1580156118cf573d6000803e3d6000fd5b505050506040513d60208110156118e557600080fd5b810190808051906020019092919050505090506119178573c00e94cb662c3520282e6f5717214004a7f2688883612a08565b61193473c00e94cb662c3520282e6f5717214004a7f26888612c41565b809350505050919050565b81600061194a612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119a957600080fd5b505afa1580156119bd573d6000803e3d6000fd5b505050506040513d60208110156119d357600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611a7457611a736040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b8373ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb14497663ede4edd086604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611b7d578082015181840152602081019050611b62565b50505050905090810190601f168015611baa5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611bca57600080fd5b505af1925050508015611bfe57506040513d6020811015611bea57600080fd5b810190808051906020019092919050505060015b611c9e57611c0a613476565b80611c155750611c5a565b611c546040518060400160405280600a81526020017f657869744d61726b657400000000000000000000000000000000000000000000815250826123ae565b50611c99565b611c986040518060400160405280600a81526020017f657869744d61726b6574000000000000000000000000000000000000000000008152506129c6565b5b611ca0565b505b50505050565b60606040518060400160405280600a81526020017f4853436f6d706f756e6400000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b846000611cf9612370565b90508073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5857600080fd5b505afa158015611d6c573d6000803e3d6000fd5b505050506040513d6020811015611d8257600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614611e2357611e226040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601881526020017f4e6f74206f776e6572206f662074686520445350726f787900000000000000008152506123ae565b5b600084111561234957734ddc2d193948926d02f9b1fe9e1daa0718270ed573ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156120ae578673ffffffffffffffffffffffffffffffffffffffff16631cff79cd857305ef8eb657027927fab9b279138f0189cb14497663abdb5ea88a89604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611f86578082015181840152602081019050611f6b565b50505050905090810190601f168015611fb35780820380516001836020036101000a031916815260200191505b5093505050506020604051808303818588803b158015611fd257600080fd5b505af19350505050801561200757506040513d6020811015611ff357600080fd5b810190808051906020019092919050505060015b6120a757612013613476565b8061201e5750612063565b61205d6040518060400160405280600b81526020017f7265706179426f72726f77000000000000000000000000000000000000000000815250826123ae565b506120a2565b6120a16040518060400160405280600b81526020017f7265706179426f72726f770000000000000000000000000000000000000000008152506129c6565b5b6120a9565b505b612348565b60006120b98761293c565b90506120e688868373ffffffffffffffffffffffffffffffffffffffff16612c589092919063ffffffff16565b8773ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb14497663abdb5ea88a89604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156121f75780820151818401526020810190506121dc565b50505050905090810190601f1680156122245780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561224457600080fd5b505af192505050801561227857506040513d602081101561226457600080fd5b810190808051906020019092919050505060015b61231857612284613476565b8061228f57506122d4565b6122ce6040518060400160405280600b81526020017f7265706179426f72726f77000000000000000000000000000000000000000000815250826123ae565b50612313565b6123126040518060400160405280600b81526020017f7265706179426f72726f770000000000000000000000000000000000000000008152506129c6565b5b61231a565b505b6123468860008373ffffffffffffffffffffffffffffffffffffffff16612c589092919063ffffffff16565b505b5b60008311156123675761235d878685612a08565b61236685612c41565b5b50505050505050565b60006123a97fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b6001612e1d90919063ffffffff16565b905090565b6123be6123b9612e3d565b612e7b565b6123c6611ca6565b83836040516020018085805190602001908083835b602083106123fe57805182526020820191506020810190506020830392506123db565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b602083106124775780518252602082019150602081019050602083039250612454565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b602083106124f057805182526020820191506020810190506020830392506124cd565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b602083106125695780518252602082019150602081019050602083039250612546565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156126065780820151818401526020810190506125eb565b50505050905090810190601f1680156126335780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb144976633fe5d42584604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561274a57808201518184015260208101905061272f565b50505050905090810190601f1680156127775780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561279757600080fd5b505af19250505080156127cb57506040513d60208110156127b757600080fd5b810190808051906020019092919050505060015b61286b576127d7613476565b806127e25750612827565b6128216040518060400160405280600c81526020017f5f656e7465724d61726b65740000000000000000000000000000000000000000815250826123ae565b50612866565b6128656040518060400160405280600c81526020017f5f656e7465724d61726b657400000000000000000000000000000000000000008152506129c6565b5b61286d565b505b5050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561290b5760008390508073ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015612904573d6000803e3d6000fd5b5050612937565b61293683828473ffffffffffffffffffffffffffffffffffffffff16612fc29092919063ffffffff16565b5b505050565b60008173ffffffffffffffffffffffffffffffffffffffff16636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561298457600080fd5b505afa158015612998573d6000803e3d6000fd5b505050506040513d60208110156129ae57600080fd5b81019080805190602001909291905050509050919050565b612a05816040518060400160405280600b81526020017f556e7370656369666965640000000000000000000000000000000000000000008152506123ae565b50565b8273ffffffffffffffffffffffffffffffffffffffff16631cff79cd7305ef8eb657027927fab9b279138f0189cb14497663f3fef3a38585604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612b19578082015181840152602081019050612afe565b50505050905090810190601f168015612b465780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612b6657600080fd5b505af1925050508015612b9a57506040513d6020811015612b8657600080fd5b810190808051906020019092919050505060015b612c3a57612ba6613476565b80612bb15750612bf6565b612bf06040518060400160405280600981526020017f5f77697468647261770000000000000000000000000000000000000000000000815250826123ae565b50612c35565b612c346040518060400160405280600981526020017f5f776974686472617700000000000000000000000000000000000000000000008152506129c6565b5b612c3c565b505b505050565b612c5581600061306490919063ffffffff16565b50565b6000811480612d26575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b158015612ce957600080fd5b505afa158015612cfd573d6000803e3d6000fd5b505050506040513d6020811015612d1357600080fd5b8101908080519060200190929190505050145b612d7b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061357d6036913960400191505060405180910390fd5b612e188363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506130a9565b505050565b60008260008381526020019081526020016000205460001c905092915050565b6000612e767ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161319890919063ffffffff16565b905090565b60606000821415612ec3576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612fbd565b6000808390505b6000811115612eed578180600101925050600a8181612ee557fe5b049050612eca565b5060608167ffffffffffffffff81118015612f0757600080fd5b506040519080825280601f01601f191660200182016040528015612f3a5781602001600182028036833780820191505090505b50905060008290505b6000811115612fb657600a8581612f5657fe5b0660300160f81b826001830381518110612f6c57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581612fa557fe5b049450808060019003915050612f43565b5080925050505b919050565b61305f8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506130a9565b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b606061310b826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166131b89092919063ffffffff16565b90506000815111156131935780806020019051602081101561312c57600080fd5b8101908080519060200190929190505050613192576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613553602a913960400191505060405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b60606131c784846000856131d0565b90509392505050565b60608247101561322b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061352d6026913960400191505060405180910390fd5b61323485613379565b6132a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106132f657805182526020820191506020810190506020830392506132d3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613358576040519150601f19603f3d011682016040523d82523d6000602084013e61335d565b606091505b509150915061336d82828661338c565b92505050949350505050565b600080823b905060008111915050919050565b6060831561339c57829050613451565b6000835111156133af5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134165780820151818401526020810190506133fb565b50505050905090810190601f1680156134435780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d101561348657613529565b60046000803e613497600051613469565b6308c379a081146134a85750613529565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156134d457505050613529565b808201805167ffffffffffffffff8111156134f3575050505050613529565b8060208301013d850181111561350e57505050505050613529565b61351782613458565b60208401016040528296505050505050505b9056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220e705c8ca3ac0a6dcfa605ceb335148796aa1c244812aed3dbddaadb72b62e52764736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/compound/HSCompound.sol:HSCompound",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/compound/HSCompound.sol:HSCompound",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}