{
  "address": "0x98f15248448cE0509F73596647550668248A4E61",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNISWAPV2_ROUTER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTokenMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETHMin",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountETH",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x666ea93127d41974ecfb22896c7c1cae3a7772e9d8ac1ceb26a17d8dc3db8d22",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x98f15248448cE0509F73596647550668248A4E61",
    "transactionIndex": 0,
    "gasUsed": "3304781",
    "logsBloom": "0x
    "blockHash": "0xe775d49eb635266e435edaaa406e8b87d0889841b7ca0a0849af757de1a2f32e",
    "transactionHash": "0x666ea93127d41974ecfb22896c7c1cae3a7772e9d8ac1ceb26a17d8dc3db8d22",
    "logs": [],
    "blockNumber": 13356597,
    "cumulativeGasUsed": "3304781",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAPV2_ROUTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTokenMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETHMin\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/uniswapv2/HUniswapV2.sol\":\"HUniswapV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/uniswapv2/HUniswapV2.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"./libraries/UniswapV2Library.sol\\\";\\nimport \\\"./IUniswapV2Router02.sol\\\";\\n\\ncontract HUniswapV2 is HandlerBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // prettier-ignore\\n    address public constant UNISWAPV2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HUniswapV2\\\";\\n    }\\n\\n    function addLiquidityETH(\\n        uint256 value,\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        )\\n    {\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n\\n        // Approve token\\n        value = _getBalance(address(0), value);\\n        amountTokenDesired = _getBalance(token, amountTokenDesired);\\n        _tokenApprove(token, UNISWAPV2_ROUTER, amountTokenDesired);\\n\\n        // Add liquidity ETH\\n        try\\n            router.addLiquidityETH{value: value}(\\n                token,\\n                amountTokenDesired,\\n                amountTokenMin,\\n                amountETHMin,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256 ret1, uint256 ret2, uint256 ret3) {\\n            amountToken = ret1;\\n            amountETH = ret2;\\n            liquidity = ret3;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"addLiquidityETH\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"addLiquidityETH\\\");\\n        }\\n\\n        // Update involved token\\n        address pair =\\n            UniswapV2Library.pairFor(router.factory(), token, router.WETH());\\n        _updateToken(pair);\\n    }\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        )\\n    {\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n\\n        // Approve token\\n        amountADesired = _getBalance(tokenA, amountADesired);\\n        amountBDesired = _getBalance(tokenB, amountBDesired);\\n        _tokenApprove(tokenA, UNISWAPV2_ROUTER, amountADesired);\\n        _tokenApprove(tokenB, UNISWAPV2_ROUTER, amountBDesired);\\n\\n        // Add liquidity\\n        try\\n            router.addLiquidity(\\n                tokenA,\\n                tokenB,\\n                amountADesired,\\n                amountBDesired,\\n                amountAMin,\\n                amountBMin,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256 ret1, uint256 ret2, uint256 ret3) {\\n            amountA = ret1;\\n            amountB = ret2;\\n            liquidity = ret3;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"addLiquidity\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"addLiquidity\\\");\\n        }\\n\\n        // Update involved token\\n        address pair =\\n            UniswapV2Library.pairFor(router.factory(), tokenA, tokenB);\\n        _updateToken(pair);\\n    }\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin\\n    ) external payable returns (uint256 amountToken, uint256 amountETH) {\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n        address pair =\\n            UniswapV2Library.pairFor(router.factory(), token, router.WETH());\\n\\n        // Approve token\\n        liquidity = _getBalance(pair, liquidity);\\n        _tokenApprove(pair, UNISWAPV2_ROUTER, liquidity);\\n\\n        // remove liquidityETH\\n        try\\n            router.removeLiquidityETH(\\n                token,\\n                liquidity,\\n                amountTokenMin,\\n                amountETHMin,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256 ret1, uint256 ret2) {\\n            amountToken = ret1;\\n            amountETH = ret2;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"removeLiquidityETH\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"removeLiquidityETH\\\");\\n        }\\n\\n        // Update involved token\\n        _updateToken(token);\\n    }\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin\\n    ) external payable returns (uint256 amountA, uint256 amountB) {\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n        address pair =\\n            UniswapV2Library.pairFor(router.factory(), tokenA, tokenB);\\n\\n        // Approve token\\n        liquidity = _getBalance(pair, liquidity);\\n        _tokenApprove(pair, UNISWAPV2_ROUTER, liquidity);\\n\\n        // remove liquidity\\n        try\\n            router.removeLiquidity(\\n                tokenA,\\n                tokenB,\\n                liquidity,\\n                amountAMin,\\n                amountBMin,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256 ret1, uint256 ret2) {\\n            amountA = ret1;\\n            amountB = ret2;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"removeLiquidity\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"removeLiquidity\\\");\\n        }\\n\\n        // Update involved token\\n        _updateToken(tokenA);\\n        _updateToken(tokenB);\\n    }\\n\\n    function swapExactETHForTokens(\\n        uint256 value,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external payable returns (uint256 amount) {\\n        if (path.length < 2)\\n            _revertMsg(\\\"swapExactETHForTokens\\\", \\\"invalid path\\\");\\n        address tokenOut = path[path.length - 1];\\n\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n        value = _getBalance(address(0), value);\\n        try\\n            router.swapExactETHForTokens{value: value}(\\n                amountOutMin,\\n                path,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256[] memory amounts) {\\n            amount = amounts[amounts.length - 1];\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"swapExactETHForTokens\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"swapExactETHForTokens\\\");\\n        }\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function swapETHForExactTokens(\\n        uint256 value,\\n        uint256 amountOut,\\n        address[] calldata path\\n    ) external payable returns (uint256 amount) {\\n        if (path.length < 2)\\n            _revertMsg(\\\"swapETHForExactTokens\\\", \\\"invalid path\\\");\\n        address tokenOut = path[path.length - 1];\\n\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n\\n        // if amount == uint256(-1) return balance of Proxy\\n        value = _getBalance(address(0), value);\\n\\n        try\\n            router.swapETHForExactTokens{value: value}(\\n                amountOut,\\n                path,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256[] memory amounts) {\\n            amount = amounts[0];\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"swapETHForExactTokens\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"swapETHForExactTokens\\\");\\n        }\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external payable returns (uint256 amount) {\\n        if (path.length < 2)\\n            _revertMsg(\\\"swapExactTokensForETH\\\", \\\"invalid path\\\");\\n        address tokenIn = path[0];\\n\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n\\n        // Approve token\\n        amountIn = _getBalance(tokenIn, amountIn);\\n        _tokenApprove(tokenIn, UNISWAPV2_ROUTER, amountIn);\\n\\n        try\\n            router.swapExactTokensForETH(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256[] memory amounts) {\\n            amount = amounts[amounts.length - 1];\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"swapExactTokensForETH\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"swapExactTokensForETH\\\");\\n        }\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) external payable returns (uint256 amount) {\\n        if (path.length < 2)\\n            _revertMsg(\\\"swapTokensForExactETH\\\", \\\"invalid path\\\");\\n        address tokenIn = path[0];\\n\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n\\n        // if amount == uint256(-1) return balance of Proxy\\n        amountInMax = _getBalance(tokenIn, amountInMax);\\n\\n        // Approve token\\n        _tokenApprove(tokenIn, UNISWAPV2_ROUTER, amountInMax);\\n\\n        try\\n            router.swapTokensForExactETH(\\n                amountOut,\\n                amountInMax,\\n                path,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256[] memory amounts) {\\n            amount = amounts[0];\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"swapTokensForExactETH\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"swapTokensForExactETH\\\");\\n        }\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external payable returns (uint256 amount) {\\n        if (path.length < 2)\\n            _revertMsg(\\\"swapExactTokensForTokens\\\", \\\"invalid path\\\");\\n        address tokenIn = path[0];\\n        address tokenOut = path[path.length - 1];\\n\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n\\n        // Approve token\\n        amountIn = _getBalance(tokenIn, amountIn);\\n        _tokenApprove(tokenIn, UNISWAPV2_ROUTER, amountIn);\\n\\n        try\\n            router.swapExactTokensForTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256[] memory amounts) {\\n            amount = amounts[amounts.length - 1];\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"swapExactTokensForTokens\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"swapExactTokensForTokens\\\");\\n        }\\n\\n        _updateToken(tokenOut);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) external payable returns (uint256 amount) {\\n        if (path.length < 2)\\n            _revertMsg(\\\"swapTokensForExactTokens\\\", \\\"invalid path\\\");\\n        address tokenIn = path[0];\\n        address tokenOut = path[path.length - 1];\\n\\n        // Get uniswapV2 router\\n        IUniswapV2Router02 router = IUniswapV2Router02(UNISWAPV2_ROUTER);\\n\\n        // if amount == uint256(-1) return balance of Proxy\\n        amountInMax = _getBalance(tokenIn, amountInMax);\\n\\n        // Approve token\\n        _tokenApprove(tokenIn, UNISWAPV2_ROUTER, amountInMax);\\n\\n        try\\n            router.swapTokensForExactTokens(\\n                amountOut,\\n                amountInMax,\\n                path,\\n                address(this),\\n                now + 1\\n            )\\n        returns (uint256[] memory amounts) {\\n            amount = amounts[0];\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"swapTokensForExactTokens\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"swapTokensForExactTokens\\\");\\n        }\\n\\n        _updateToken(tokenOut);\\n    }\\n}\\n\",\"keccak256\":\"0x726bf59254e8eb601f584901fec9df7bfe16da3b076553b5431e30d89222647b\"},\"contracts/handlers/uniswapv2/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x802545425f1e51ffc23e683a90a26392ea03742ffb7833eee671bd0110d47c02\"},\"contracts/handlers/uniswapv2/IUniswapV2Router02.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\n\\ninterface IUniswapV2Router02 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5a2f4257c6eacd6e70ded2498e85e254b152f26599b425fa8dcca546fc57264b\"},\"contracts/handlers/uniswapv2/libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    using SafeMath for uint256;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n\\n        pair = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn.mul(997);\\n        uint256 numerator = amountInWithFee.mul(reserveOut);\\n        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint256 denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x973c94833fdd44d4b49ecaf868c701ff4a41ede35a1adcecc19399e6ca7359ed\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613b03806100206000396000f3fe6080604052600436106101145760003560e01c806387c13943116100a0578063dc9031c411610064578063dc9031c414610712578063e2dc85dc14610761578063ef66f725146107fe578063f5f5ba721461089f578063fa2901a51461092f57610114565b806387c139431461057057806399eb59b91461059b578063a1cfacde146105ea578063c272291614610667578063d0241dac1461067157610114565b8063397d4b4a116100e7578063397d4b4a146102be57806349618dad1461035f57806358871c81146103a057806386818f261461042e57806387151a79146104cf57610114565b80630f532d18146101195780631413dc7d1461014457806318a22c401461016f5780633351733f14610210575b600080fd5b34801561012557600080fd5b5061012e610979565b6040518082815260200191505060405180910390f35b34801561015057600080fd5b506101596109a0565b6040518082815260200191505060405180910390f35b6101fa6004803603606081101561018557600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156101b657600080fd5b8201836020820111156101c857600080fd5b803590602001918460208302840111640100000000831117156101ea57600080fd5b90919293919293905050506109c7565b6040518082815260200191505060405180910390f35b61029a600480360360c081101561022657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610d08565b60405180848152602001838152602001828152602001935050505060405180910390f35b610349600480360360608110156102d457600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561030557600080fd5b82018360208201111561031757600080fd5b8035906020019184602083028401116401000000008311171561033957600080fd5b9091929391929390505050610fe6565b6040518082815260200191505060405180910390f35b34801561036b57600080fd5b50610374611364565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61040a600480360360a08110156103b657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061137c565b60405180848152602001838152602001828152602001935050505060405180910390f35b6104b96004803603606081101561044457600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561047557600080fd5b82018360208201111561048757600080fd5b803590602001918460208302840111640100000000831117156104a957600080fd5b9091929391929390505050611696565b6040518082815260200191505060405180910390f35b61055a600480360360608110156104e557600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561051657600080fd5b82018360208201111561052857600080fd5b8035906020019184602083028401116401000000008311171561054a57600080fd5b9091929391929390505050611a17565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b50610585611d41565b6040518082815260200191505060405180910390f35b3480156105a757600080fd5b506105d4600480360360208110156105be57600080fd5b8101908080359060200190929190505050611d4d565b6040518082815260200191505060405180910390f35b61064a6004803603608081101561060057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611d65565b604051808381526020018281526020019250505060405180910390f35b61066f61205f565b005b6106fc6004803603606081101561068757600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156106b857600080fd5b8201836020820111156106ca57600080fd5b803590602001918460208302840111640100000000831117156106ec57600080fd5b90919293919293905050506120cd565b6040518082815260200191505060405180910390f35b34801561071e57600080fd5b5061074b6004803603602081101561073557600080fd5b81019080803590602001909291905050506123fa565b6040518082815260200191505060405180910390f35b6107e1600480360360a081101561077757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061241b565b604051808381526020018281526020019250505060405180910390f35b6108896004803603606081101561081457600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561084557600080fd5b82018360208201111561085757600080fd5b8035906020019184602083028401116401000000008311171561087957600080fd5b90919293919293905050506126bd565b6040518082815260200191505060405180910390f35b3480156108ab57600080fd5b506108b4612a01565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108f45780820151818401526020810190506108d9565b50505050905090810190601f1680156109215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561093b57600080fd5b50610944612a3e565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b60006002838390501015610a4a57610a496040518060400160405280601581526020017f73776170546f6b656e73466f72457861637445544800000000000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b600083836000818110610a5957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d9050610a9b8287612cdc565b9550610abc82737a250d5630b4cf539739df2c5dacb4c659f2488d88612e3f565b8073ffffffffffffffffffffffffffffffffffffffff16634a25d94a8888888830600142016040518763ffffffff1660e01b815260040180878152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b158015610b7757600080fd5b505af1925050508015610c4557506040513d6000823e3d601f19601f820116820180604052506020811015610bab57600080fd5b8101908080516040519392919084640100000000821115610bcb57600080fd5b83820191506020820185811115610be157600080fd5b8251866020820283011164010000000082111715610bfe57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610c35578082015181840152602081019050610c1a565b5050505090500160405250505060015b610ce557610c5161396c565b80610c5c5750610ca1565b610c9b6040518060400160405280601581526020017f73776170546f6b656e73466f724578616374455448000000000000000000000081525082612a49565b50610ce0565b610cdf6040518060400160405280601581526020017f73776170546f6b656e73466f7245786163744554480000000000000000000000815250612f27565b5b610cfe565b80600081518110610cf257fe5b60200260200101519350505b5050949350505050565b600080600080737a250d5630b4cf539739df2c5dacb4c659f2488d9050610d2f8a89612cdc565b9750610d3b8988612cdc565b9650610d5c8a737a250d5630b4cf539739df2c5dacb4c659f2488d8a612e3f565b610d7b89737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8073ffffffffffffffffffffffffffffffffffffffff1663e8e337008b8b8b8b8b8b30600142016040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200198505050505050505050606060405180830381600087803b158015610e4b57600080fd5b505af1925050508015610e9357506040513d6060811015610e6b57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505060015b610f3357610e9f61396c565b80610eaa5750610eef565b610ee96040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082612a49565b50610f2e565b610f2d6040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250612f27565b5b610f40565b8296508195508094505050505b6000610fcd8273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8b57600080fd5b505afa158015610f9f573d6000803e3d6000fd5b505050506040513d6020811015610fb557600080fd5b81019080805190602001909291905050508c8c612f69565b9050610fd881613082565b505096509650969350505050565b60006002838390501015611069576110686040518060400160405280601881526020017f73776170546f6b656e73466f724578616374546f6b656e7300000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b60008383600081811061107857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060008484600187879050038181106110ab57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d90506110ed8388612cdc565b965061110e83737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8073ffffffffffffffffffffffffffffffffffffffff16638803dbee8989898930600142016040518763ffffffff1660e01b815260040180878152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b1580156111c957600080fd5b505af192505050801561129757506040513d6000823e3d601f19601f8201168201806040525060208110156111fd57600080fd5b810190808051604051939291908464010000000082111561121d57600080fd5b8382019150602082018581111561123357600080fd5b825186602082028301116401000000008211171561125057600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561128757808201518184015260208101905061126c565b5050505090500160405250505060015b611337576112a361396c565b806112ae57506112f3565b6112ed6040518060400160405280601881526020017f73776170546f6b656e73466f724578616374546f6b656e73000000000000000081525082612a49565b50611332565b6113316040518060400160405280601881526020017f73776170546f6b656e73466f724578616374546f6b656e730000000000000000815250612f27565b5b611350565b8060008151811061134457fe5b60200260200101519450505b61135982613082565b505050949350505050565b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b600080600080737a250d5630b4cf539739df2c5dacb4c659f2488d90506113a460008a612cdc565b98506113b08888612cdc565b96506113d188737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8073ffffffffffffffffffffffffffffffffffffffff1663f305d7198a8a8a8a8a30600142016040518863ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200196505050505050506060604051808303818588803b15801561147b57600080fd5b505af1935050505080156114c457506040513d606081101561149c57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505060015b611564576114d061396c565b806114db5750611520565b61151a6040518060400160405280600f81526020017f6164644c6971756964697479455448000000000000000000000000000000000081525082612a49565b5061155f565b61155e6040518060400160405280600f81526020017f6164644c69717569646974794554480000000000000000000000000000000000815250612f27565b5b611571565b8296508195508094505050505b600061167e8273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bc57600080fd5b505afa1580156115d0573d6000803e3d6000fd5b505050506040513d60208110156115e657600080fd5b81019080805190602001909291905050508a8473ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561163e57600080fd5b505afa158015611652573d6000803e3d6000fd5b505050506040513d602081101561166857600080fd5b8101908080519060200190929190505050612f69565b905061168981613082565b5050955095509592505050565b60006002838390501015611719576117186040518060400160405280601881526020017f737761704578616374546f6b656e73466f72546f6b656e7300000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b60008383600081811061172857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff169050600084846001878790500381811061175b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d905061179d8389612cdc565b97506117be83737a250d5630b4cf539739df2c5dacb4c659f2488d8a612e3f565b8073ffffffffffffffffffffffffffffffffffffffff166338ed17398989898930600142016040518763ffffffff1660e01b815260040180878152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561187957600080fd5b505af192505050801561194757506040513d6000823e3d601f19601f8201168201806040525060208110156118ad57600080fd5b81019080805160405193929190846401000000008211156118cd57600080fd5b838201915060208201858111156118e357600080fd5b825186602082028301116401000000008211171561190057600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561193757808201518184015260208101905061191c565b5050505090500160405250505060015b6119e75761195361396c565b8061195e57506119a3565b61199d6040518060400160405280601881526020017f737761704578616374546f6b656e73466f72546f6b656e73000000000000000081525082612a49565b506119e2565b6119e16040518060400160405280601881526020017f737761704578616374546f6b656e73466f72546f6b656e730000000000000000815250612f27565b5b611a03565b806001825103815181106119f757fe5b60200260200101519450505b611a0c82613082565b505050949350505050565b60006002838390501015611a9a57611a996040518060400160405280601581526020017f73776170455448466f724578616374546f6b656e7300000000000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b6000838360018686905003818110611aae57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d9050611af1600088612cdc565b96508073ffffffffffffffffffffffffffffffffffffffff1663fb3bdb418888888830600142016040518763ffffffff1660e01b815260040180868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f82011690508083019250505096505050505050506000604051808303818588803b158015611ba657600080fd5b505af193505050508015611c7557506040513d6000823e3d601f19601f820116820180604052506020811015611bdb57600080fd5b8101908080516040519392919084640100000000821115611bfb57600080fd5b83820191506020820185811115611c1157600080fd5b8251866020820283011164010000000082111715611c2e57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611c65578082015181840152602081019050611c4a565b5050505090500160405250505060015b611d1557611c8161396c565b80611c8c5750611cd1565b611ccb6040518060400160405280601581526020017f73776170455448466f724578616374546f6b656e73000000000000000000000081525082612a49565b50611d10565b611d0f6040518060400160405280601581526020017f73776170455448466f724578616374546f6b656e730000000000000000000000815250612f27565b5b611d2e565b80600081518110611d2257fe5b60200260200101519350505b611d3782613082565b5050949350505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b6000806000737a250d5630b4cf539739df2c5dacb4c659f2488d90506000611e8e8273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611dcc57600080fd5b505afa158015611de0573d6000803e3d6000fd5b505050506040513d6020811015611df657600080fd5b8101908080519060200190929190505050898473ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4e57600080fd5b505afa158015611e62573d6000803e3d6000fd5b505050506040513d6020811015611e7857600080fd5b8101908080519060200190929190505050612f69565b9050611e9a8188612cdc565b9650611ebb81737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8173ffffffffffffffffffffffffffffffffffffffff166302751cec8989898930600142016040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200196505050505050506040805180830381600087803b158015611f6457600080fd5b505af1925050508015611fa257506040513d6040811015611f8457600080fd5b81019080805190602001909291908051906020019092919050505060015b61204257611fae61396c565b80611fb95750611ffe565b611ff86040518060400160405280601281526020017f72656d6f76654c6971756964697479455448000000000000000000000000000081525082612a49565b5061203d565b61203c6040518060400160405280601281526020017f72656d6f76654c69717569646974794554480000000000000000000000000000815250612f27565b5b61204b565b81955080945050505b61205488613082565b505094509492505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b600060028383905010156121505761214f6040518060400160405280601581526020017f737761704578616374455448466f72546f6b656e7300000000000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b600083836001868690500381811061216457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d90506121a7600088612cdc565b96508073ffffffffffffffffffffffffffffffffffffffff16637ff36ab58888888830600142016040518763ffffffff1660e01b815260040180868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f82011690508083019250505096505050505050506000604051808303818588803b15801561225c57600080fd5b505af19350505050801561232b57506040513d6000823e3d601f19601f82011682018060405250602081101561229157600080fd5b81019080805160405193929190846401000000008211156122b157600080fd5b838201915060208201858111156122c757600080fd5b82518660208202830111640100000000821117156122e457600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561231b578082015181840152602081019050612300565b5050505090500160405250505060015b6123cb5761233761396c565b806123425750612387565b6123816040518060400160405280601581526020017f737761704578616374455448466f72546f6b656e73000000000000000000000081525082612a49565b506123c6565b6123c56040518060400160405280601581526020017f737761704578616374455448466f72546f6b656e730000000000000000000000815250612f27565b5b6123e7565b806001825103815181106123db57fe5b60200260200101519350505b6123f082613082565b5050949350505050565b6000818154811061240757fe5b906000526020600020016000915090505481565b6000806000737a250d5630b4cf539739df2c5dacb4c659f2488d905060006124c48273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561248257600080fd5b505afa158015612496573d6000803e3d6000fd5b505050506040513d60208110156124ac57600080fd5b81019080805190602001909291905050508a8a612f69565b90506124d08188612cdc565b96506124f181737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8173ffffffffffffffffffffffffffffffffffffffff1663baa2abde8a8a8a8a8a30600142016040518863ffffffff1660e01b8152600401808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019750505050505050506040805180830381600087803b1580156125b857600080fd5b505af19250505080156125f657506040513d60408110156125d857600080fd5b81019080805190602001909291908051906020019092919050505060015b6126965761260261396c565b8061260d5750612652565b61264c6040518060400160405280600f81526020017f72656d6f76654c6971756964697479000000000000000000000000000000000081525082612a49565b50612691565b6126906040518060400160405280600f81526020017f72656d6f76654c69717569646974790000000000000000000000000000000000815250612f27565b5b61269f565b81955080945050505b6126a889613082565b6126b188613082565b50509550959350505050565b600060028383905010156127405761273f6040518060400160405280601581526020017f737761704578616374546f6b656e73466f7245544800000000000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b60008383600081811061274f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d90506127918288612cdc565b96506127b282737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8073ffffffffffffffffffffffffffffffffffffffff166318cbafe58888888830600142016040518763ffffffff1660e01b815260040180878152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561286d57600080fd5b505af192505050801561293b57506040513d6000823e3d601f19601f8201168201806040525060208110156128a157600080fd5b81019080805160405193929190846401000000008211156128c157600080fd5b838201915060208201858111156128d757600080fd5b82518660208202830111640100000000821117156128f457600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561292b578082015181840152602081019050612910565b5050505090500160405250505060015b6129db5761294761396c565b806129525750612997565b6129916040518060400160405280601581526020017f737761704578616374546f6b656e73466f72455448000000000000000000000081525082612a49565b506129d6565b6129d56040518060400160405280601581526020017f737761704578616374546f6b656e73466f724554480000000000000000000000815250612f27565b5b6129f7565b806001825103815181106129eb57fe5b60200260200101519350505b5050949350505050565b60606040518060400160405280600a81526020017f48556e6973776170563200000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b612a59612a54613099565b6130d7565b612a61612a01565b83836040516020018085805190602001908083835b60208310612a995780518252602082019150602081019050602083039250612a76565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b60208310612b125780518252602082019150602081019050602083039250612aef565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310612b8b5780518252602082019150602081019050602083039250612b68565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b60208310612c045780518252602082019150602081019050602083039250612be1565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ca1578082015181840152602081019050612c86565b50505050905090810190601f168015612cce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214612d0d57819050612e39565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612d87575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15612d9457479050612e39565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612dfb57600080fd5b505afa158015612e0f573d6000803e3d6000fd5b505050506040513d6020811015612e2557600080fd5b810190808051906020019092919050505090505b92915050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612eb057600080fd5b505af1925050508015612ec1575060015b612f2157612ef18260008573ffffffffffffffffffffffffffffffffffffffff1661321e9092919063ffffffff16565b612f1c82828573ffffffffffffffffffffffffffffffffffffffff1661321e9092919063ffffffff16565b612f22565b5b505050565b612f66816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250612a49565b50565b6000806000612f7885856133e3565b91509150858282604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012060405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001807f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f815250602001925050506040516020818303038152906040528051906020012060001c925050509392505050565b61309681600061355a90919063ffffffff16565b50565b60006130d27ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161359f90919063ffffffff16565b905090565b6060600082141561311f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613219565b6000808390505b6000811115613149578180600101925050600a818161314157fe5b049050613126565b5060608167ffffffffffffffff8111801561316357600080fd5b506040519080825280601f01601f1916602001820160405280156131965781602001600182028036833780820191505090505b50905060008290505b600081111561321257600a85816131b257fe5b0660300160f81b8260018303815181106131c857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161320157fe5b04945080806001900391505061319f565b5080925050505b919050565b60008114806132ec575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156132af57600080fd5b505afa1580156132c3573d6000803e3d6000fd5b505050506040513d60208110156132d957600080fd5b8101908080519060200190929190505050145b613341576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180613a986036913960400191505060405180910390fd5b6133de8363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135bf565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561346b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613a236025913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106134a55782846134a8565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556e697377617056324c6962726172793a205a45524f5f41444452455353000081525060200191505060405180910390fd5b9250929050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60008260008381526020019081526020016000205460001c905092915050565b6060613621826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166136ae9092919063ffffffff16565b90506000815111156136a95780806020019051602081101561364257600080fd5b81019080805190602001909291905050506136a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a6e602a913960400191505060405180910390fd5b5b505050565b60606136bd84846000856136c6565b90509392505050565b606082471015613721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613a486026913960400191505060405180910390fd5b61372a8561386f565b61379c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106137ec57805182526020820191506020810190506020830392506137c9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461384e576040519150601f19603f3d011682016040523d82523d6000602084013e613853565b606091505b5091509150613863828286613882565b92505050949350505050565b600080823b905060008111915050919050565b6060831561389257829050613947565b6000835111156138a55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561390c5780820151818401526020810190506138f1565b50505050905090810190601f1680156139395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d101561397c57613a1f565b60046000803e61398d60005161395f565b6308c379a0811461399e5750613a1f565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156139ca57505050613a1f565b808201805167ffffffffffffffff8111156139e9575050505050613a1f565b8060208301013d8501811115613a0457505050505050613a1f565b613a0d8261394e565b60208401016040528296505050505050505b9056fe556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212200f7e22d7f4a5aef2b0f389c7cce45e9cccd8301a233fae98aca767dfbe1b453f64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101145760003560e01c806387c13943116100a0578063dc9031c411610064578063dc9031c414610712578063e2dc85dc14610761578063ef66f725146107fe578063f5f5ba721461089f578063fa2901a51461092f57610114565b806387c139431461057057806399eb59b91461059b578063a1cfacde146105ea578063c272291614610667578063d0241dac1461067157610114565b8063397d4b4a116100e7578063397d4b4a146102be57806349618dad1461035f57806358871c81146103a057806386818f261461042e57806387151a79146104cf57610114565b80630f532d18146101195780631413dc7d1461014457806318a22c401461016f5780633351733f14610210575b600080fd5b34801561012557600080fd5b5061012e610979565b6040518082815260200191505060405180910390f35b34801561015057600080fd5b506101596109a0565b6040518082815260200191505060405180910390f35b6101fa6004803603606081101561018557600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156101b657600080fd5b8201836020820111156101c857600080fd5b803590602001918460208302840111640100000000831117156101ea57600080fd5b90919293919293905050506109c7565b6040518082815260200191505060405180910390f35b61029a600480360360c081101561022657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050610d08565b60405180848152602001838152602001828152602001935050505060405180910390f35b610349600480360360608110156102d457600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561030557600080fd5b82018360208201111561031757600080fd5b8035906020019184602083028401116401000000008311171561033957600080fd5b9091929391929390505050610fe6565b6040518082815260200191505060405180910390f35b34801561036b57600080fd5b50610374611364565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61040a600480360360a08110156103b657600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061137c565b60405180848152602001838152602001828152602001935050505060405180910390f35b6104b96004803603606081101561044457600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561047557600080fd5b82018360208201111561048757600080fd5b803590602001918460208302840111640100000000831117156104a957600080fd5b9091929391929390505050611696565b6040518082815260200191505060405180910390f35b61055a600480360360608110156104e557600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561051657600080fd5b82018360208201111561052857600080fd5b8035906020019184602083028401116401000000008311171561054a57600080fd5b9091929391929390505050611a17565b6040518082815260200191505060405180910390f35b34801561057c57600080fd5b50610585611d41565b6040518082815260200191505060405180910390f35b3480156105a757600080fd5b506105d4600480360360208110156105be57600080fd5b8101908080359060200190929190505050611d4d565b6040518082815260200191505060405180910390f35b61064a6004803603608081101561060057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611d65565b604051808381526020018281526020019250505060405180910390f35b61066f61205f565b005b6106fc6004803603606081101561068757600080fd5b810190808035906020019092919080359060200190929190803590602001906401000000008111156106b857600080fd5b8201836020820111156106ca57600080fd5b803590602001918460208302840111640100000000831117156106ec57600080fd5b90919293919293905050506120cd565b6040518082815260200191505060405180910390f35b34801561071e57600080fd5b5061074b6004803603602081101561073557600080fd5b81019080803590602001909291905050506123fa565b6040518082815260200191505060405180910390f35b6107e1600480360360a081101561077757600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061241b565b604051808381526020018281526020019250505060405180910390f35b6108896004803603606081101561081457600080fd5b8101908080359060200190929190803590602001909291908035906020019064010000000081111561084557600080fd5b82018360208201111561085757600080fd5b8035906020019184602083028401116401000000008311171561087957600080fd5b90919293919293905050506126bd565b6040518082815260200191505060405180910390f35b3480156108ab57600080fd5b506108b4612a01565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156108f45780820151818401526020810190506108d9565b50505050905090810190601f1680156109215780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561093b57600080fd5b50610944612a3e565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b60006002838390501015610a4a57610a496040518060400160405280601581526020017f73776170546f6b656e73466f72457861637445544800000000000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b600083836000818110610a5957fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d9050610a9b8287612cdc565b9550610abc82737a250d5630b4cf539739df2c5dacb4c659f2488d88612e3f565b8073ffffffffffffffffffffffffffffffffffffffff16634a25d94a8888888830600142016040518763ffffffff1660e01b815260040180878152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b158015610b7757600080fd5b505af1925050508015610c4557506040513d6000823e3d601f19601f820116820180604052506020811015610bab57600080fd5b8101908080516040519392919084640100000000821115610bcb57600080fd5b83820191506020820185811115610be157600080fd5b8251866020820283011164010000000082111715610bfe57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610c35578082015181840152602081019050610c1a565b5050505090500160405250505060015b610ce557610c5161396c565b80610c5c5750610ca1565b610c9b6040518060400160405280601581526020017f73776170546f6b656e73466f724578616374455448000000000000000000000081525082612a49565b50610ce0565b610cdf6040518060400160405280601581526020017f73776170546f6b656e73466f7245786163744554480000000000000000000000815250612f27565b5b610cfe565b80600081518110610cf257fe5b60200260200101519350505b5050949350505050565b600080600080737a250d5630b4cf539739df2c5dacb4c659f2488d9050610d2f8a89612cdc565b9750610d3b8988612cdc565b9650610d5c8a737a250d5630b4cf539739df2c5dacb4c659f2488d8a612e3f565b610d7b89737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8073ffffffffffffffffffffffffffffffffffffffff1663e8e337008b8b8b8b8b8b30600142016040518963ffffffff1660e01b8152600401808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018781526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200198505050505050505050606060405180830381600087803b158015610e4b57600080fd5b505af1925050508015610e9357506040513d6060811015610e6b57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505060015b610f3357610e9f61396c565b80610eaa5750610eef565b610ee96040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082612a49565b50610f2e565b610f2d6040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250612f27565b5b610f40565b8296508195508094505050505b6000610fcd8273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8b57600080fd5b505afa158015610f9f573d6000803e3d6000fd5b505050506040513d6020811015610fb557600080fd5b81019080805190602001909291905050508c8c612f69565b9050610fd881613082565b505096509650969350505050565b60006002838390501015611069576110686040518060400160405280601881526020017f73776170546f6b656e73466f724578616374546f6b656e7300000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b60008383600081811061107857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff16905060008484600187879050038181106110ab57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d90506110ed8388612cdc565b965061110e83737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8073ffffffffffffffffffffffffffffffffffffffff16638803dbee8989898930600142016040518763ffffffff1660e01b815260040180878152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b1580156111c957600080fd5b505af192505050801561129757506040513d6000823e3d601f19601f8201168201806040525060208110156111fd57600080fd5b810190808051604051939291908464010000000082111561121d57600080fd5b8382019150602082018581111561123357600080fd5b825186602082028301116401000000008211171561125057600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561128757808201518184015260208101905061126c565b5050505090500160405250505060015b611337576112a361396c565b806112ae57506112f3565b6112ed6040518060400160405280601881526020017f73776170546f6b656e73466f724578616374546f6b656e73000000000000000081525082612a49565b50611332565b6113316040518060400160405280601881526020017f73776170546f6b656e73466f724578616374546f6b656e730000000000000000815250612f27565b5b611350565b8060008151811061134457fe5b60200260200101519450505b61135982613082565b505050949350505050565b737a250d5630b4cf539739df2c5dacb4c659f2488d81565b600080600080737a250d5630b4cf539739df2c5dacb4c659f2488d90506113a460008a612cdc565b98506113b08888612cdc565b96506113d188737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8073ffffffffffffffffffffffffffffffffffffffff1663f305d7198a8a8a8a8a30600142016040518863ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200196505050505050506060604051808303818588803b15801561147b57600080fd5b505af1935050505080156114c457506040513d606081101561149c57600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505060015b611564576114d061396c565b806114db5750611520565b61151a6040518060400160405280600f81526020017f6164644c6971756964697479455448000000000000000000000000000000000081525082612a49565b5061155f565b61155e6040518060400160405280600f81526020017f6164644c69717569646974794554480000000000000000000000000000000000815250612f27565b5b611571565b8296508195508094505050505b600061167e8273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b1580156115bc57600080fd5b505afa1580156115d0573d6000803e3d6000fd5b505050506040513d60208110156115e657600080fd5b81019080805190602001909291905050508a8473ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561163e57600080fd5b505afa158015611652573d6000803e3d6000fd5b505050506040513d602081101561166857600080fd5b8101908080519060200190929190505050612f69565b905061168981613082565b5050955095509592505050565b60006002838390501015611719576117186040518060400160405280601881526020017f737761704578616374546f6b656e73466f72546f6b656e7300000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b60008383600081811061172857fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff169050600084846001878790500381811061175b57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d905061179d8389612cdc565b97506117be83737a250d5630b4cf539739df2c5dacb4c659f2488d8a612e3f565b8073ffffffffffffffffffffffffffffffffffffffff166338ed17398989898930600142016040518763ffffffff1660e01b815260040180878152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561187957600080fd5b505af192505050801561194757506040513d6000823e3d601f19601f8201168201806040525060208110156118ad57600080fd5b81019080805160405193929190846401000000008211156118cd57600080fd5b838201915060208201858111156118e357600080fd5b825186602082028301116401000000008211171561190057600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561193757808201518184015260208101905061191c565b5050505090500160405250505060015b6119e75761195361396c565b8061195e57506119a3565b61199d6040518060400160405280601881526020017f737761704578616374546f6b656e73466f72546f6b656e73000000000000000081525082612a49565b506119e2565b6119e16040518060400160405280601881526020017f737761704578616374546f6b656e73466f72546f6b656e730000000000000000815250612f27565b5b611a03565b806001825103815181106119f757fe5b60200260200101519450505b611a0c82613082565b505050949350505050565b60006002838390501015611a9a57611a996040518060400160405280601581526020017f73776170455448466f724578616374546f6b656e7300000000000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b6000838360018686905003818110611aae57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d9050611af1600088612cdc565b96508073ffffffffffffffffffffffffffffffffffffffff1663fb3bdb418888888830600142016040518763ffffffff1660e01b815260040180868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f82011690508083019250505096505050505050506000604051808303818588803b158015611ba657600080fd5b505af193505050508015611c7557506040513d6000823e3d601f19601f820116820180604052506020811015611bdb57600080fd5b8101908080516040519392919084640100000000821115611bfb57600080fd5b83820191506020820185811115611c1157600080fd5b8251866020820283011164010000000082111715611c2e57600080fd5b8083526020830192505050908051906020019060200280838360005b83811015611c65578082015181840152602081019050611c4a565b5050505090500160405250505060015b611d1557611c8161396c565b80611c8c5750611cd1565b611ccb6040518060400160405280601581526020017f73776170455448466f724578616374546f6b656e73000000000000000000000081525082612a49565b50611d10565b611d0f6040518060400160405280601581526020017f73776170455448466f724578616374546f6b656e730000000000000000000000815250612f27565b5b611d2e565b80600081518110611d2257fe5b60200260200101519350505b611d3782613082565b5050949350505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b6000806000737a250d5630b4cf539739df2c5dacb4c659f2488d90506000611e8e8273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b158015611dcc57600080fd5b505afa158015611de0573d6000803e3d6000fd5b505050506040513d6020811015611df657600080fd5b8101908080519060200190929190505050898473ffffffffffffffffffffffffffffffffffffffff1663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b158015611e4e57600080fd5b505afa158015611e62573d6000803e3d6000fd5b505050506040513d6020811015611e7857600080fd5b8101908080519060200190929190505050612f69565b9050611e9a8188612cdc565b9650611ebb81737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8173ffffffffffffffffffffffffffffffffffffffff166302751cec8989898930600142016040518763ffffffff1660e01b8152600401808773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200196505050505050506040805180830381600087803b158015611f6457600080fd5b505af1925050508015611fa257506040513d6040811015611f8457600080fd5b81019080805190602001909291908051906020019092919050505060015b61204257611fae61396c565b80611fb95750611ffe565b611ff86040518060400160405280601281526020017f72656d6f76654c6971756964697479455448000000000000000000000000000081525082612a49565b5061203d565b61203c6040518060400160405280601281526020017f72656d6f76654c69717569646974794554480000000000000000000000000000815250612f27565b5b61204b565b81955080945050505b61205488613082565b505094509492505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b600060028383905010156121505761214f6040518060400160405280601581526020017f737761704578616374455448466f72546f6b656e7300000000000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b600083836001868690500381811061216457fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d90506121a7600088612cdc565b96508073ffffffffffffffffffffffffffffffffffffffff16637ff36ab58888888830600142016040518763ffffffff1660e01b815260040180868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f82011690508083019250505096505050505050506000604051808303818588803b15801561225c57600080fd5b505af19350505050801561232b57506040513d6000823e3d601f19601f82011682018060405250602081101561229157600080fd5b81019080805160405193929190846401000000008211156122b157600080fd5b838201915060208201858111156122c757600080fd5b82518660208202830111640100000000821117156122e457600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561231b578082015181840152602081019050612300565b5050505090500160405250505060015b6123cb5761233761396c565b806123425750612387565b6123816040518060400160405280601581526020017f737761704578616374455448466f72546f6b656e73000000000000000000000081525082612a49565b506123c6565b6123c56040518060400160405280601581526020017f737761704578616374455448466f72546f6b656e730000000000000000000000815250612f27565b5b6123e7565b806001825103815181106123db57fe5b60200260200101519350505b6123f082613082565b5050949350505050565b6000818154811061240757fe5b906000526020600020016000915090505481565b6000806000737a250d5630b4cf539739df2c5dacb4c659f2488d905060006124c48273ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561248257600080fd5b505afa158015612496573d6000803e3d6000fd5b505050506040513d60208110156124ac57600080fd5b81019080805190602001909291905050508a8a612f69565b90506124d08188612cdc565b96506124f181737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8173ffffffffffffffffffffffffffffffffffffffff1663baa2abde8a8a8a8a8a30600142016040518863ffffffff1660e01b8152600401808873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019750505050505050506040805180830381600087803b1580156125b857600080fd5b505af19250505080156125f657506040513d60408110156125d857600080fd5b81019080805190602001909291908051906020019092919050505060015b6126965761260261396c565b8061260d5750612652565b61264c6040518060400160405280600f81526020017f72656d6f76654c6971756964697479000000000000000000000000000000000081525082612a49565b50612691565b6126906040518060400160405280600f81526020017f72656d6f76654c69717569646974790000000000000000000000000000000000815250612f27565b5b61269f565b81955080945050505b6126a889613082565b6126b188613082565b50509550959350505050565b600060028383905010156127405761273f6040518060400160405280601581526020017f737761704578616374546f6b656e73466f7245544800000000000000000000008152506040518060400160405280600c81526020017f696e76616c696420706174680000000000000000000000000000000000000000815250612a49565b5b60008383600081811061274f57fe5b9050602002013573ffffffffffffffffffffffffffffffffffffffff1690506000737a250d5630b4cf539739df2c5dacb4c659f2488d90506127918288612cdc565b96506127b282737a250d5630b4cf539739df2c5dacb4c659f2488d89612e3f565b8073ffffffffffffffffffffffffffffffffffffffff166318cbafe58888888830600142016040518763ffffffff1660e01b815260040180878152602001868152602001806020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281038252868682818152602001925060200280828437600081840152601f19601f820116905080830192505050975050505050505050600060405180830381600087803b15801561286d57600080fd5b505af192505050801561293b57506040513d6000823e3d601f19601f8201168201806040525060208110156128a157600080fd5b81019080805160405193929190846401000000008211156128c157600080fd5b838201915060208201858111156128d757600080fd5b82518660208202830111640100000000821117156128f457600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561292b578082015181840152602081019050612910565b5050505090500160405250505060015b6129db5761294761396c565b806129525750612997565b6129916040518060400160405280601581526020017f737761704578616374546f6b656e73466f72455448000000000000000000000081525082612a49565b506129d6565b6129d56040518060400160405280601581526020017f737761704578616374546f6b656e73466f724554480000000000000000000000815250612f27565b5b6129f7565b806001825103815181106129eb57fe5b60200260200101519350505b5050949350505050565b60606040518060400160405280600a81526020017f48556e6973776170563200000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b612a59612a54613099565b6130d7565b612a61612a01565b83836040516020018085805190602001908083835b60208310612a995780518252602082019150602081019050602083039250612a76565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b60208310612b125780518252602082019150602081019050602083039250612aef565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310612b8b5780518252602082019150602081019050602083039250612b68565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b60208310612c045780518252602082019150602081019050602083039250612be1565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612ca1578082015181840152602081019050612c86565b50505050905090810190601f168015612cce5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214612d0d57819050612e39565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480612d87575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15612d9457479050612e39565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015612dfb57600080fd5b505afa158015612e0f573d6000803e3d6000fd5b505050506040513d6020811015612e2557600080fd5b810190808051906020019092919050505090505b92915050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b158015612eb057600080fd5b505af1925050508015612ec1575060015b612f2157612ef18260008573ffffffffffffffffffffffffffffffffffffffff1661321e9092919063ffffffff16565b612f1c82828573ffffffffffffffffffffffffffffffffffffffff1661321e9092919063ffffffff16565b612f22565b5b505050565b612f66816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250612a49565b50565b6000806000612f7885856133e3565b91509150858282604051602001808373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012060405160200180807fff000000000000000000000000000000000000000000000000000000000000008152506001018373ffffffffffffffffffffffffffffffffffffffff1660601b8152601401828152602001807f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f815250602001925050506040516020818303038152906040528051906020012060001c925050509392505050565b61309681600061355a90919063ffffffff16565b50565b60006130d27ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161359f90919063ffffffff16565b905090565b6060600082141561311f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613219565b6000808390505b6000811115613149578180600101925050600a818161314157fe5b049050613126565b5060608167ffffffffffffffff8111801561316357600080fd5b506040519080825280601f01601f1916602001820160405280156131965781602001600182028036833780820191505090505b50905060008290505b600081111561321257600a85816131b257fe5b0660300160f81b8260018303815181106131c857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161320157fe5b04945080806001900391505061319f565b5080925050505b919050565b60008114806132ec575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156132af57600080fd5b505afa1580156132c3573d6000803e3d6000fd5b505050506040513d60208110156132d957600080fd5b8101908080519060200190929190505050145b613341576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180613a986036913960400191505060405180910390fd5b6133de8363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506135bf565b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561346b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526025815260200180613a236025913960400191505060405180910390fd5b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106134a55782846134a8565b83835b8092508193505050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613553576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f556e697377617056324c6962726172793a205a45524f5f41444452455353000081525060200191505060405180910390fd5b9250929050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60008260008381526020019081526020016000205460001c905092915050565b6060613621826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166136ae9092919063ffffffff16565b90506000815111156136a95780806020019051602081101561364257600080fd5b81019080805190602001909291905050506136a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180613a6e602a913960400191505060405180910390fd5b5b505050565b60606136bd84846000856136c6565b90509392505050565b606082471015613721576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180613a486026913960400191505060405180910390fd5b61372a8561386f565b61379c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106137ec57805182526020820191506020810190506020830392506137c9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461384e576040519150601f19603f3d011682016040523d82523d6000602084013e613853565b606091505b5091509150613863828286613882565b92505050949350505050565b600080823b905060008111915050919050565b6060831561389257829050613947565b6000835111156138a55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561390c5780820151818401526020810190506138f1565b50505050905090810190601f1680156139395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d101561397c57613a1f565b60046000803e61398d60005161395f565b6308c379a0811461399e5750613a1f565b60405160043d036004823e80513d602482011167ffffffffffffffff821117156139ca57505050613a1f565b808201805167ffffffffffffffff8111156139e9575050505050613a1f565b8060208301013d8501811115613a0457505050505050613a1f565b613a0d8261394e565b60208401016040528296505050505050505b9056fe556e697377617056324c6962726172793a204944454e544943414c5f414444524553534553416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212200f7e22d7f4a5aef2b0f389c7cce45e9cccd8301a233fae98aca767dfbe1b453f64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/uniswapv2/HUniswapV2.sol:HUniswapV2",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/uniswapv2/HUniswapV2.sol:HUniswapV2",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}