{
  "address": "0xEDd163d3AB7EAd88Ce7FBF300D4aa6269f7ce68d",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ONEINCH_SPENDER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IOneInchCaller",
          "name": "caller",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "srcToken",
              "type": "address"
            },
            {
              "internalType": "contract IERC20",
              "name": "dstToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "srcReceiver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "dstReceiver",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "guaranteedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "flags",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "referrer",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "permit",
              "type": "bytes"
            }
          ],
          "internalType": "struct IOneInchExchangeV2.SwapDescription",
          "name": "desc",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "targetWithMandatory",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "internalType": "struct IOneInchCaller.CallDescription[]",
          "name": "calls",
          "type": "tuple[]"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a7da490585e2d8139955573a4a215a349864a05c808fa51e2e8b5cb5a4ffc3e",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0xEDd163d3AB7EAd88Ce7FBF300D4aa6269f7ce68d",
    "transactionIndex": 0,
    "gasUsed": "1706262",
    "logsBloom": "0x
    "blockHash": "0x15095f71b800de39c487b9c74f4fc674e6134e1c92f40094980f84df725afa9b",
    "transactionHash": "0x6a7da490585e2d8139955573a4a215a349864a05c808fa51e2e8b5cb5a4ffc3e",
    "logs": [],
    "blockNumber": 13356624,
    "cumulativeGasUsed": "1706262",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONEINCH_SPENDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IOneInchCaller\",\"name\":\"caller\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"srcToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"dstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"srcReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dstReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guaranteedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flags\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"permit\",\"type\":\"bytes\"}],\"internalType\":\"struct IOneInchExchangeV2.SwapDescription\",\"name\":\"desc\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"targetWithMandatory\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IOneInchCaller.CallDescription[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/oneinchV2/HOneInchExchange.sol\":\"HOneInchExchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/oneinchV2/HOneInchExchange.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"./IOneInchCaller.sol\\\";\\nimport \\\"./IOneInchExchangeV2.sol\\\";\\n\\ncontract HOneInchExchange is HandlerBase {\\n    using SafeERC20 for IERC20;\\n\\n    // prettier-ignore\\n    address public constant ONEINCH_SPENDER = 0x111111125434b319222CdBf8C261674aDB56F3ae;\\n    // prettier-ignore\\n    address public constant REFERRER = 0xBcb909975715DC8fDe643EE44b89e3FD6A35A259;\\n    // prettier-ignore\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HOneInchV2\\\";\\n    }\\n\\n    function swap(\\n        IOneInchCaller caller,\\n        IOneInchExchangeV2.SwapDescription memory desc,\\n        IOneInchCaller.CallDescription[] calldata calls\\n    ) external payable returns (uint256 returnAmount) {\\n        desc.referrer = REFERRER;\\n        if (address(desc.srcToken) != ETH_ADDRESS) {\\n            desc.srcToken.safeApprove(ONEINCH_SPENDER, desc.amount);\\n            try\\n                IOneInchExchangeV2(ONEINCH_SPENDER).swap(caller, desc, calls)\\n            returns (uint256 amount) {\\n                returnAmount = amount;\\n            } catch Error(string memory message) {\\n                _revertMsg(\\\"swap\\\", message);\\n            } catch {\\n                _revertMsg(\\\"swap\\\");\\n            }\\n            desc.srcToken.safeApprove(ONEINCH_SPENDER, 0);\\n        } else {\\n            try\\n                IOneInchExchangeV2(ONEINCH_SPENDER).swap{value: desc.amount}(\\n                    caller,\\n                    desc,\\n                    calls\\n                )\\n            returns (uint256 amount) {\\n                returnAmount = amount;\\n            } catch Error(string memory message) {\\n                _revertMsg(\\\"swap\\\", message);\\n            } catch {\\n                _revertMsg(\\\"swap\\\");\\n            }\\n        }\\n\\n        // Update involved token\\n        if (address(desc.dstToken) != ETH_ADDRESS)\\n            _updateToken(address(desc.dstToken));\\n    }\\n}\\n\",\"keccak256\":\"0x2e56c35b5606095762f532d48f2aab1a3a21065ebc8e4c421baef9cac45b630f\"},\"contracts/handlers/oneinchV2/IChi.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface IChi is IERC20 {\\n    function mint(uint256 value) external;\\n    function free(uint256 value) external returns (uint256 freed);\\n    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\\n}\\n\",\"keccak256\":\"0xf765f28875b7c34ee70f7a675efa0e996efaa2ef3eb75164abd84f56433802b8\",\"license\":\"MIT\"},\"contracts/handlers/oneinchV2/IGasDiscountExtension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"./IChi.sol\\\";\\n\\ninterface IGasDiscountExtension {\\n    function calculateGas(uint256 gasUsed, uint256 flags, uint256 calldataLength) external pure returns (IChi, uint256);\\n}\\n\",\"keccak256\":\"0x8569ecf59fdb3909901b65ec32b00b323661b2d521cd86af26de2cfcef3d6a42\",\"license\":\"MIT\"},\"contracts/handlers/oneinchV2/IOneInchCaller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IGasDiscountExtension.sol\\\";\\nimport \\\"./ISafeERC20Extension.sol\\\";\\n\\n\\ninterface IOneInchCaller is ISafeERC20Extension, IGasDiscountExtension {\\n    struct CallDescription {\\n        uint256 targetWithMandatory;\\n        uint256 gasLimit;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    function makeCall(CallDescription memory desc) external;\\n    function makeCalls(CallDescription[] memory desc) external payable;\\n}\\n\",\"keccak256\":\"0xd873c5afba6c40b1c532f4009d07a720a5a1ca973c612becccf7766a398c83a3\",\"license\":\"MIT\"},\"contracts/handlers/oneinchV2/IOneInchExchangeV2.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOneInchCaller.sol\\\";\\n\\ninterface IOneInchExchangeV2 {\\n    struct SwapDescription {\\n        IERC20 srcToken;\\n        IERC20 dstToken;\\n        address srcReceiver;\\n        address dstReceiver;\\n        uint256 amount;\\n        uint256 minReturnAmount;\\n        uint256 guaranteedAmount;\\n        uint256 flags;\\n        address referrer;\\n        bytes permit;\\n    }\\n\\n    function discountedSwap(\\n        IOneInchCaller caller,\\n        SwapDescription calldata desc,\\n        IOneInchCaller.CallDescription[] calldata calls\\n    )\\n    external\\n    payable\\n    returns (uint256 returnAmount);\\n\\n    function swap(\\n        IOneInchCaller caller,\\n        SwapDescription calldata desc,\\n        IOneInchCaller.CallDescription[] calldata calls\\n    )\\n        external\\n        payable\\n        returns (uint256 returnAmount);\\n}\\n\",\"keccak256\":\"0xa9cf796f8221fcf92d626fc57cc0207a62a0b5d9a2e83c4f5b2ec75b1a7cd2dd\"},\"contracts/handlers/oneinchV2/ISafeERC20Extension.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.6.12;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n\\ninterface ISafeERC20Extension {\\n    function safeApprove(IERC20 token, address spender, uint256 amount) external;\\n    function safeTransfer(IERC20 token, address payable target, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x467b0f80960b48d48e94e569e5eef3e765636b4efd83e6ef161e2f74996cc2ed\",\"license\":\"MIT\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611e07806100206000396000f3fe6080604052600436106100a75760003560e01c8063a734f06e11610064578063a734f06e146101c5578063c0560374146101f0578063c27229161461021b578063dc9031c414610225578063f5f5ba7214610262578063fa2901a51461028d576100a7565b80630f532d18146100ac5780631413dc7d146100d757806387c139431461010257806390411a321461012d578063975662021461015d57806399eb59b914610188575b600080fd5b3480156100b857600080fd5b506100c16102b8565b6040516100ce919061188c565b60405180910390f35b3480156100e357600080fd5b506100ec6102df565b6040516100f9919061188c565b60405180910390f35b34801561010e57600080fd5b50610117610306565b60405161012491906119cb565b60405180910390f35b61014760048036038101906101429190611141565b610312565b60405161015491906119cb565b60405180910390f35b34801561016957600080fd5b50610172610729565b60405161017f919061181f565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa9190611118565b610741565b6040516101bc919061188c565b60405180910390f35b3480156101d157600080fd5b506101da610759565b6040516101e7919061181f565b60405180910390f35b3480156101fc57600080fd5b50610205610771565b604051610212919061181f565b60405180910390f35b610223610789565b005b34801561023157600080fd5b5061024c600480360381019061024791906111c5565b6107c4565b604051610259919061188c565b60405180910390f35b34801561026e57600080fd5b506102776107e5565b6040516102849190611909565b60405180910390f35b34801561029957600080fd5b506102a2610822565b6040516102af91906118a7565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b670de0b6b3a764000081565b600073bcb909975715dc8fde643ee44b89e3fd6a35a25984610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff161461057f576103f373111111125434b319222cdbf8c261674adb56f3ae8560800151866000015173ffffffffffffffffffffffffffffffffffffffff1661082d9092919063ffffffff16565b73111111125434b319222cdbf8c261674adb56f3ae73ffffffffffffffffffffffffffffffffffffffff166390411a32868686866040518563ffffffff1660e01b815260040161044694939291906118c2565b602060405180830381600087803b15801561046057600080fd5b505af192505050801561049157506040513d601f19601f8201168201806040525081019061048e91906111ee565b60015b6105315761049d611c91565b806104a857506104ed565b6104e76040518060400160405280600481526020017f73776170000000000000000000000000000000000000000000000000000000008152508261098b565b5061052c565b61052b6040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250610a03565b5b610536565b809150505b61057a73111111125434b319222cdbf8c261674adb56f3ae6000866000015173ffffffffffffffffffffffffffffffffffffffff1661082d9092919063ffffffff16565b6106c8565b73111111125434b319222cdbf8c261674adb56f3ae73ffffffffffffffffffffffffffffffffffffffff166390411a328560800151878787876040518663ffffffff1660e01b81526004016105d794939291906118c2565b6020604051808303818588803b1580156105f057600080fd5b505af19350505050801561062257506040513d601f19601f8201168201806040525081019061061f91906111ee565b60015b6106c25761062e611c91565b80610639575061067e565b6106786040518060400160405280600481526020017f73776170000000000000000000000000000000000000000000000000000000008152508261098b565b506106bd565b6106bc6040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250610a03565b5b6106c7565b809150505b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1614610721576107208460200151610a45565b5b949350505050565b73111111125434b319222cdbf8c261674adb56f3ae81565b60016020528060005260406000206000915090505481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b73bcb909975715dc8fde643ee44b89e3fd6a35a25981565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb9061194b565b60405180910390fd5b600081815481106107d157fe5b906000526020600020016000915090505481565b60606040518060400160405280600a81526020017f484f6e65496e6368563200000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b60008114806108c6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161087492919061183a565b60206040518083038186803b15801561088c57600080fd5b505afa1580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c491906111ee565b145b610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc906119ab565b60405180910390fd5b6109868363095ea7b360e01b8484604051602401610924929190611863565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a5c565b505050565b61099b610996610b23565b610b61565b6109a36107e5565b83836040516020016109b894939291906117c0565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa9190611909565b60405180910390fd5b610a42816040518060400160405280600b81526020017f556e73706563696669656400000000000000000000000000000000000000000081525061098b565b50565b610a59816000610ca890919063ffffffff16565b50565b6060610abe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ced9092919063ffffffff16565b9050600081511115610b1e5780806020019051810190610ade91906110ef565b610b1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b149061198b565b60405180910390fd5b5b505050565b6000610b5c7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b6001610d0590919063ffffffff16565b905090565b60606000821415610ba9576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ca3565b6000808390505b6000811115610bd3578180600101925050600a8181610bcb57fe5b049050610bb0565b5060608167ffffffffffffffff81118015610bed57600080fd5b506040519080825280601f01601f191660200182016040528015610c205781602001600182028036833780820191505090505b50905060008290505b6000811115610c9c57600a8581610c3c57fe5b0660300160f81b826001830381518110610c5257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581610c8b57fe5b049450808060019003915050610c29565b5080925050505b919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b6060610cfc8484600085610d25565b90509392505050565b60008260008381526020019081526020016000205460001c905092915050565b606082471015610d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d619061192b565b60405180910390fd5b610d7385610e3a565b610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da99061196b565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610ddc91906117a9565b60006040518083038185875af1925050503d8060008114610e19576040519150601f19603f3d011682016040523d82523d6000602084013e610e1e565b606091505b5091509150610e2e828286610e4d565b92505050949350505050565b600080823b905060008111915050919050565b60608315610e5d57829050610ead565b600083511115610e705782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea49190611909565b60405180910390fd5b9392505050565b600081359050610ec381611d47565b92915050565b60008083601f840112610edb57600080fd5b8235905067ffffffffffffffff811115610ef457600080fd5b602083019150836020820283011115610f0c57600080fd5b9250929050565b600081519050610f2281611d5e565b92915050565b600081359050610f3781611d75565b92915050565b600082601f830112610f4e57600080fd5b8135610f61610f5c82611a13565b6119e6565b91508082526020830160208301858383011115610f7d57600080fd5b610f88838284611c31565b50505092915050565b600081359050610fa081611d8c565b92915050565b600081359050610fb581611da3565b92915050565b60006101408284031215610fce57600080fd5b610fd96101406119e6565b90506000610fe984828501610f91565b6000830152506020610ffd84828501610f91565b602083015250604061101184828501610eb4565b604083015250606061102584828501610eb4565b6060830152506080611039848285016110c5565b60808301525060a061104d848285016110c5565b60a08301525060c0611061848285016110c5565b60c08301525060e0611075848285016110c5565b60e08301525061010061108a84828501610eb4565b6101008301525061012082013567ffffffffffffffff8111156110ac57600080fd5b6110b884828501610f3d565b6101208301525092915050565b6000813590506110d481611dba565b92915050565b6000815190506110e981611dba565b92915050565b60006020828403121561110157600080fd5b600061110f84828501610f13565b91505092915050565b60006020828403121561112a57600080fd5b600061113884828501610f28565b91505092915050565b6000806000806060858703121561115757600080fd5b600061116587828801610fa6565b945050602085013567ffffffffffffffff81111561118257600080fd5b61118e87828801610fbb565b935050604085013567ffffffffffffffff8111156111ab57600080fd5b6111b787828801610ec9565b925092505092959194509250565b6000602082840312156111d757600080fd5b60006111e5848285016110c5565b91505092915050565b60006020828403121561120057600080fd5b600061120e848285016110da565b91505092915050565b6000611223838361162c565b905092915050565b61123481611b47565b82525050565b61124381611b47565b82525050565b60006112558385611a6c565b93508360208402850161126784611a3f565b8060005b878110156112ab5784840389526112828284611b0c565b61128c8582611217565b945061129783611a5f565b925060208a0199505060018101905061126b565b50829750879450505050509392505050565b6112c681611b65565b82525050565b6112d581611b6f565b82525050565b60006112e78385611a7d565b93506112f4838584611c31565b6112fd83611c73565b840190509392505050565b600061131382611a49565b61131d8185611a7d565b935061132d818560208601611c40565b61133681611c73565b840191505092915050565b600061134c82611a49565b6113568185611a8e565b9350611366818560208601611c40565b80840191505092915050565b61137b81611be9565b82525050565b61138a81611c0d565b82525050565b600061139b82611a54565b6113a58185611a99565b93506113b5818560208601611c40565b6113be81611c73565b840191505092915050565b60006113d482611a54565b6113de8185611aaa565b93506113ee818560208601611c40565b80840191505092915050565b6000611407602683611a99565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061146d601483611a99565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b60006114ad601d83611a99565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006114ed600183611aaa565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b600061152d602a83611a99565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611593600283611aaa565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006115d3603683611a99565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b60006080830161163f6000840184611b30565b61164c600086018261178b565b5061165a6020840184611b30565b611667602086018261178b565b506116756040840184611b30565b611682604086018261178b565b506116906060840184611ab5565b85830360608701526116a38382846112db565b925050508091505092915050565b6000610140830160008301516116ca6000860182611372565b5060208301516116dd6020860182611372565b5060408301516116f0604086018261122b565b506060830151611703606086018261122b565b506080830151611716608086018261178b565b5060a083015161172960a086018261178b565b5060c083015161173c60c086018261178b565b5060e083015161174f60e086018261178b565b5061010083015161176461010086018261122b565b5061012083015184820361012086015261177e8282611308565b9150508091505092915050565b61179481611bdf565b82525050565b6117a381611bdf565b82525050565b60006117b58284611341565b915081905092915050565b60006117cc82876113c9565b91506117d7826114e0565b91506117e382866113c9565b91506117ee826114e0565b91506117fa82856113c9565b915061180582611586565b915061181182846113c9565b915081905095945050505050565b6000602082019050611834600083018461123a565b92915050565b600060408201905061184f600083018561123a565b61185c602083018461123a565b9392505050565b6000604082019050611878600083018561123a565b611885602083018461179a565b9392505050565b60006020820190506118a160008301846112bd565b92915050565b60006020820190506118bc60008301846112cc565b92915050565b60006060820190506118d76000830187611381565b81810360208301526118e981866116b1565b905081810360408301526118fe818486611249565b905095945050505050565b600060208201905081810360008301526119238184611390565b905092915050565b60006020820190508181036000830152611944816113fa565b9050919050565b6000602082019050818103600083015261196481611460565b9050919050565b60006020820190508181036000830152611984816114a0565b9050919050565b600060208201905081810360008301526119a481611520565b9050919050565b600060208201905081810360008301526119c4816115c6565b9050919050565b60006020820190506119e0600083018461179a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611a0957600080fd5b8060405250919050565b600067ffffffffffffffff821115611a2a57600080fd5b601f19601f8301169050602081019050919050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60008083356001602003843603038112611ace57600080fd5b83810192508235915060208301925067ffffffffffffffff821115611af257600080fd5b600182023603841315611b0457600080fd5b509250929050565b600082356001608003833603038112611b2457600080fd5b82810191505092915050565b6000611b3f60208401846110c5565b905092915050565b6000611b5282611bbf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000611ba682611b47565b9050919050565b6000611bb882611b47565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611bf482611bfb565b9050919050565b6000611c0682611bbf565b9050919050565b6000611c1882611c1f565b9050919050565b6000611c2a82611bbf565b9050919050565b82818337600083830152505050565b60005b83811015611c5e578082015181840152602081019050611c43565b83811115611c6d576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015611ca157611d44565b60046000803e611cb2600051611c84565b6308c379a08114611cc35750611d44565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715611cef57505050611d44565b808201805167ffffffffffffffff811115611d0e575050505050611d44565b8060208301013d8501811115611d2957505050505050611d44565b611d3282611c73565b60208401016040528296505050505050505b90565b611d5081611b47565b8114611d5b57600080fd5b50565b611d6781611b59565b8114611d7257600080fd5b50565b611d7e81611b65565b8114611d8957600080fd5b50565b611d9581611b9b565b8114611da057600080fd5b50565b611dac81611bad565b8114611db757600080fd5b50565b611dc381611bdf565b8114611dce57600080fd5b5056fea2646970667358221220c032c004789ec56ed007eda9d88e593ee279fea50ef7645fe94a74a54c70fb6064736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c8063a734f06e11610064578063a734f06e146101c5578063c0560374146101f0578063c27229161461021b578063dc9031c414610225578063f5f5ba7214610262578063fa2901a51461028d576100a7565b80630f532d18146100ac5780631413dc7d146100d757806387c139431461010257806390411a321461012d578063975662021461015d57806399eb59b914610188575b600080fd5b3480156100b857600080fd5b506100c16102b8565b6040516100ce919061188c565b60405180910390f35b3480156100e357600080fd5b506100ec6102df565b6040516100f9919061188c565b60405180910390f35b34801561010e57600080fd5b50610117610306565b60405161012491906119cb565b60405180910390f35b61014760048036038101906101429190611141565b610312565b60405161015491906119cb565b60405180910390f35b34801561016957600080fd5b50610172610729565b60405161017f919061181f565b60405180910390f35b34801561019457600080fd5b506101af60048036038101906101aa9190611118565b610741565b6040516101bc919061188c565b60405180910390f35b3480156101d157600080fd5b506101da610759565b6040516101e7919061181f565b60405180910390f35b3480156101fc57600080fd5b50610205610771565b604051610212919061181f565b60405180910390f35b610223610789565b005b34801561023157600080fd5b5061024c600480360381019061024791906111c5565b6107c4565b604051610259919061188c565b60405180910390f35b34801561026e57600080fd5b506102776107e5565b6040516102849190611909565b60405180910390f35b34801561029957600080fd5b506102a2610822565b6040516102af91906118a7565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b670de0b6b3a764000081565b600073bcb909975715dc8fde643ee44b89e3fd6a35a25984610100019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16846000015173ffffffffffffffffffffffffffffffffffffffff161461057f576103f373111111125434b319222cdbf8c261674adb56f3ae8560800151866000015173ffffffffffffffffffffffffffffffffffffffff1661082d9092919063ffffffff16565b73111111125434b319222cdbf8c261674adb56f3ae73ffffffffffffffffffffffffffffffffffffffff166390411a32868686866040518563ffffffff1660e01b815260040161044694939291906118c2565b602060405180830381600087803b15801561046057600080fd5b505af192505050801561049157506040513d601f19601f8201168201806040525081019061048e91906111ee565b60015b6105315761049d611c91565b806104a857506104ed565b6104e76040518060400160405280600481526020017f73776170000000000000000000000000000000000000000000000000000000008152508261098b565b5061052c565b61052b6040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250610a03565b5b610536565b809150505b61057a73111111125434b319222cdbf8c261674adb56f3ae6000866000015173ffffffffffffffffffffffffffffffffffffffff1661082d9092919063ffffffff16565b6106c8565b73111111125434b319222cdbf8c261674adb56f3ae73ffffffffffffffffffffffffffffffffffffffff166390411a328560800151878787876040518663ffffffff1660e01b81526004016105d794939291906118c2565b6020604051808303818588803b1580156105f057600080fd5b505af19350505050801561062257506040513d601f19601f8201168201806040525081019061061f91906111ee565b60015b6106c25761062e611c91565b80610639575061067e565b6106786040518060400160405280600481526020017f73776170000000000000000000000000000000000000000000000000000000008152508261098b565b506106bd565b6106bc6040518060400160405280600481526020017f7377617000000000000000000000000000000000000000000000000000000000815250610a03565b5b6106c7565b809150505b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16846020015173ffffffffffffffffffffffffffffffffffffffff1614610721576107208460200151610a45565b5b949350505050565b73111111125434b319222cdbf8c261674adb56f3ae81565b60016020528060005260406000206000915090505481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b73bcb909975715dc8fde643ee44b89e3fd6a35a25981565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bb9061194b565b60405180910390fd5b600081815481106107d157fe5b906000526020600020016000915090505481565b60606040518060400160405280600a81526020017f484f6e65496e6368563200000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b60008114806108c6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161087492919061183a565b60206040518083038186803b15801561088c57600080fd5b505afa1580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c491906111ee565b145b610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc906119ab565b60405180910390fd5b6109868363095ea7b360e01b8484604051602401610924929190611863565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610a5c565b505050565b61099b610996610b23565b610b61565b6109a36107e5565b83836040516020016109b894939291906117c0565b6040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fa9190611909565b60405180910390fd5b610a42816040518060400160405280600b81526020017f556e73706563696669656400000000000000000000000000000000000000000081525061098b565b50565b610a59816000610ca890919063ffffffff16565b50565b6060610abe826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610ced9092919063ffffffff16565b9050600081511115610b1e5780806020019051810190610ade91906110ef565b610b1d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b149061198b565b60405180910390fd5b5b505050565b6000610b5c7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b6001610d0590919063ffffffff16565b905090565b60606000821415610ba9576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050610ca3565b6000808390505b6000811115610bd3578180600101925050600a8181610bcb57fe5b049050610bb0565b5060608167ffffffffffffffff81118015610bed57600080fd5b506040519080825280601f01601f191660200182016040528015610c205781602001600182028036833780820191505090505b50905060008290505b6000811115610c9c57600a8581610c3c57fe5b0660300160f81b826001830381518110610c5257fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581610c8b57fe5b049450808060019003915050610c29565b5080925050505b919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b6060610cfc8484600085610d25565b90509392505050565b60008260008381526020019081526020016000205460001c905092915050565b606082471015610d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d619061192b565b60405180910390fd5b610d7385610e3a565b610db2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da99061196b565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610ddc91906117a9565b60006040518083038185875af1925050503d8060008114610e19576040519150601f19603f3d011682016040523d82523d6000602084013e610e1e565b606091505b5091509150610e2e828286610e4d565b92505050949350505050565b600080823b905060008111915050919050565b60608315610e5d57829050610ead565b600083511115610e705782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ea49190611909565b60405180910390fd5b9392505050565b600081359050610ec381611d47565b92915050565b60008083601f840112610edb57600080fd5b8235905067ffffffffffffffff811115610ef457600080fd5b602083019150836020820283011115610f0c57600080fd5b9250929050565b600081519050610f2281611d5e565b92915050565b600081359050610f3781611d75565b92915050565b600082601f830112610f4e57600080fd5b8135610f61610f5c82611a13565b6119e6565b91508082526020830160208301858383011115610f7d57600080fd5b610f88838284611c31565b50505092915050565b600081359050610fa081611d8c565b92915050565b600081359050610fb581611da3565b92915050565b60006101408284031215610fce57600080fd5b610fd96101406119e6565b90506000610fe984828501610f91565b6000830152506020610ffd84828501610f91565b602083015250604061101184828501610eb4565b604083015250606061102584828501610eb4565b6060830152506080611039848285016110c5565b60808301525060a061104d848285016110c5565b60a08301525060c0611061848285016110c5565b60c08301525060e0611075848285016110c5565b60e08301525061010061108a84828501610eb4565b6101008301525061012082013567ffffffffffffffff8111156110ac57600080fd5b6110b884828501610f3d565b6101208301525092915050565b6000813590506110d481611dba565b92915050565b6000815190506110e981611dba565b92915050565b60006020828403121561110157600080fd5b600061110f84828501610f13565b91505092915050565b60006020828403121561112a57600080fd5b600061113884828501610f28565b91505092915050565b6000806000806060858703121561115757600080fd5b600061116587828801610fa6565b945050602085013567ffffffffffffffff81111561118257600080fd5b61118e87828801610fbb565b935050604085013567ffffffffffffffff8111156111ab57600080fd5b6111b787828801610ec9565b925092505092959194509250565b6000602082840312156111d757600080fd5b60006111e5848285016110c5565b91505092915050565b60006020828403121561120057600080fd5b600061120e848285016110da565b91505092915050565b6000611223838361162c565b905092915050565b61123481611b47565b82525050565b61124381611b47565b82525050565b60006112558385611a6c565b93508360208402850161126784611a3f565b8060005b878110156112ab5784840389526112828284611b0c565b61128c8582611217565b945061129783611a5f565b925060208a0199505060018101905061126b565b50829750879450505050509392505050565b6112c681611b65565b82525050565b6112d581611b6f565b82525050565b60006112e78385611a7d565b93506112f4838584611c31565b6112fd83611c73565b840190509392505050565b600061131382611a49565b61131d8185611a7d565b935061132d818560208601611c40565b61133681611c73565b840191505092915050565b600061134c82611a49565b6113568185611a8e565b9350611366818560208601611c40565b80840191505092915050565b61137b81611be9565b82525050565b61138a81611c0d565b82525050565b600061139b82611a54565b6113a58185611a99565b93506113b5818560208601611c40565b6113be81611c73565b840191505092915050565b60006113d482611a54565b6113de8185611aaa565b93506113ee818560208601611c40565b80840191505092915050565b6000611407602683611a99565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061146d601483611a99565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b60006114ad601d83611a99565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006114ed600183611aaa565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b600061152d602a83611a99565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611593600283611aaa565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006115d3603683611a99565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b60006080830161163f6000840184611b30565b61164c600086018261178b565b5061165a6020840184611b30565b611667602086018261178b565b506116756040840184611b30565b611682604086018261178b565b506116906060840184611ab5565b85830360608701526116a38382846112db565b925050508091505092915050565b6000610140830160008301516116ca6000860182611372565b5060208301516116dd6020860182611372565b5060408301516116f0604086018261122b565b506060830151611703606086018261122b565b506080830151611716608086018261178b565b5060a083015161172960a086018261178b565b5060c083015161173c60c086018261178b565b5060e083015161174f60e086018261178b565b5061010083015161176461010086018261122b565b5061012083015184820361012086015261177e8282611308565b9150508091505092915050565b61179481611bdf565b82525050565b6117a381611bdf565b82525050565b60006117b58284611341565b915081905092915050565b60006117cc82876113c9565b91506117d7826114e0565b91506117e382866113c9565b91506117ee826114e0565b91506117fa82856113c9565b915061180582611586565b915061181182846113c9565b915081905095945050505050565b6000602082019050611834600083018461123a565b92915050565b600060408201905061184f600083018561123a565b61185c602083018461123a565b9392505050565b6000604082019050611878600083018561123a565b611885602083018461179a565b9392505050565b60006020820190506118a160008301846112bd565b92915050565b60006020820190506118bc60008301846112cc565b92915050565b60006060820190506118d76000830187611381565b81810360208301526118e981866116b1565b905081810360408301526118fe818486611249565b905095945050505050565b600060208201905081810360008301526119238184611390565b905092915050565b60006020820190508181036000830152611944816113fa565b9050919050565b6000602082019050818103600083015261196481611460565b9050919050565b60006020820190508181036000830152611984816114a0565b9050919050565b600060208201905081810360008301526119a481611520565b9050919050565b600060208201905081810360008301526119c4816115c6565b9050919050565b60006020820190506119e0600083018461179a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611a0957600080fd5b8060405250919050565b600067ffffffffffffffff821115611a2a57600080fd5b601f19601f8301169050602081019050919050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60008083356001602003843603038112611ace57600080fd5b83810192508235915060208301925067ffffffffffffffff821115611af257600080fd5b600182023603841315611b0457600080fd5b509250929050565b600082356001608003833603038112611b2457600080fd5b82810191505092915050565b6000611b3f60208401846110c5565b905092915050565b6000611b5282611bbf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000611ba682611b47565b9050919050565b6000611bb882611b47565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000611bf482611bfb565b9050919050565b6000611c0682611bbf565b9050919050565b6000611c1882611c1f565b9050919050565b6000611c2a82611bbf565b9050919050565b82818337600083830152505050565b60005b83811015611c5e578082015181840152602081019050611c43565b83811115611c6d576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015611ca157611d44565b60046000803e611cb2600051611c84565b6308c379a08114611cc35750611d44565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715611cef57505050611d44565b808201805167ffffffffffffffff811115611d0e575050505050611d44565b8060208301013d8501811115611d2957505050505050611d44565b611d3282611c73565b60208401016040528296505050505050505b90565b611d5081611b47565b8114611d5b57600080fd5b50565b611d6781611b59565b8114611d7257600080fd5b50565b611d7e81611b65565b8114611d8957600080fd5b50565b611d9581611b9b565b8114611da057600080fd5b50565b611dac81611bad565b8114611db757600080fd5b50565b611dc381611bdf565b8114611dce57600080fd5b5056fea2646970667358221220c032c004789ec56ed007eda9d88e593ee279fea50ef7645fe94a74a54c70fb6064736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/oneinchV2/HOneInchExchange.sol:HOneInchExchange",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/oneinchV2/HOneInchExchange.sol:HOneInchExchange",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}