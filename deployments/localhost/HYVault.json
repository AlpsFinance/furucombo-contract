{
  "address": "0x17d9e7934955F465b619D00E2808957EBd68871c",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "depositETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_shares",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c583c4129e11ab5e20de84c7a35987f6107722b8504977278ec93ce84b32dbb",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x17d9e7934955F465b619D00E2808957EBd68871c",
    "transactionIndex": 0,
    "gasUsed": "1697524",
    "logsBloom": "0x
    "blockHash": "0x4e870ebe345f08f51f4fa2a019f697b58b1b1748038f157fc9626907c2e00c83",
    "transactionHash": "0x6c583c4129e11ab5e20de84c7a35987f6107722b8504977278ec93ce84b32dbb",
    "logs": [],
    "blockNumber": 13356611,
    "cumulativeGasUsed": "1697524",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"depositETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/yearn/HYVault.sol\":\"HYVault\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/yearn/HYVault.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"./IYVault.sol\\\";\\n\\ncontract HYVault is HandlerBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HYVault\\\";\\n    }\\n\\n    function deposit(address vault, uint256 _amount)\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        IYVault yVault = IYVault(vault);\\n        uint256 beforeYTokenBalance =\\n            IERC20(address(yVault)).balanceOf(address(this));\\n\\n        address token = yVault.token();\\n        // if amount == uint256(-1) return balance of Proxy\\n        _amount = _getBalance(token, _amount);\\n        IERC20(token).safeApprove(address(yVault), _amount);\\n        try yVault.deposit(_amount) {} catch Error(string memory reason) {\\n            _revertMsg(\\\"deposit\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"deposit\\\");\\n        }\\n        IERC20(token).safeApprove(address(yVault), 0);\\n\\n        uint256 afterYTokenBalance =\\n            IERC20(address(yVault)).balanceOf(address(this));\\n\\n        _updateToken(address(yVault));\\n        return afterYTokenBalance.sub(beforeYTokenBalance);\\n    }\\n\\n    function depositETH(uint256 value, address vault)\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        IYVault yVault = IYVault(vault);\\n        uint256 beforeYTokenBalance =\\n            IERC20(address(yVault)).balanceOf(address(this));\\n        // if amount == uint256(-1) return balance of Proxy\\n        value = _getBalance(address(0), value);\\n        try yVault.depositETH{value: value}() {} catch Error(\\n            string memory reason\\n        ) {\\n            _revertMsg(\\\"depositETH\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"depositETH\\\");\\n        }\\n        uint256 afterYTokenBalance =\\n            IERC20(address(yVault)).balanceOf(address(this));\\n\\n        _updateToken(address(yVault));\\n        return afterYTokenBalance.sub(beforeYTokenBalance);\\n    }\\n\\n    function withdraw(address vault, uint256 _shares)\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        IYVault yVault = IYVault(vault);\\n        address token = yVault.token();\\n        uint256 beforeTokenBalance = IERC20(token).balanceOf(address(this));\\n        // if amount == uint256(-1) return balance of Proxy\\n        _shares = _getBalance(vault, _shares);\\n\\n        try yVault.withdraw(_shares) {} catch Error(string memory reason) {\\n            _revertMsg(\\\"withdraw\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"withdraw\\\");\\n        }\\n        uint256 afterTokenBalance = IERC20(token).balanceOf(address(this));\\n\\n        _updateToken(token);\\n        return afterTokenBalance.sub(beforeTokenBalance);\\n    }\\n\\n    function withdrawETH(address vault, uint256 _shares)\\n        external\\n        payable\\n        returns (uint256)\\n    {\\n        uint256 beforeETHBalance = address(this).balance;\\n        IYVault yVault = IYVault(vault);\\n        // if amount == uint256(-1) return balance of Proxy\\n        _shares = _getBalance(vault, _shares);\\n        try yVault.withdrawETH(_shares) {} catch Error(string memory reason) {\\n            _revertMsg(\\\"withdrawETH\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"withdrawETH\\\");\\n        }\\n        uint256 afterETHBalance = address(this).balance;\\n        return afterETHBalance.sub(beforeETHBalance);\\n    }\\n}\\n\",\"keccak256\":\"0xe4a2b12346288c16afab70028a78bd3409b0d46edbdc01302df89bcff53395ab\"},\"contracts/handlers/yearn/IYVault.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IYVault {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount)\\n        external\\n        returns (bool);\\n\\n    function token() external view returns (address);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function depositETH() external payable;\\n\\n    function withdraw(uint256 _shares) external;\\n\\n    function withdrawETH(uint256 _shares) external;\\n}\\n\",\"keccak256\":\"0x52a8532ad0722306c46ecd5e0a8190561aa43016a389dcb3f0f8f52d1e1fc034\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611dde806100206000396000f3fe6080604052600436106100a75760003560e01c806399eb59b91161006457806399eb59b914610253578063c2722916146102a2578063dc9031c4146102ac578063f3fef3a3146102fb578063f5f5ba721461035d578063fa2901a5146103ed576100a7565b80630f532d18146100ac5780631413dc7d146100d75780634782f7791461010257806347e7ef241461016457806356150edf146101c657806387c1394314610228575b600080fd5b3480156100b857600080fd5b506100c1610437565b6040518082815260200191505060405180910390f35b3480156100e357600080fd5b506100ec61045e565b6040518082815260200191505060405180910390f35b61014e6004803603604081101561011857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610485565b6040518082815260200191505060405180910390f35b6101b06004803603604081101561017a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105c4565b6040518082815260200191505060405180910390f35b610212600480360360408110156101dc57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061092b565b6040518082815260200191505060405180910390f35b34801561023457600080fd5b5061023d610bac565b6040518082815260200191505060405180910390f35b34801561025f57600080fd5b5061028c6004803603602081101561027657600080fd5b8101908080359060200190929190505050610bb8565b6040518082815260200191505060405180910390f35b6102aa610bd0565b005b3480156102b857600080fd5b506102e5600480360360208110156102cf57600080fd5b8101908080359060200190929190505050610c3e565b6040518082815260200191505060405180910390f35b6103476004803603604081101561031157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c5f565b6040518082815260200191505060405180910390f35b34801561036957600080fd5b50610372610f6f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b2578082015181840152602081019050610397565b50505050905090810190601f1680156103df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103f957600080fd5b50610402610fac565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b600080479050600084905061049a8585610fb7565b93508073ffffffffffffffffffffffffffffffffffffffff1663f14210a6856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156104ef57600080fd5b505af1925050508015610500575060015b6105a05761050c611c6c565b80610517575061055c565b6105566040518060400160405280600b81526020017f77697468647261774554480000000000000000000000000000000000000000008152508261111a565b5061059b565b61059a6040518060400160405280600b81526020017f77697468647261774554480000000000000000000000000000000000000000008152506113ad565b5b6105a1565b5b60004790506105b983826113ef90919063ffffffff16565b935050505092915050565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561063357600080fd5b505afa158015610647573d6000803e3d6000fd5b505050506040513d602081101561065d57600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b857600080fd5b505afa1580156106cc573d6000803e3d6000fd5b505050506040513d60208110156106e257600080fd5b810190808051906020019092919050505090506106ff8186610fb7565b945061072c83868373ffffffffffffffffffffffffffffffffffffffff166114399092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff1663b6b55f25866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561077f57600080fd5b505af1925050508015610790575060015b6108305761079c611c6c565b806107a757506107ec565b6107e66040518060400160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152508261111a565b5061082b565b61082a6040518060400160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152506113ad565b5b610831565b5b61085d8360008373ffffffffffffffffffffffffffffffffffffffff166114399092919063ffffffff16565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d60208110156108f057600080fd5b8101908080519060200190929190505050905061090c846115fe565b61091f83826113ef90919063ffffffff16565b94505050505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d60208110156109c457600080fd5b810190808051906020019092919050505090506109e2600086610fb7565b94508173ffffffffffffffffffffffffffffffffffffffff1663f6326fb3866040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a2c57600080fd5b505af193505050508015610a3e575060015b610ade57610a4a611c6c565b80610a555750610a9a565b610a946040518060400160405280600a81526020017f6465706f736974455448000000000000000000000000000000000000000000008152508261111a565b50610ad9565b610ad86040518060400160405280600a81526020017f6465706f736974455448000000000000000000000000000000000000000000008152506113ad565b5b610adf565b5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b4857600080fd5b505afa158015610b5c573d6000803e3d6000fd5b505050506040513d6020811015610b7257600080fd5b81019080805190602001909291905050509050610b8e836115fe565b610ba182826113ef90919063ffffffff16565b935050505092915050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b60008181548110610c4b57fe5b906000526020600020016000915090505481565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cad57600080fd5b505afa158015610cc1573d6000803e3d6000fd5b505050506040513d6020811015610cd757600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d5357600080fd5b505afa158015610d67573d6000803e3d6000fd5b505050506040513d6020811015610d7d57600080fd5b81019080805190602001909291905050509050610d9a8686610fb7565b94508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610def57600080fd5b505af1925050508015610e00575060015b610ea057610e0c611c6c565b80610e175750610e5c565b610e566040518060400160405280600881526020017f77697468647261770000000000000000000000000000000000000000000000008152508261111a565b50610e9b565b610e9a6040518060400160405280600881526020017f77697468647261770000000000000000000000000000000000000000000000008152506113ad565b5b610ea1565b5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f0a57600080fd5b505afa158015610f1e573d6000803e3d6000fd5b505050506040513d6020811015610f3457600080fd5b81019080805190602001909291905050509050610f50836115fe565b610f6382826113ef90919063ffffffff16565b94505050505092915050565b60606040518060400160405280600781526020017f48595661756c7400000000000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214610fe857819050611114565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611062575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561106f57479050611114565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156110d657600080fd5b505afa1580156110ea573d6000803e3d6000fd5b505050506040513d602081101561110057600080fd5b810190808051906020019092919050505090505b92915050565b61112a611125611615565b611653565b611132610f6f565b83836040516020018085805190602001908083835b6020831061116a5780518252602082019150602081019050602083039250611147565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b602083106111e357805182526020820191506020810190506020830392506111c0565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b6020831061125c5780518252602082019150602081019050602083039250611239565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b602083106112d557805182526020820191506020810190506020830392506112b2565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611372578082015181840152602081019050611357565b50505050905090810190601f16801561139f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6113ec816040518060400160405280600b81526020017f556e73706563696669656400000000000000000000000000000000000000000081525061111a565b50565b600061143183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061179a565b905092915050565b6000811480611507575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505050506040513d60208110156114f457600080fd5b8101908080519060200190929190505050145b61155c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180611d736036913960400191505060405180910390fd5b6115f98363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061185a565b505050565b61161281600061194990919063ffffffff16565b50565b600061164e7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161198e90919063ffffffff16565b905090565b6060600082141561169b576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611795565b6000808390505b60008111156116c5578180600101925050600a81816116bd57fe5b0490506116a2565b5060608167ffffffffffffffff811180156116df57600080fd5b506040519080825280601f01601f1916602001820160405280156117125781602001600182028036833780820191505090505b50905060008290505b600081111561178e57600a858161172e57fe5b0660300160f81b82600183038151811061174457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161177d57fe5b04945080806001900391505061171b565b5080925050505b919050565b6000838311158290611847576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561180c5780820151818401526020810190506117f1565b50505050905090810190601f1680156118395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60606118bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119ae9092919063ffffffff16565b9050600081511115611944578080602001905160208110156118dd57600080fd5b8101908080519060200190929190505050611943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611d49602a913960400191505060405180910390fd5b5b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60008260008381526020019081526020016000205460001c905092915050565b60606119bd84846000856119c6565b90509392505050565b606082471015611a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611d236026913960400191505060405180910390fd5b611a2a85611b6f565b611a9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310611aec5780518252602082019150602081019050602083039250611ac9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611b4e576040519150601f19603f3d011682016040523d82523d6000602084013e611b53565b606091505b5091509150611b63828286611b82565b92505050949350505050565b600080823b905060008111915050919050565b60608315611b9257829050611c47565b600083511115611ba55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c0c578082015181840152602081019050611bf1565b50505050905090810190601f168015611c395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015611c7c57611d1f565b60046000803e611c8d600051611c5f565b6308c379a08114611c9e5750611d1f565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715611cca57505050611d1f565b808201805167ffffffffffffffff811115611ce9575050505050611d1f565b8060208301013d8501811115611d0457505050505050611d1f565b611d0d82611c4e565b60208401016040528296505050505050505b9056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220cf4ba6944d673c7b25e4f6e370fd89e3fb3a134098c9ddcf8b5f40290f76342264736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c806399eb59b91161006457806399eb59b914610253578063c2722916146102a2578063dc9031c4146102ac578063f3fef3a3146102fb578063f5f5ba721461035d578063fa2901a5146103ed576100a7565b80630f532d18146100ac5780631413dc7d146100d75780634782f7791461010257806347e7ef241461016457806356150edf146101c657806387c1394314610228575b600080fd5b3480156100b857600080fd5b506100c1610437565b6040518082815260200191505060405180910390f35b3480156100e357600080fd5b506100ec61045e565b6040518082815260200191505060405180910390f35b61014e6004803603604081101561011857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610485565b6040518082815260200191505060405180910390f35b6101b06004803603604081101561017a57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506105c4565b6040518082815260200191505060405180910390f35b610212600480360360408110156101dc57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061092b565b6040518082815260200191505060405180910390f35b34801561023457600080fd5b5061023d610bac565b6040518082815260200191505060405180910390f35b34801561025f57600080fd5b5061028c6004803603602081101561027657600080fd5b8101908080359060200190929190505050610bb8565b6040518082815260200191505060405180910390f35b6102aa610bd0565b005b3480156102b857600080fd5b506102e5600480360360208110156102cf57600080fd5b8101908080359060200190929190505050610c3e565b6040518082815260200191505060405180910390f35b6103476004803603604081101561031157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610c5f565b6040518082815260200191505060405180910390f35b34801561036957600080fd5b50610372610f6f565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103b2578082015181840152602081019050610397565b50505050905090810190601f1680156103df5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156103f957600080fd5b50610402610fac565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b600080479050600084905061049a8585610fb7565b93508073ffffffffffffffffffffffffffffffffffffffff1663f14210a6856040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156104ef57600080fd5b505af1925050508015610500575060015b6105a05761050c611c6c565b80610517575061055c565b6105566040518060400160405280600b81526020017f77697468647261774554480000000000000000000000000000000000000000008152508261111a565b5061059b565b61059a6040518060400160405280600b81526020017f77697468647261774554480000000000000000000000000000000000000000008152506113ad565b5b6105a1565b5b60004790506105b983826113ef90919063ffffffff16565b935050505092915050565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561063357600080fd5b505afa158015610647573d6000803e3d6000fd5b505050506040513d602081101561065d57600080fd5b8101908080519060200190929190505050905060008273ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106b857600080fd5b505afa1580156106cc573d6000803e3d6000fd5b505050506040513d60208110156106e257600080fd5b810190808051906020019092919050505090506106ff8186610fb7565b945061072c83868373ffffffffffffffffffffffffffffffffffffffff166114399092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff1663b6b55f25866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b15801561077f57600080fd5b505af1925050508015610790575060015b6108305761079c611c6c565b806107a757506107ec565b6107e66040518060400160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152508261111a565b5061082b565b61082a6040518060400160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152506113ad565b5b610831565b5b61085d8360008373ffffffffffffffffffffffffffffffffffffffff166114399092919063ffffffff16565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156108c657600080fd5b505afa1580156108da573d6000803e3d6000fd5b505050506040513d60208110156108f057600080fd5b8101908080519060200190929190505050905061090c846115fe565b61091f83826113ef90919063ffffffff16565b94505050505092915050565b60008082905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561099a57600080fd5b505afa1580156109ae573d6000803e3d6000fd5b505050506040513d60208110156109c457600080fd5b810190808051906020019092919050505090506109e2600086610fb7565b94508173ffffffffffffffffffffffffffffffffffffffff1663f6326fb3866040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a2c57600080fd5b505af193505050508015610a3e575060015b610ade57610a4a611c6c565b80610a555750610a9a565b610a946040518060400160405280600a81526020017f6465706f736974455448000000000000000000000000000000000000000000008152508261111a565b50610ad9565b610ad86040518060400160405280600a81526020017f6465706f736974455448000000000000000000000000000000000000000000008152506113ad565b5b610adf565b5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610b4857600080fd5b505afa158015610b5c573d6000803e3d6000fd5b505050506040513d6020811015610b7257600080fd5b81019080805190602001909291905050509050610b8e836115fe565b610ba182826113ef90919063ffffffff16565b935050505092915050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b60008181548110610c4b57fe5b906000526020600020016000915090505481565b60008083905060008173ffffffffffffffffffffffffffffffffffffffff1663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cad57600080fd5b505afa158015610cc1573d6000803e3d6000fd5b505050506040513d6020811015610cd757600080fd5b8101908080519060200190929190505050905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610d5357600080fd5b505afa158015610d67573d6000803e3d6000fd5b505050506040513d6020811015610d7d57600080fd5b81019080805190602001909291905050509050610d9a8686610fb7565b94508273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610def57600080fd5b505af1925050508015610e00575060015b610ea057610e0c611c6c565b80610e175750610e5c565b610e566040518060400160405280600881526020017f77697468647261770000000000000000000000000000000000000000000000008152508261111a565b50610e9b565b610e9a6040518060400160405280600881526020017f77697468647261770000000000000000000000000000000000000000000000008152506113ad565b5b610ea1565b5b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f0a57600080fd5b505afa158015610f1e573d6000803e3d6000fd5b505050506040513d6020811015610f3457600080fd5b81019080805190602001909291905050509050610f50836115fe565b610f6382826113ef90919063ffffffff16565b94505050505092915050565b60606040518060400160405280600781526020017f48595661756c7400000000000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214610fe857819050611114565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611062575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561106f57479050611114565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156110d657600080fd5b505afa1580156110ea573d6000803e3d6000fd5b505050506040513d602081101561110057600080fd5b810190808051906020019092919050505090505b92915050565b61112a611125611615565b611653565b611132610f6f565b83836040516020018085805190602001908083835b6020831061116a5780518252602082019150602081019050602083039250611147565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b602083106111e357805182526020820191506020810190506020830392506111c0565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b6020831061125c5780518252602082019150602081019050602083039250611239565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b602083106112d557805182526020820191506020810190506020830392506112b2565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611372578082015181840152602081019050611357565b50505050905090810190601f16801561139f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6113ec816040518060400160405280600b81526020017f556e73706563696669656400000000000000000000000000000000000000000081525061111a565b50565b600061143183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f77000081525061179a565b905092915050565b6000811480611507575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b1580156114ca57600080fd5b505afa1580156114de573d6000803e3d6000fd5b505050506040513d60208110156114f457600080fd5b8101908080519060200190929190505050145b61155c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180611d736036913960400191505060405180910390fd5b6115f98363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061185a565b505050565b61161281600061194990919063ffffffff16565b50565b600061164e7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161198e90919063ffffffff16565b905090565b6060600082141561169b576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050611795565b6000808390505b60008111156116c5578180600101925050600a81816116bd57fe5b0490506116a2565b5060608167ffffffffffffffff811180156116df57600080fd5b506040519080825280601f01601f1916602001820160405280156117125781602001600182028036833780820191505090505b50905060008290505b600081111561178e57600a858161172e57fe5b0660300160f81b82600183038151811061174457fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161177d57fe5b04945080806001900391505061171b565b5080925050505b919050565b6000838311158290611847576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561180c5780820151818401526020810190506117f1565b50505050905090810190601f1680156118395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b60606118bc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166119ae9092919063ffffffff16565b9050600081511115611944578080602001905160208110156118dd57600080fd5b8101908080519060200190929190505050611943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611d49602a913960400191505060405180910390fd5b5b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60008260008381526020019081526020016000205460001c905092915050565b60606119bd84846000856119c6565b90509392505050565b606082471015611a21576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180611d236026913960400191505060405180910390fd5b611a2a85611b6f565b611a9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310611aec5780518252602082019150602081019050602083039250611ac9565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611b4e576040519150601f19603f3d011682016040523d82523d6000602084013e611b53565b606091505b5091509150611b63828286611b82565b92505050949350505050565b600080823b905060008111915050919050565b60608315611b9257829050611c47565b600083511115611ba55782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c0c578082015181840152602081019050611bf1565b50505050905090810190601f168015611c395780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015611c7c57611d1f565b60046000803e611c8d600051611c5f565b6308c379a08114611c9e5750611d1f565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715611cca57505050611d1f565b808201805167ffffffffffffffff811115611ce9575050505050611d1f565b8060208301013d8501811115611d0457505050505050611d1f565b611d0d82611c4e565b60208401016040528296505050505050505b9056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220cf4ba6944d673c7b25e4f6e370fd89e3fb3a134098c9ddcf8b5f40290f76342264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/yearn/HYVault.sol:HYVault",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/yearn/HYVault.sol:HYVault",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}