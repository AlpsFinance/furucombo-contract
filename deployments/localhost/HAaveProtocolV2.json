{
  "address": "0x7F2f7Ee155B799aB5E15A87c4ae3D5B52a4Ff631",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETHER",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROVIDER",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_CODE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateMode",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateMode",
          "type": "uint256"
        }
      ],
      "name": "borrowETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "modes",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "params",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateMode",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remainDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateMode",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "repayETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "remainDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawETH",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1b11a3078f49b432e84b1dc522147190aa4661d9c5b346ad41cc43ca45d1932c",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x7F2f7Ee155B799aB5E15A87c4ae3D5B52a4Ff631",
    "transactionIndex": 0,
    "gasUsed": "3576963",
    "logsBloom": "0x
    "blockHash": "0xc8e7325152fdc881fff9e65ae21c6e6f455629f89e0a68b60875738a4d667acc",
    "transactionHash": "0x1b11a3078f49b432e84b1dc522147190aa4661d9c5b346ad41cc43ca45d1932c",
    "logs": [],
    "blockNumber": 13356621,
    "cumulativeGasUsed": "3576963",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETHER\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROVIDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"}],\"name\":\"borrowETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"modes\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repayETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remainDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/aavev2/HAaveProtocolV2.sol\":\"HAaveProtocolV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/aavev2/HAaveProtocolV2.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../../interface/IProxy.sol\\\";\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"../weth/IWETH9.sol\\\";\\nimport \\\"./ILendingPoolV2.sol\\\";\\nimport \\\"./IFlashLoanReceiver.sol\\\";\\nimport \\\"./ILendingPoolAddressesProviderV2.sol\\\";\\nimport \\\"./libraries/DataTypes.sol\\\";\\n\\ncontract HAaveProtocolV2 is HandlerBase, IFlashLoanReceiver {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // prettier-ignore\\n    address public constant PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\\n    // prettier-ignore\\n    address payable public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    // prettier-ignore\\n    address payable public constant ETHER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint16 public constant REFERRAL_CODE = 56;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HAaveProtocolV2\\\";\\n    }\\n\\n    function deposit(address asset, uint256 amount) external payable {\\n        amount = _getBalance(asset, amount);\\n        _deposit(asset, amount);\\n    }\\n\\n    function depositETH(uint256 amount) external payable {\\n        amount = _getBalance(ETHER, amount);\\n        IWETH9(WETH).deposit{value: amount}();\\n        _deposit(WETH, amount);\\n\\n        _updateToken(WETH);\\n    }\\n\\n    function withdraw(address asset, uint256 amount)\\n        external\\n        payable\\n        returns (uint256 withdrawAmount)\\n    {\\n        withdrawAmount = _withdraw(asset, amount);\\n\\n        _updateToken(asset);\\n    }\\n\\n    function withdrawETH(uint256 amount)\\n        external\\n        payable\\n        returns (uint256 withdrawAmount)\\n    {\\n        withdrawAmount = _withdraw(WETH, amount);\\n        IWETH9(WETH).withdraw(withdrawAmount);\\n    }\\n\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external payable returns (uint256 remainDebt) {\\n        remainDebt = _repay(asset, amount, rateMode, onBehalfOf);\\n    }\\n\\n    function repayETH(\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) external payable returns (uint256 remainDebt) {\\n        IWETH9(WETH).deposit{value: amount}();\\n        remainDebt = _repay(WETH, amount, rateMode, onBehalfOf);\\n\\n        _updateToken(WETH);\\n    }\\n\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode\\n    ) external payable {\\n        address onBehalfOf = _getSender();\\n        _borrow(asset, amount, rateMode, onBehalfOf);\\n        _updateToken(asset);\\n    }\\n\\n    function borrowETH(uint256 amount, uint256 rateMode) external payable {\\n        address onBehalfOf = _getSender();\\n        _borrow(WETH, amount, rateMode, onBehalfOf);\\n        IWETH9(WETH).withdraw(amount);\\n    }\\n\\n    function flashLoan(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata modes,\\n        bytes calldata params\\n    ) external payable {\\n        if (assets.length != amounts.length) {\\n            _revertMsg(\\\"flashLoan\\\", \\\"assets and amounts do not match\\\");\\n        }\\n\\n        if (assets.length != modes.length) {\\n            _revertMsg(\\\"flashLoan\\\", \\\"assets and modes do not match\\\");\\n        }\\n\\n        address onBehalfOf = _getSender();\\n        address pool =\\n            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\\n\\n        try\\n            ILendingPoolV2(pool).flashLoan(\\n                address(this),\\n                assets,\\n                amounts,\\n                modes,\\n                onBehalfOf,\\n                params,\\n                REFERRAL_CODE\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"flashLoan\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"flashLoan\\\");\\n        }\\n\\n        // approve lending pool zero\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            IERC20(assets[i]).safeApprove(pool, 0);\\n            if (modes[i] != 0) _updateToken(assets[i]);\\n        }\\n    }\\n\\n    function executeOperation(\\n        address[] memory assets,\\n        uint256[] memory amounts,\\n        uint256[] memory premiums,\\n        address initiator,\\n        bytes memory params\\n    ) external override returns (bool) {\\n        if (\\n            msg.sender !=\\n            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool()\\n        ) {\\n            _revertMsg(\\\"executeOperation\\\", \\\"invalid caller\\\");\\n        }\\n\\n        if (initiator != address(this)) {\\n            _revertMsg(\\\"executeOperation\\\", \\\"not initiated by the proxy\\\");\\n        }\\n\\n        (address[] memory tos, bytes32[] memory configs, bytes[] memory datas) =\\n            abi.decode(params, (address[], bytes32[], bytes[]));\\n        IProxy(address(this)).execs(tos, configs, datas);\\n\\n        address pool =\\n            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            uint256 amountOwing = amounts[i].add(premiums[i]);\\n            IERC20(assets[i]).safeApprove(pool, amountOwing);\\n        }\\n        return true;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _deposit(address asset, uint256 amount) internal {\\n        (address pool, address aToken) = _getLendingPoolAndAToken(asset);\\n        IERC20(asset).safeApprove(pool, amount);\\n\\n        try\\n            ILendingPoolV2(pool).deposit(\\n                asset,\\n                amount,\\n                address(this),\\n                REFERRAL_CODE\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"deposit\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"deposit\\\");\\n        }\\n\\n        IERC20(asset).safeApprove(pool, 0);\\n        _updateToken(aToken);\\n    }\\n\\n    function _withdraw(address asset, uint256 amount)\\n        internal\\n        returns (uint256 withdrawAmount)\\n    {\\n        (address pool, address aToken) = _getLendingPoolAndAToken(asset);\\n        amount = _getBalance(aToken, amount);\\n\\n        try\\n            ILendingPoolV2(pool).withdraw(asset, amount, address(this))\\n        returns (uint256 ret) {\\n            withdrawAmount = ret;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"withdraw\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"withdraw\\\");\\n        }\\n    }\\n\\n    function _repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) internal returns (uint256 remainDebt) {\\n        address pool =\\n            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\\n        IERC20(asset).safeApprove(pool, amount);\\n\\n        try\\n            ILendingPoolV2(pool).repay(asset, amount, rateMode, onBehalfOf)\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"repay\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"repay\\\");\\n        }\\n\\n        IERC20(asset).safeApprove(pool, 0);\\n\\n        DataTypes.ReserveData memory reserve =\\n            ILendingPoolV2(pool).getReserveData(asset);\\n        remainDebt = DataTypes.InterestRateMode(rateMode) ==\\n            DataTypes.InterestRateMode.STABLE\\n            ? IERC20(reserve.stableDebtTokenAddress).balanceOf(onBehalfOf)\\n            : IERC20(reserve.variableDebtTokenAddress).balanceOf(onBehalfOf);\\n    }\\n\\n    function _borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 rateMode,\\n        address onBehalfOf\\n    ) internal {\\n        address pool =\\n            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\\n\\n        try\\n            ILendingPoolV2(pool).borrow(\\n                asset,\\n                amount,\\n                rateMode,\\n                REFERRAL_CODE,\\n                onBehalfOf\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"borrow\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"borrow\\\");\\n        }\\n    }\\n\\n    function _getLendingPoolAndAToken(address underlying)\\n        internal\\n        view\\n        returns (address pool, address aToken)\\n    {\\n        pool = ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\\n        try ILendingPoolV2(pool).getReserveData(underlying) returns (\\n            DataTypes.ReserveData memory data\\n        ) {\\n            aToken = data.aTokenAddress;\\n            if (aToken == address(0))\\n                _revertMsg(\\\"General\\\", \\\"aToken should not be zero address\\\");\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"General\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"General\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d32d61eb54fb65541e56257f1c765bc1556ddda62414731b925785386804a3f\"},\"contracts/handlers/aavev2/IFlashLoanReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity ^0.6.0;\\n\\n\\ninterface IFlashLoanReceiver {\\n  function executeOperation(\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata premiums,\\n    address initiator,\\n    bytes calldata params\\n  ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xf67b00deef8b53f209e9b41f2ad00f93c8669908423f43ced3af70962f7dadec\",\"license\":\"agpl-3.0\"},\"contracts/handlers/aavev2/ILendingPoolAddressesProviderV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProviderV2 {\\n  event MarketIdSet(string newMarketId);\\n  event LendingPoolUpdated(address indexed newAddress);\\n  event ConfigurationAdminUpdated(address indexed newAddress);\\n  event EmergencyAdminUpdated(address indexed newAddress);\\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n  event PriceOracleUpdated(address indexed newAddress);\\n  event LendingRateOracleUpdated(address indexed newAddress);\\n  event ProxyCreated(bytes32 id, address indexed newAddress);\\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n  function getMarketId() external view returns (string memory);\\n\\n  function setMarketId(string calldata marketId) external;\\n\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  function getLendingPool() external view returns (address);\\n\\n  function setLendingPoolImpl(address pool) external;\\n\\n  function getLendingPoolConfigurator() external view returns (address);\\n\\n  function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n  function getLendingPoolCollateralManager() external view returns (address);\\n\\n  function setLendingPoolCollateralManager(address manager) external;\\n\\n  function getPoolAdmin() external view returns (address);\\n\\n  function setPoolAdmin(address admin) external;\\n\\n  function getEmergencyAdmin() external view returns (address);\\n\\n  function setEmergencyAdmin(address admin) external;\\n\\n  function getPriceOracle() external view returns (address);\\n\\n  function setPriceOracle(address priceOracle) external;\\n\\n  function getLendingRateOracle() external view returns (address);\\n\\n  function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0x3badc9e069c785134e410be0af7c7bbd7922cb61dac2cd1166a97cbb4fdedcec\",\"license\":\"agpl-3.0\"},\"contracts/handlers/aavev2/ILendingPoolV2.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProviderV2} from \\\"./ILendingPoolAddressesProviderV2.sol\\\";\\nimport {DataTypes} from \\\"./libraries/DataTypes.sol\\\";\\n\\ninterface ILendingPoolV2 {\\n  /**\\n   * @dev Emitted on deposit()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the deposit\\n   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\\n   * @param amount The amount deposited\\n   * @param referral The referral code used\\n   **/\\n  event Deposit(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlyng asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to Address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   **/\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed\\n   * @param referral The referral code used\\n   **/\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint256 borrowRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referral\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   **/\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   **/\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   **/\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   **/\\n  event FlashLoan(\\n    address indexed target,\\n    address indexed initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    uint256 premium,\\n    uint16 referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when the pause is triggered.\\n   */\\n  event Paused();\\n\\n  /**\\n   * @dev Emitted when the pause is lifted.\\n   */\\n  event Unpaused();\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\\n   * LendingPoolCollateral manager using a DELEGATECALL\\n   * This allows to have the events in the generated ABI for LendingPool.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\\n   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\\n   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\\n   * gets added to the LendingPool ABI\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The new liquidity rate\\n   * @param stableBorrowRate The new stable borrow rate\\n   * @param variableBorrowRate The new variable borrow rate\\n   * @param liquidityIndex The new liquidity index\\n   * @param variableBorrowIndex The new variable borrow index\\n   **/\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to deposit\\n   * @param amount The amount to be deposited\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to Address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   **/\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   **/\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   **/\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 rateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param rateMode The rate mode that the user wants to swap to\\n   **/\\n  function swapBorrowRateMode(address asset, uint256 rateMode) external;\\n\\n  /**\\n   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\\n   *        borrowed at a stable rate and depositors are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   **/\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\\n   * @param asset The address of the underlying asset deposited\\n   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\\n   **/\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   **/\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\\n   * For further details please visit https://developers.aave.com\\n   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts amounts being flash-borrowed\\n   * @param modes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   **/\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata modes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @dev Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralETH the total collateral in ETH of the user\\n   * @return totalDebtETH the total debt in ETH of the user\\n   * @return availableBorrowsETH the borrowing power left of the user\\n   * @return currentLiquidationThreshold the liquidation threshold of the user\\n   * @return ltv the loan to value of the user\\n   * @return healthFactor the current health factor of the user\\n   **/\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralETH,\\n      uint256 totalDebtETH,\\n      uint256 availableBorrowsETH,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  function initReserve(\\n    address reserve,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\\n    external;\\n\\n  function setConfiguration(address reserve, uint256 configuration) external;\\n\\n  /**\\n   * @dev Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   **/\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   **/\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @dev Returns the normalized income normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the normalized variable debt per unit of asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state of the reserve\\n   **/\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromAfter,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  function getReservesList() external view returns (address[] memory);\\n\\n  function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\\n\\n  function setPause(bool val) external;\\n\\n  function paused() external view returns (bool);\\n}\",\"keccak256\":\"0xced102f18f7a75e9eb1c9053a3ce7df3f80c8bdff5f24b8d1d24e2aea960760f\",\"license\":\"agpl-3.0\"},\"contracts/handlers/aavev2/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity 0.6.12;\\n\\nlibrary DataTypes {\\n    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        //the current stable borrow rate. Expressed in ray\\n        uint128 currentStableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address aTokenAddress;\\n        address stableDebtTokenAddress;\\n        address variableDebtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateStrategyAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct UserConfigurationMap {\\n        uint256 data;\\n    }\\n\\n    enum InterestRateMode {NONE, STABLE, VARIABLE}\\n}\\n\",\"keccak256\":\"0x1e4a6d860ba821058ccf603093e52d2447079612661ade3e2879076958230883\",\"license\":\"agpl-3.0\"},\"contracts/handlers/weth/IWETH9.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IWETH9 {\\n    fallback() external payable;\\n    function deposit() external payable;\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xd54dceb2d3272ab53b74e40fa3d6a0440043cfd6bc2ce76eb9e1c7a4d5cd827f\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/interface/IProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IProxy {\\n    function batchExec(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\\n    function execs(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\\n}\\n\",\"keccak256\":\"0x1396275637bbbacc003d2090ef230a3aa685510a7177d7d2cfac77886ded9392\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613ff2806100206000396000f3fe6080604052600436106101345760003560e01c8063920f5c84116100ab578063dc9031c41161006f578063dc9031c4146103a6578063f14210a6146103e3578063f3fef3a314610413578063f538ba5114610443578063f5f5ba7214610473578063fa2901a51461049e57610134565b8063920f5c84146102db57806399eb59b914610318578063ad5c464814610355578063c1bce0b714610380578063c27229161461039c57610134565b806347e7ef24116100fd57806347e7ef24146102105780635358fbda1461022c5780635429615414610248578063573ade81146102645780636fab3b731461029457806387c13943146102b057610134565b8062d34411146101395780630f532d18146101645780631413dc7d1461018f5780633583849a146101ba57806342cb1fbc146101e5575b600080fd5b34801561014557600080fd5b5061014e6104c9565b60405161015b91906136e6565b60405180910390f35b34801561017057600080fd5b506101796104e1565b604051610186919061397c565b60405180910390f35b34801561019b57600080fd5b506101a4610508565b6040516101b1919061397c565b60405180910390f35b3480156101c657600080fd5b506101cf61052f565b6040516101dc9190613a94565b60405180910390f35b3480156101f157600080fd5b506101fa610534565b6040516102079190613701565b60405180910390f35b61022a60048036038101906102259190612bc2565b61054c565b005b61024660048036038101906102419190612f6f565b610566565b005b610262600480360381019061025d9190612cb0565b610639565b005b61027e60048036038101906102799190612c4d565b6109b1565b60405161028b9190613aaf565b60405180910390f35b6102ae60048036038101906102a99190612fc1565b6109c9565b005b3480156102bc57600080fd5b506102c5610a79565b6040516102d29190613aaf565b60405180910390f35b3480156102e757600080fd5b5061030260048036038101906102fd9190612e1c565b610a85565b60405161030f9190613961565b60405180910390f35b34801561032457600080fd5b5061033f600480360381019061033a9190612f1c565b610e33565b60405161034c919061397c565b60405180910390f35b34801561036157600080fd5b5061036a610e4b565b6040516103779190613701565b60405180910390f35b61039a60048036038101906103959190612bfe565b610e63565b005b6103a4610e8a565b005b3480156103b257600080fd5b506103cd60048036038101906103c89190612f6f565b610ec5565b6040516103da919061397c565b60405180910390f35b6103fd60048036038101906103f89190612f6f565b610ee6565b60405161040a9190613aaf565b60405180910390f35b61042d60048036038101906104289190612bc2565b610f8c565b60405161043a9190613aaf565b60405180910390f35b61045d60048036038101906104589190612ffd565b610fa9565b60405161046a9190613aaf565b60405180910390f35b34801561047f57600080fd5b50610488611066565b60405161049591906139b2565b60405180910390f35b3480156104aa57600080fd5b506104b36110a3565b6040516104c09190613997565b60405180910390f35b73b53c1a33016b2dc2ff3653530bff1848a515c8c581565b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b603881565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61055682826110ae565b905061056282826111f8565b5050565b61058473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee826110ae565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b505050505061061973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2826111f8565b61063673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261137a565b50565b8585905088889050146106bb576106ba6040518060400160405280600981526020017f666c6173684c6f616e00000000000000000000000000000000000000000000008152506040518060400160405280601f81526020017f61737365747320616e6420616d6f756e747320646f206e6f74206d6174636800815250611391565b5b83839050888890501461073d5761073c6040518060400160405280600981526020017f666c6173684c6f616e00000000000000000000000000000000000000000000008152506040518060400160405280601d81526020017f61737365747320616e64206d6f64657320646f206e6f74206d61746368000000815250611391565b5b6000610747611409565b9050600073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a557600080fd5b505afa1580156107b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dd9190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d308c8c8c8c8c8c8a8d8d60386040518c63ffffffff1660e01b815260040161082d9b9a99989796959493929190613745565b600060405180830381600087803b15801561084757600080fd5b505af1925050508015610858575060015b6108f857610864613e44565b8061086f57506108b4565b6108ae6040518060400160405280600981526020017f666c6173684c6f616e000000000000000000000000000000000000000000000081525082611391565b506108f3565b6108f26040518060400160405280600981526020017f666c6173684c6f616e0000000000000000000000000000000000000000000000815250611447565b5b6108f9565b5b60005b8a8a90508110156109a4576109538260008d8d8581811061091957fe5b905060200201602081019061092e9190612b70565b73ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b600087878381811061096157fe5b9050602002013514610997576109968b8b8381811061097c57fe5b90506020020160208101906109919190612b70565b61137a565b5b80806001019150506108fc565b5050505050505050505050565b60006109bf858585856115e7565b9050949350505050565b60006109d3611409565b90506109f573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28484846119ec565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b8152600401610a429190613aaf565b600060405180830381600087803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b50505050505050565b670de0b6b3a764000081565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae157600080fd5b505afa158015610af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b199190612b99565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc057610bbf6040518060400160405280601081526020017f657865637574654f7065726174696f6e000000000000000000000000000000008152506040518060400160405280600e81526020017f696e76616c69642063616c6c6572000000000000000000000000000000000000815250611391565b5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610c6857610c676040518060400160405280601081526020017f657865637574654f7065726174696f6e000000000000000000000000000000008152506040518060400160405280601a81526020017f6e6f7420696e69746961746564206279207468652070726f7879000000000000815250611391565b5b606080606084806020019051810190610c819190612d85565b9250925092503073ffffffffffffffffffffffffffffffffffffffff1663719385098484846040518463ffffffff1660e01b8152600401610cc493929190613915565b600060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b50505050600073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5257600080fd5b505afa158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a9190612b99565b905060005b8a51811015610e21576000610dd38a8381518110610da957fe5b60200260200101518c8481518110610dbd57fe5b6020026020010151611b9790919063ffffffff16565b9050610e1383828e8581518110610de657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b508080600101915050610d8f565b50600194505050505095945050505050565b60016020528060005260406000206000915090505481565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6000610e6d611409565b9050610e7b848484846119ec565b610e848461137a565b50505050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebc90613a14565b60405180910390fd5b60008181548110610ed257fe5b906000526020600020016000915090505481565b6000610f0673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc283611bec565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610f559190613aaf565b600060405180830381600087803b158015610f6f57600080fd5b505af1158015610f83573d6000803e3d6000fd5b50505050919050565b6000610f988383611bec565b9050610fa38361137a565b92915050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561100757600080fd5b505af115801561101b573d6000803e3d6000fd5b505050505061104073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28585856115e7565b905061105f73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261137a565b9392505050565b60606040518060400160405280600f81526020017f484161766550726f746f636f6c56320000000000000000000000000000000000815250905090565b63c272291660e01b81565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146110df578190506111f2565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611159575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15611166574790506111f2565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161119f91906136e6565b60206040518083038186803b1580156111b757600080fd5b505afa1580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef9190612f98565b90505b92915050565b60008061120484611d3f565b9150915061123382848673ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff1663e8eda9df85853060386040518563ffffffff1660e01b81526004016112739493929190613838565b600060405180830381600087803b15801561128d57600080fd5b505af192505050801561129e575060015b61133e576112aa613e44565b806112b557506112fa565b6112f46040518060400160405280600781526020017f6465706f7369740000000000000000000000000000000000000000000000000081525082611391565b50611339565b6113386040518060400160405280600781526020017f6465706f73697400000000000000000000000000000000000000000000000000815250611447565b5b61133f565b5b61136b8260008673ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b6113748161137a565b50505050565b61138e816000611f9490919063ffffffff16565b50565b6113a161139c611fd9565b612017565b6113a9611066565b83836040516020016113be9493929190613687565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140091906139b2565b60405180910390fd5b60006114427fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b600161215e90919063ffffffff16565b905090565b611486816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250611391565b50565b6000811480611522575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016114d092919061371c565b60206040518083038186803b1580156114e857600080fd5b505afa1580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190612f98565b145b611561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155890613a74565b60405180910390fd5b6115e28363095ea7b360e01b84846040516024016115809291906137d8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061217e565b505050565b60008073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c9190612b99565b90506116a981868873ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663573ade81878787876040518563ffffffff1660e01b81526004016116e8949392919061387d565b602060405180830381600087803b15801561170257600080fd5b505af192505050801561173357506040513d601f19601f820116820180604052508101906117309190612f98565b60015b6117d35761173f613e44565b8061174a575061178f565b6117896040518060400160405280600581526020017f726570617900000000000000000000000000000000000000000000000000000081525082611391565b506117ce565b6117cd6040518060400160405280600581526020017f7265706179000000000000000000000000000000000000000000000000000000815250611447565b5b6117d5565b505b6118018160008873ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b61180961240c565b8173ffffffffffffffffffffffffffffffffffffffff166335ea6a75886040518263ffffffff1660e01b815260040161184291906136e6565b6101806040518083038186803b15801561185b57600080fd5b505afa15801561186f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118939190612f45565b9050600160028111156118a257fe5b8560028111156118ae57fe5b60028111156118b957fe5b146119515780610120015173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016118fc91906136e6565b60206040518083038186803b15801561191457600080fd5b505afa158015611928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194c9190612f98565b6119e0565b80610100015173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161198f91906136e6565b60206040518083038186803b1580156119a757600080fd5b505afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df9190612f98565b5b92505050949350505050565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4857600080fd5b505afa158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a809190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff1663a415bcad8686866038876040518663ffffffff1660e01b8152600401611ac49594939291906138c2565b600060405180830381600087803b158015611ade57600080fd5b505af1925050508015611aef575060015b611b8f57611afb613e44565b80611b065750611b4b565b611b456040518060400160405280600681526020017f626f72726f77000000000000000000000000000000000000000000000000000081525082611391565b50611b8a565b611b896040518060400160405280600681526020017f626f72726f770000000000000000000000000000000000000000000000000000815250611447565b5b611b90565b5b5050505050565b600080828401905083811015611be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd9906139d4565b60405180910390fd5b8091505092915050565b6000806000611bfa85611d3f565b91509150611c0881856110ae565b93508173ffffffffffffffffffffffffffffffffffffffff166369328dec8686306040518463ffffffff1660e01b8152600401611c4793929190613801565b602060405180830381600087803b158015611c6157600080fd5b505af1925050508015611c9257506040513d601f19601f82011682018060405250810190611c8f9190612f98565b60015b611d3257611c9e613e44565b80611ca95750611cee565b611ce86040518060400160405280600881526020017f776974686472617700000000000000000000000000000000000000000000000081525082611391565b50611d2d565b611d2c6040518060400160405280600881526020017f7769746864726177000000000000000000000000000000000000000000000000815250611447565b5b611d37565b809350505b505092915050565b60008073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9c57600080fd5b505afa158015611db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd49190612b99565b91508173ffffffffffffffffffffffffffffffffffffffff166335ea6a75846040518263ffffffff1660e01b8152600401611e0f91906136e6565b6101806040518083038186803b158015611e2857600080fd5b505afa925050508015611e5957506040513d601f19601f82011682018060405250810190611e569190612f45565b60015b611ef957611e65613e44565b80611e705750611eb5565b611eaf6040518060400160405280600781526020017f47656e6572616c0000000000000000000000000000000000000000000000000081525082611391565b50611ef4565b611ef36040518060400160405280600781526020017f47656e6572616c00000000000000000000000000000000000000000000000000815250611447565b5b611f8f565b8060e001519150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f8d57611f8c6040518060400160405280600781526020017f47656e6572616c00000000000000000000000000000000000000000000000000815250604051806060016040528060218152602001613f9c60219139611391565b5b505b915091565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60006120127ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161224590919063ffffffff16565b905090565b6060600082141561205f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612159565b6000808390505b6000811115612089578180600101925050600a818161208157fe5b049050612066565b5060608167ffffffffffffffff811180156120a357600080fd5b506040519080825280601f01601f1916602001820160405280156120d65781602001600182028036833780820191505090505b50905060008290505b600081111561215257600a85816120f257fe5b0660300160f81b82600183038151811061210857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161214157fe5b0494508080600190039150506120df565b5080925050505b919050565b60008260008381526020019081526020016000205460001c905092915050565b60606121e0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122659092919063ffffffff16565b905060008151111561224057808060200190518101906122009190612ef3565b61223f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223690613a54565b60405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b6060612274848460008561227d565b90509392505050565b6060824710156122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b9906139f4565b60405180910390fd5b6122cb85612392565b61230a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230190613a34565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516123349190613670565b60006040518083038185875af1925050503d8060008114612371576040519150601f19603f3d011682016040523d82523d6000602084013e612376565b606091505b50915091506123868282866123a5565b92505050949350505050565b600080823b905060008111915050919050565b606083156123b557829050612405565b6000835111156123c85782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fc91906139b2565b60405180910390fd5b9392505050565b60405180610180016040528061242061252f565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681525090565b6040518060200160405280600081525090565b60008135905061255181613efa565b92915050565b60008151905061256681613efa565b92915050565b60008083601f84011261257e57600080fd5b8235905067ffffffffffffffff81111561259757600080fd5b6020830191508360208202830111156125af57600080fd5b9250929050565b600082601f8301126125c757600080fd5b81356125da6125d582613af7565b613aca565b915081818352602084019350602081019050838560208402820111156125ff57600080fd5b60005b8381101561262f57816126158882612542565b845260208401935060208301925050600181019050612602565b5050505092915050565b600082601f83011261264a57600080fd5b815161265d61265882613af7565b613aca565b9150818183526020840193506020810190508385602084028201111561268257600080fd5b60005b838110156126b257816126988882612557565b845260208401935060208301925050600181019050612685565b5050505092915050565b600082601f8301126126cd57600080fd5b81516126e06126db82613b1f565b613aca565b9150818183526020840193506020810190508385602084028201111561270557600080fd5b60005b83811015612735578161271b88826128aa565b845260208401935060208301925050600181019050612708565b5050505092915050565b600082601f83011261275057600080fd5b815161276361275e82613b47565b613aca565b9150818183526020840193506020810190508360005b838110156127a9578151860161278f888261295d565b845260208401935060208301925050600181019050612779565b5050505092915050565b60008083601f8401126127c557600080fd5b8235905067ffffffffffffffff8111156127de57600080fd5b6020830191508360208202830111156127f657600080fd5b9250929050565b600082601f83011261280e57600080fd5b813561282161281c82613b6f565b613aca565b9150818183526020840193506020810190508385602084028201111561284657600080fd5b60005b83811015612876578161285c8882612b1c565b845260208401935060208301925050600181019050612849565b5050505092915050565b60008151905061288f81613f11565b92915050565b6000813590506128a481613f28565b92915050565b6000815190506128b981613f28565b92915050565b60008083601f8401126128d157600080fd5b8235905067ffffffffffffffff8111156128ea57600080fd5b60208301915083600182028301111561290257600080fd5b9250929050565b600082601f83011261291a57600080fd5b813561292d61292882613b97565b613aca565b9150808252602083016020830185838301111561294957600080fd5b612954838284613de4565b50505092915050565b600082601f83011261296e57600080fd5b815161298161297c82613b97565b613aca565b9150808252602083016020830185838301111561299d57600080fd5b6129a8838284613df3565b50505092915050565b6000602082840312156129c357600080fd5b6129cd6020613aca565b905060006129dd84828501612b31565b60008301525092915050565b600061018082840312156129fc57600080fd5b612a07610180613aca565b90506000612a17848285016129b1565b6000830152506020612a2b84828501612b07565b6020830152506040612a3f84828501612b07565b6040830152506060612a5384828501612b07565b6060830152506080612a6784828501612b07565b60808301525060a0612a7b84828501612b07565b60a08301525060c0612a8f84828501612b46565b60c08301525060e0612aa384828501612557565b60e083015250610100612ab884828501612557565b61010083015250610120612ace84828501612557565b61012083015250610140612ae484828501612557565b61014083015250610160612afa84828501612b5b565b6101608301525092915050565b600081519050612b1681613f3f565b92915050565b600081359050612b2b81613f56565b92915050565b600081519050612b4081613f56565b92915050565b600081519050612b5581613f6d565b92915050565b600081519050612b6a81613f84565b92915050565b600060208284031215612b8257600080fd5b6000612b9084828501612542565b91505092915050565b600060208284031215612bab57600080fd5b6000612bb984828501612557565b91505092915050565b60008060408385031215612bd557600080fd5b6000612be385828601612542565b9250506020612bf485828601612b1c565b9150509250929050565b600080600060608486031215612c1357600080fd5b6000612c2186828701612542565b9350506020612c3286828701612b1c565b9250506040612c4386828701612b1c565b9150509250925092565b60008060008060808587031215612c6357600080fd5b6000612c7187828801612542565b9450506020612c8287828801612b1c565b9350506040612c9387828801612b1c565b9250506060612ca487828801612542565b91505092959194509250565b6000806000806000806000806080898b031215612ccc57600080fd5b600089013567ffffffffffffffff811115612ce657600080fd5b612cf28b828c0161256c565b9850985050602089013567ffffffffffffffff811115612d1157600080fd5b612d1d8b828c016127b3565b9650965050604089013567ffffffffffffffff811115612d3c57600080fd5b612d488b828c016127b3565b9450945050606089013567ffffffffffffffff811115612d6757600080fd5b612d738b828c016128bf565b92509250509295985092959890939650565b600080600060608486031215612d9a57600080fd5b600084015167ffffffffffffffff811115612db457600080fd5b612dc086828701612639565b935050602084015167ffffffffffffffff811115612ddd57600080fd5b612de9868287016126bc565b925050604084015167ffffffffffffffff811115612e0657600080fd5b612e128682870161273f565b9150509250925092565b600080600080600060a08688031215612e3457600080fd5b600086013567ffffffffffffffff811115612e4e57600080fd5b612e5a888289016125b6565b955050602086013567ffffffffffffffff811115612e7757600080fd5b612e83888289016127fd565b945050604086013567ffffffffffffffff811115612ea057600080fd5b612eac888289016127fd565b9350506060612ebd88828901612542565b925050608086013567ffffffffffffffff811115612eda57600080fd5b612ee688828901612909565b9150509295509295909350565b600060208284031215612f0557600080fd5b6000612f1384828501612880565b91505092915050565b600060208284031215612f2e57600080fd5b6000612f3c84828501612895565b91505092915050565b60006101808284031215612f5857600080fd5b6000612f66848285016129e9565b91505092915050565b600060208284031215612f8157600080fd5b6000612f8f84828501612b1c565b91505092915050565b600060208284031215612faa57600080fd5b6000612fb884828501612b31565b91505092915050565b60008060408385031215612fd457600080fd5b6000612fe285828601612b1c565b9250506020612ff385828601612b1c565b9150509250929050565b60008060006060848603121561301257600080fd5b600061302086828701612b1c565b935050602061303186828701612b1c565b925050604061304286828701612542565b9150509250925092565b6000613058838361309f565b60208301905092915050565b600061307083836132b2565b60208301905092915050565b6000613088838361330c565b905092915050565b61309981613d1e565b82525050565b6130a881613d0c565b82525050565b6130b781613d0c565b82525050565b60006130c98385613c68565b93506130d482613bc3565b8060005b8581101561310d576130ea8284613cf5565b6130f4888261304c565b97506130ff83613c34565b9250506001810190506130d8565b5085925050509392505050565b600061312582613bfd565b61312f8185613c68565b935061313a83613bcd565b8060005b8381101561316b578151613152888261304c565b975061315d83613c41565b92505060018101905061313e565b5085935050505092915050565b600061318382613c08565b61318d8185613c79565b935061319883613bdd565b8060005b838110156131c95781516131b08882613064565b97506131bb83613c4e565b92505060018101905061319c565b5085935050505092915050565b60006131e182613c13565b6131eb8185613c8a565b9350836020820285016131fd85613bed565b8060005b85811015613239578484038952815161321a858261307c565b945061322583613c5b565b925060208a01995050600181019050613201565b50829750879550505050505092915050565b60006132578385613c9b565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561328657600080fd5b602083029250613297838584613de4565b82840190509392505050565b6132ac81613d30565b82525050565b6132bb81613d3c565b82525050565b6132ca81613d3c565b82525050565b6132d981613d46565b82525050565b60006132eb8385613cbd565b93506132f8838584613de4565b61330183613e26565b840190509392505050565b600061331782613c1e565b6133218185613cac565b9350613331818560208601613df3565b61333a81613e26565b840191505092915050565b600061335082613c1e565b61335a8185613cce565b935061336a818560208601613df3565b80840191505092915050565b600061338182613c29565b61338b8185613cd9565b935061339b818560208601613df3565b6133a481613e26565b840191505092915050565b60006133ba82613c29565b6133c48185613cea565b93506133d4818560208601613df3565b80840191505092915050565b60006133ed601b83613cd9565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061342d602683613cd9565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613493601483613cd9565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b60006134d3601d83613cd9565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000613513600183613cea565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000613553602a83613cd9565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b60006135b9600283613cea565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006135f9603683613cd9565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b61365b81613d8e565b82525050565b61366a81613dbc565b82525050565b600061367c8284613345565b915081905092915050565b600061369382876133af565b915061369e82613506565b91506136aa82866133af565b91506136b582613506565b91506136c182856133af565b91506136cc826135ac565b91506136d882846133af565b915081905095945050505050565b60006020820190506136fb60008301846130ae565b92915050565b60006020820190506137166000830184613090565b92915050565b600060408201905061373160008301856130ae565b61373e60208301846130ae565b9392505050565b600060e08201905061375a600083018e6130ae565b818103602083015261376d818c8e6130bd565b90508181036040830152613782818a8c61324b565b9050818103606083015261379781888a61324b565b90506137a660808301876130ae565b81810360a08301526137b98185876132df565b90506137c860c0830184613652565b9c9b505050505050505050505050565b60006040820190506137ed60008301856130ae565b6137fa6020830184613661565b9392505050565b600060608201905061381660008301866130ae565b6138236020830185613661565b61383060408301846130ae565b949350505050565b600060808201905061384d60008301876130ae565b61385a6020830186613661565b61386760408301856130ae565b6138746060830184613652565b95945050505050565b600060808201905061389260008301876130ae565b61389f6020830186613661565b6138ac6040830185613661565b6138b960608301846130ae565b95945050505050565b600060a0820190506138d760008301886130ae565b6138e46020830187613661565b6138f16040830186613661565b6138fe6060830185613652565b61390b60808301846130ae565b9695505050505050565b6000606082019050818103600083015261392f818661311a565b905081810360208301526139438185613178565b9050818103604083015261395781846131d6565b9050949350505050565b600060208201905061397660008301846132a3565b92915050565b600060208201905061399160008301846132c1565b92915050565b60006020820190506139ac60008301846132d0565b92915050565b600060208201905081810360008301526139cc8184613376565b905092915050565b600060208201905081810360008301526139ed816133e0565b9050919050565b60006020820190508181036000830152613a0d81613420565b9050919050565b60006020820190508181036000830152613a2d81613486565b9050919050565b60006020820190508181036000830152613a4d816134c6565b9050919050565b60006020820190508181036000830152613a6d81613546565b9050919050565b60006020820190508181036000830152613a8d816135ec565b9050919050565b6000602082019050613aa96000830184613652565b92915050565b6000602082019050613ac46000830184613661565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613aed57600080fd5b8060405250919050565b600067ffffffffffffffff821115613b0e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613b3657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613b5e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613b8657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613bae57600080fd5b601f19601f8301169050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613d046020840184612542565b905092915050565b6000613d1782613d9c565b9050919050565b6000613d2982613d9c565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613e11578082015181840152602081019050613df6565b83811115613e20576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015613e5457613ef7565b60046000803e613e65600051613e37565b6308c379a08114613e765750613ef7565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715613ea257505050613ef7565b808201805167ffffffffffffffff811115613ec1575050505050613ef7565b8060208301013d8501811115613edc57505050505050613ef7565b613ee582613e26565b60208401016040528296505050505050505b90565b613f0381613d0c565b8114613f0e57600080fd5b50565b613f1a81613d30565b8114613f2557600080fd5b50565b613f3181613d3c565b8114613f3c57600080fd5b50565b613f4881613d72565b8114613f5357600080fd5b50565b613f5f81613dbc565b8114613f6a57600080fd5b50565b613f7681613dc6565b8114613f8157600080fd5b50565b613f8d81613dd7565b8114613f9857600080fd5b5056fe61546f6b656e2073686f756c64206e6f74206265207a65726f2061646472657373a2646970667358221220e85057bc097edb1b430a560cd390ce17f69403bb4ebcb4331c4e4a68927a4c8964736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101345760003560e01c8063920f5c84116100ab578063dc9031c41161006f578063dc9031c4146103a6578063f14210a6146103e3578063f3fef3a314610413578063f538ba5114610443578063f5f5ba7214610473578063fa2901a51461049e57610134565b8063920f5c84146102db57806399eb59b914610318578063ad5c464814610355578063c1bce0b714610380578063c27229161461039c57610134565b806347e7ef24116100fd57806347e7ef24146102105780635358fbda1461022c5780635429615414610248578063573ade81146102645780636fab3b731461029457806387c13943146102b057610134565b8062d34411146101395780630f532d18146101645780631413dc7d1461018f5780633583849a146101ba57806342cb1fbc146101e5575b600080fd5b34801561014557600080fd5b5061014e6104c9565b60405161015b91906136e6565b60405180910390f35b34801561017057600080fd5b506101796104e1565b604051610186919061397c565b60405180910390f35b34801561019b57600080fd5b506101a4610508565b6040516101b1919061397c565b60405180910390f35b3480156101c657600080fd5b506101cf61052f565b6040516101dc9190613a94565b60405180910390f35b3480156101f157600080fd5b506101fa610534565b6040516102079190613701565b60405180910390f35b61022a60048036038101906102259190612bc2565b61054c565b005b61024660048036038101906102419190612f6f565b610566565b005b610262600480360381019061025d9190612cb0565b610639565b005b61027e60048036038101906102799190612c4d565b6109b1565b60405161028b9190613aaf565b60405180910390f35b6102ae60048036038101906102a99190612fc1565b6109c9565b005b3480156102bc57600080fd5b506102c5610a79565b6040516102d29190613aaf565b60405180910390f35b3480156102e757600080fd5b5061030260048036038101906102fd9190612e1c565b610a85565b60405161030f9190613961565b60405180910390f35b34801561032457600080fd5b5061033f600480360381019061033a9190612f1c565b610e33565b60405161034c919061397c565b60405180910390f35b34801561036157600080fd5b5061036a610e4b565b6040516103779190613701565b60405180910390f35b61039a60048036038101906103959190612bfe565b610e63565b005b6103a4610e8a565b005b3480156103b257600080fd5b506103cd60048036038101906103c89190612f6f565b610ec5565b6040516103da919061397c565b60405180910390f35b6103fd60048036038101906103f89190612f6f565b610ee6565b60405161040a9190613aaf565b60405180910390f35b61042d60048036038101906104289190612bc2565b610f8c565b60405161043a9190613aaf565b60405180910390f35b61045d60048036038101906104589190612ffd565b610fa9565b60405161046a9190613aaf565b60405180910390f35b34801561047f57600080fd5b50610488611066565b60405161049591906139b2565b60405180910390f35b3480156104aa57600080fd5b506104b36110a3565b6040516104c09190613997565b60405180910390f35b73b53c1a33016b2dc2ff3653530bff1848a515c8c581565b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b603881565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b61055682826110ae565b905061056282826111f8565b5050565b61058473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee826110ae565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b1580156105e257600080fd5b505af11580156105f6573d6000803e3d6000fd5b505050505061061973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2826111f8565b61063673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261137a565b50565b8585905088889050146106bb576106ba6040518060400160405280600981526020017f666c6173684c6f616e00000000000000000000000000000000000000000000008152506040518060400160405280601f81526020017f61737365747320616e6420616d6f756e747320646f206e6f74206d6174636800815250611391565b5b83839050888890501461073d5761073c6040518060400160405280600981526020017f666c6173684c6f616e00000000000000000000000000000000000000000000008152506040518060400160405280601d81526020017f61737365747320616e64206d6f64657320646f206e6f74206d61746368000000815250611391565b5b6000610747611409565b9050600073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156107a557600080fd5b505afa1580156107b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dd9190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff1663ab9c4b5d308c8c8c8c8c8c8a8d8d60386040518c63ffffffff1660e01b815260040161082d9b9a99989796959493929190613745565b600060405180830381600087803b15801561084757600080fd5b505af1925050508015610858575060015b6108f857610864613e44565b8061086f57506108b4565b6108ae6040518060400160405280600981526020017f666c6173684c6f616e000000000000000000000000000000000000000000000081525082611391565b506108f3565b6108f26040518060400160405280600981526020017f666c6173684c6f616e0000000000000000000000000000000000000000000000815250611447565b5b6108f9565b5b60005b8a8a90508110156109a4576109538260008d8d8581811061091957fe5b905060200201602081019061092e9190612b70565b73ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b600087878381811061096157fe5b9050602002013514610997576109968b8b8381811061097c57fe5b90506020020160208101906109919190612b70565b61137a565b5b80806001019150506108fc565b5050505050505050505050565b60006109bf858585856115e7565b9050949350505050565b60006109d3611409565b90506109f573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28484846119ec565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b8152600401610a429190613aaf565b600060405180830381600087803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b50505050505050565b670de0b6b3a764000081565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610ae157600080fd5b505afa158015610af5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b199190612b99565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bc057610bbf6040518060400160405280601081526020017f657865637574654f7065726174696f6e000000000000000000000000000000008152506040518060400160405280600e81526020017f696e76616c69642063616c6c6572000000000000000000000000000000000000815250611391565b5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614610c6857610c676040518060400160405280601081526020017f657865637574654f7065726174696f6e000000000000000000000000000000008152506040518060400160405280601a81526020017f6e6f7420696e69746961746564206279207468652070726f7879000000000000815250611391565b5b606080606084806020019051810190610c819190612d85565b9250925092503073ffffffffffffffffffffffffffffffffffffffff1663719385098484846040518463ffffffff1660e01b8152600401610cc493929190613915565b600060405180830381600087803b158015610cde57600080fd5b505af1158015610cf2573d6000803e3d6000fd5b50505050600073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d5257600080fd5b505afa158015610d66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8a9190612b99565b905060005b8a51811015610e21576000610dd38a8381518110610da957fe5b60200260200101518c8481518110610dbd57fe5b6020026020010151611b9790919063ffffffff16565b9050610e1383828e8581518110610de657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b508080600101915050610d8f565b50600194505050505095945050505050565b60016020528060005260406000206000915090505481565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b6000610e6d611409565b9050610e7b848484846119ec565b610e848461137a565b50505050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ebc90613a14565b60405180910390fd5b60008181548110610ed257fe5b906000526020600020016000915090505481565b6000610f0673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc283611bec565b905073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610f559190613aaf565b600060405180830381600087803b158015610f6f57600080fd5b505af1158015610f83573d6000803e3d6000fd5b50505050919050565b6000610f988383611bec565b9050610fa38361137a565b92915050565b600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b15801561100757600080fd5b505af115801561101b573d6000803e3d6000fd5b505050505061104073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28585856115e7565b905061105f73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261137a565b9392505050565b60606040518060400160405280600f81526020017f484161766550726f746f636f6c56320000000000000000000000000000000000815250905090565b63c272291660e01b81565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146110df578190506111f2565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611159575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15611166574790506111f2565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161119f91906136e6565b60206040518083038186803b1580156111b757600080fd5b505afa1580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef9190612f98565b90505b92915050565b60008061120484611d3f565b9150915061123382848673ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff1663e8eda9df85853060386040518563ffffffff1660e01b81526004016112739493929190613838565b600060405180830381600087803b15801561128d57600080fd5b505af192505050801561129e575060015b61133e576112aa613e44565b806112b557506112fa565b6112f46040518060400160405280600781526020017f6465706f7369740000000000000000000000000000000000000000000000000081525082611391565b50611339565b6113386040518060400160405280600781526020017f6465706f73697400000000000000000000000000000000000000000000000000815250611447565b5b61133f565b5b61136b8260008673ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b6113748161137a565b50505050565b61138e816000611f9490919063ffffffff16565b50565b6113a161139c611fd9565b612017565b6113a9611066565b83836040516020016113be9493929190613687565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140091906139b2565b60405180910390fd5b60006114427fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b600161215e90919063ffffffff16565b905090565b611486816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250611391565b50565b6000811480611522575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b81526004016114d092919061371c565b60206040518083038186803b1580156114e857600080fd5b505afa1580156114fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115209190612f98565b145b611561576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155890613a74565b60405180910390fd5b6115e28363095ea7b360e01b84846040516024016115809291906137d8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061217e565b505050565b60008073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561164457600080fd5b505afa158015611658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167c9190612b99565b90506116a981868873ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663573ade81878787876040518563ffffffff1660e01b81526004016116e8949392919061387d565b602060405180830381600087803b15801561170257600080fd5b505af192505050801561173357506040513d601f19601f820116820180604052508101906117309190612f98565b60015b6117d35761173f613e44565b8061174a575061178f565b6117896040518060400160405280600581526020017f726570617900000000000000000000000000000000000000000000000000000081525082611391565b506117ce565b6117cd6040518060400160405280600581526020017f7265706179000000000000000000000000000000000000000000000000000000815250611447565b5b6117d5565b505b6118018160008873ffffffffffffffffffffffffffffffffffffffff166114899092919063ffffffff16565b61180961240c565b8173ffffffffffffffffffffffffffffffffffffffff166335ea6a75886040518263ffffffff1660e01b815260040161184291906136e6565b6101806040518083038186803b15801561185b57600080fd5b505afa15801561186f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118939190612f45565b9050600160028111156118a257fe5b8560028111156118ae57fe5b60028111156118b957fe5b146119515780610120015173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016118fc91906136e6565b60206040518083038186803b15801561191457600080fd5b505afa158015611928573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194c9190612f98565b6119e0565b80610100015173ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b815260040161198f91906136e6565b60206040518083038186803b1580156119a757600080fd5b505afa1580156119bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119df9190612f98565b5b92505050949350505050565b600073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611a4857600080fd5b505afa158015611a5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a809190612b99565b90508073ffffffffffffffffffffffffffffffffffffffff1663a415bcad8686866038876040518663ffffffff1660e01b8152600401611ac49594939291906138c2565b600060405180830381600087803b158015611ade57600080fd5b505af1925050508015611aef575060015b611b8f57611afb613e44565b80611b065750611b4b565b611b456040518060400160405280600681526020017f626f72726f77000000000000000000000000000000000000000000000000000081525082611391565b50611b8a565b611b896040518060400160405280600681526020017f626f72726f770000000000000000000000000000000000000000000000000000815250611447565b5b611b90565b5b5050505050565b600080828401905083811015611be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bd9906139d4565b60405180910390fd5b8091505092915050565b6000806000611bfa85611d3f565b91509150611c0881856110ae565b93508173ffffffffffffffffffffffffffffffffffffffff166369328dec8686306040518463ffffffff1660e01b8152600401611c4793929190613801565b602060405180830381600087803b158015611c6157600080fd5b505af1925050508015611c9257506040513d601f19601f82011682018060405250810190611c8f9190612f98565b60015b611d3257611c9e613e44565b80611ca95750611cee565b611ce86040518060400160405280600881526020017f776974686472617700000000000000000000000000000000000000000000000081525082611391565b50611d2d565b611d2c6040518060400160405280600881526020017f7769746864726177000000000000000000000000000000000000000000000000815250611447565b5b611d37565b809350505b505092915050565b60008073b53c1a33016b2dc2ff3653530bff1848a515c8c573ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9c57600080fd5b505afa158015611db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd49190612b99565b91508173ffffffffffffffffffffffffffffffffffffffff166335ea6a75846040518263ffffffff1660e01b8152600401611e0f91906136e6565b6101806040518083038186803b158015611e2857600080fd5b505afa925050508015611e5957506040513d601f19601f82011682018060405250810190611e569190612f45565b60015b611ef957611e65613e44565b80611e705750611eb5565b611eaf6040518060400160405280600781526020017f47656e6572616c0000000000000000000000000000000000000000000000000081525082611391565b50611ef4565b611ef36040518060400160405280600781526020017f47656e6572616c00000000000000000000000000000000000000000000000000815250611447565b5b611f8f565b8060e001519150600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611f8d57611f8c6040518060400160405280600781526020017f47656e6572616c00000000000000000000000000000000000000000000000000815250604051806060016040528060218152602001613f9c60219139611391565b5b505b915091565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60006120127ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161224590919063ffffffff16565b905090565b6060600082141561205f576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612159565b6000808390505b6000811115612089578180600101925050600a818161208157fe5b049050612066565b5060608167ffffffffffffffff811180156120a357600080fd5b506040519080825280601f01601f1916602001820160405280156120d65781602001600182028036833780820191505090505b50905060008290505b600081111561215257600a85816120f257fe5b0660300160f81b82600183038151811061210857fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161214157fe5b0494508080600190039150506120df565b5080925050505b919050565b60008260008381526020019081526020016000205460001c905092915050565b60606121e0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122659092919063ffffffff16565b905060008151111561224057808060200190518101906122009190612ef3565b61223f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161223690613a54565b60405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b6060612274848460008561227d565b90509392505050565b6060824710156122c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b9906139f4565b60405180910390fd5b6122cb85612392565b61230a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161230190613a34565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516123349190613670565b60006040518083038185875af1925050503d8060008114612371576040519150601f19603f3d011682016040523d82523d6000602084013e612376565b606091505b50915091506123868282866123a5565b92505050949350505050565b600080823b905060008111915050919050565b606083156123b557829050612405565b6000835111156123c85782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fc91906139b2565b60405180910390fd5b9392505050565b60405180610180016040528061242061252f565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff1681525090565b6040518060200160405280600081525090565b60008135905061255181613efa565b92915050565b60008151905061256681613efa565b92915050565b60008083601f84011261257e57600080fd5b8235905067ffffffffffffffff81111561259757600080fd5b6020830191508360208202830111156125af57600080fd5b9250929050565b600082601f8301126125c757600080fd5b81356125da6125d582613af7565b613aca565b915081818352602084019350602081019050838560208402820111156125ff57600080fd5b60005b8381101561262f57816126158882612542565b845260208401935060208301925050600181019050612602565b5050505092915050565b600082601f83011261264a57600080fd5b815161265d61265882613af7565b613aca565b9150818183526020840193506020810190508385602084028201111561268257600080fd5b60005b838110156126b257816126988882612557565b845260208401935060208301925050600181019050612685565b5050505092915050565b600082601f8301126126cd57600080fd5b81516126e06126db82613b1f565b613aca565b9150818183526020840193506020810190508385602084028201111561270557600080fd5b60005b83811015612735578161271b88826128aa565b845260208401935060208301925050600181019050612708565b5050505092915050565b600082601f83011261275057600080fd5b815161276361275e82613b47565b613aca565b9150818183526020840193506020810190508360005b838110156127a9578151860161278f888261295d565b845260208401935060208301925050600181019050612779565b5050505092915050565b60008083601f8401126127c557600080fd5b8235905067ffffffffffffffff8111156127de57600080fd5b6020830191508360208202830111156127f657600080fd5b9250929050565b600082601f83011261280e57600080fd5b813561282161281c82613b6f565b613aca565b9150818183526020840193506020810190508385602084028201111561284657600080fd5b60005b83811015612876578161285c8882612b1c565b845260208401935060208301925050600181019050612849565b5050505092915050565b60008151905061288f81613f11565b92915050565b6000813590506128a481613f28565b92915050565b6000815190506128b981613f28565b92915050565b60008083601f8401126128d157600080fd5b8235905067ffffffffffffffff8111156128ea57600080fd5b60208301915083600182028301111561290257600080fd5b9250929050565b600082601f83011261291a57600080fd5b813561292d61292882613b97565b613aca565b9150808252602083016020830185838301111561294957600080fd5b612954838284613de4565b50505092915050565b600082601f83011261296e57600080fd5b815161298161297c82613b97565b613aca565b9150808252602083016020830185838301111561299d57600080fd5b6129a8838284613df3565b50505092915050565b6000602082840312156129c357600080fd5b6129cd6020613aca565b905060006129dd84828501612b31565b60008301525092915050565b600061018082840312156129fc57600080fd5b612a07610180613aca565b90506000612a17848285016129b1565b6000830152506020612a2b84828501612b07565b6020830152506040612a3f84828501612b07565b6040830152506060612a5384828501612b07565b6060830152506080612a6784828501612b07565b60808301525060a0612a7b84828501612b07565b60a08301525060c0612a8f84828501612b46565b60c08301525060e0612aa384828501612557565b60e083015250610100612ab884828501612557565b61010083015250610120612ace84828501612557565b61012083015250610140612ae484828501612557565b61014083015250610160612afa84828501612b5b565b6101608301525092915050565b600081519050612b1681613f3f565b92915050565b600081359050612b2b81613f56565b92915050565b600081519050612b4081613f56565b92915050565b600081519050612b5581613f6d565b92915050565b600081519050612b6a81613f84565b92915050565b600060208284031215612b8257600080fd5b6000612b9084828501612542565b91505092915050565b600060208284031215612bab57600080fd5b6000612bb984828501612557565b91505092915050565b60008060408385031215612bd557600080fd5b6000612be385828601612542565b9250506020612bf485828601612b1c565b9150509250929050565b600080600060608486031215612c1357600080fd5b6000612c2186828701612542565b9350506020612c3286828701612b1c565b9250506040612c4386828701612b1c565b9150509250925092565b60008060008060808587031215612c6357600080fd5b6000612c7187828801612542565b9450506020612c8287828801612b1c565b9350506040612c9387828801612b1c565b9250506060612ca487828801612542565b91505092959194509250565b6000806000806000806000806080898b031215612ccc57600080fd5b600089013567ffffffffffffffff811115612ce657600080fd5b612cf28b828c0161256c565b9850985050602089013567ffffffffffffffff811115612d1157600080fd5b612d1d8b828c016127b3565b9650965050604089013567ffffffffffffffff811115612d3c57600080fd5b612d488b828c016127b3565b9450945050606089013567ffffffffffffffff811115612d6757600080fd5b612d738b828c016128bf565b92509250509295985092959890939650565b600080600060608486031215612d9a57600080fd5b600084015167ffffffffffffffff811115612db457600080fd5b612dc086828701612639565b935050602084015167ffffffffffffffff811115612ddd57600080fd5b612de9868287016126bc565b925050604084015167ffffffffffffffff811115612e0657600080fd5b612e128682870161273f565b9150509250925092565b600080600080600060a08688031215612e3457600080fd5b600086013567ffffffffffffffff811115612e4e57600080fd5b612e5a888289016125b6565b955050602086013567ffffffffffffffff811115612e7757600080fd5b612e83888289016127fd565b945050604086013567ffffffffffffffff811115612ea057600080fd5b612eac888289016127fd565b9350506060612ebd88828901612542565b925050608086013567ffffffffffffffff811115612eda57600080fd5b612ee688828901612909565b9150509295509295909350565b600060208284031215612f0557600080fd5b6000612f1384828501612880565b91505092915050565b600060208284031215612f2e57600080fd5b6000612f3c84828501612895565b91505092915050565b60006101808284031215612f5857600080fd5b6000612f66848285016129e9565b91505092915050565b600060208284031215612f8157600080fd5b6000612f8f84828501612b1c565b91505092915050565b600060208284031215612faa57600080fd5b6000612fb884828501612b31565b91505092915050565b60008060408385031215612fd457600080fd5b6000612fe285828601612b1c565b9250506020612ff385828601612b1c565b9150509250929050565b60008060006060848603121561301257600080fd5b600061302086828701612b1c565b935050602061303186828701612b1c565b925050604061304286828701612542565b9150509250925092565b6000613058838361309f565b60208301905092915050565b600061307083836132b2565b60208301905092915050565b6000613088838361330c565b905092915050565b61309981613d1e565b82525050565b6130a881613d0c565b82525050565b6130b781613d0c565b82525050565b60006130c98385613c68565b93506130d482613bc3565b8060005b8581101561310d576130ea8284613cf5565b6130f4888261304c565b97506130ff83613c34565b9250506001810190506130d8565b5085925050509392505050565b600061312582613bfd565b61312f8185613c68565b935061313a83613bcd565b8060005b8381101561316b578151613152888261304c565b975061315d83613c41565b92505060018101905061313e565b5085935050505092915050565b600061318382613c08565b61318d8185613c79565b935061319883613bdd565b8060005b838110156131c95781516131b08882613064565b97506131bb83613c4e565b92505060018101905061319c565b5085935050505092915050565b60006131e182613c13565b6131eb8185613c8a565b9350836020820285016131fd85613bed565b8060005b85811015613239578484038952815161321a858261307c565b945061322583613c5b565b925060208a01995050600181019050613201565b50829750879550505050505092915050565b60006132578385613c9b565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561328657600080fd5b602083029250613297838584613de4565b82840190509392505050565b6132ac81613d30565b82525050565b6132bb81613d3c565b82525050565b6132ca81613d3c565b82525050565b6132d981613d46565b82525050565b60006132eb8385613cbd565b93506132f8838584613de4565b61330183613e26565b840190509392505050565b600061331782613c1e565b6133218185613cac565b9350613331818560208601613df3565b61333a81613e26565b840191505092915050565b600061335082613c1e565b61335a8185613cce565b935061336a818560208601613df3565b80840191505092915050565b600061338182613c29565b61338b8185613cd9565b935061339b818560208601613df3565b6133a481613e26565b840191505092915050565b60006133ba82613c29565b6133c48185613cea565b93506133d4818560208601613df3565b80840191505092915050565b60006133ed601b83613cd9565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b600061342d602683613cd9565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613493601483613cd9565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b60006134d3601d83613cd9565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000613513600183613cea565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000613553602a83613cd9565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b60006135b9600283613cea565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006135f9603683613cd9565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b61365b81613d8e565b82525050565b61366a81613dbc565b82525050565b600061367c8284613345565b915081905092915050565b600061369382876133af565b915061369e82613506565b91506136aa82866133af565b91506136b582613506565b91506136c182856133af565b91506136cc826135ac565b91506136d882846133af565b915081905095945050505050565b60006020820190506136fb60008301846130ae565b92915050565b60006020820190506137166000830184613090565b92915050565b600060408201905061373160008301856130ae565b61373e60208301846130ae565b9392505050565b600060e08201905061375a600083018e6130ae565b818103602083015261376d818c8e6130bd565b90508181036040830152613782818a8c61324b565b9050818103606083015261379781888a61324b565b90506137a660808301876130ae565b81810360a08301526137b98185876132df565b90506137c860c0830184613652565b9c9b505050505050505050505050565b60006040820190506137ed60008301856130ae565b6137fa6020830184613661565b9392505050565b600060608201905061381660008301866130ae565b6138236020830185613661565b61383060408301846130ae565b949350505050565b600060808201905061384d60008301876130ae565b61385a6020830186613661565b61386760408301856130ae565b6138746060830184613652565b95945050505050565b600060808201905061389260008301876130ae565b61389f6020830186613661565b6138ac6040830185613661565b6138b960608301846130ae565b95945050505050565b600060a0820190506138d760008301886130ae565b6138e46020830187613661565b6138f16040830186613661565b6138fe6060830185613652565b61390b60808301846130ae565b9695505050505050565b6000606082019050818103600083015261392f818661311a565b905081810360208301526139438185613178565b9050818103604083015261395781846131d6565b9050949350505050565b600060208201905061397660008301846132a3565b92915050565b600060208201905061399160008301846132c1565b92915050565b60006020820190506139ac60008301846132d0565b92915050565b600060208201905081810360008301526139cc8184613376565b905092915050565b600060208201905081810360008301526139ed816133e0565b9050919050565b60006020820190508181036000830152613a0d81613420565b9050919050565b60006020820190508181036000830152613a2d81613486565b9050919050565b60006020820190508181036000830152613a4d816134c6565b9050919050565b60006020820190508181036000830152613a6d81613546565b9050919050565b60006020820190508181036000830152613a8d816135ec565b9050919050565b6000602082019050613aa96000830184613652565b92915050565b6000602082019050613ac46000830184613661565b92915050565b6000604051905081810181811067ffffffffffffffff82111715613aed57600080fd5b8060405250919050565b600067ffffffffffffffff821115613b0e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613b3657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613b5e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613b8657600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115613bae57600080fd5b601f19601f8301169050602081019050919050565b6000819050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000613d046020840184612542565b905092915050565b6000613d1782613d9c565b9050919050565b6000613d2982613d9c565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b60006fffffffffffffffffffffffffffffffff82169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600064ffffffffff82169050919050565b600060ff82169050919050565b82818337600083830152505050565b60005b83811015613e11578082015181840152602081019050613df6565b83811115613e20576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015613e5457613ef7565b60046000803e613e65600051613e37565b6308c379a08114613e765750613ef7565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715613ea257505050613ef7565b808201805167ffffffffffffffff811115613ec1575050505050613ef7565b8060208301013d8501811115613edc57505050505050613ef7565b613ee582613e26565b60208401016040528296505050505050505b90565b613f0381613d0c565b8114613f0e57600080fd5b50565b613f1a81613d30565b8114613f2557600080fd5b50565b613f3181613d3c565b8114613f3c57600080fd5b50565b613f4881613d72565b8114613f5357600080fd5b50565b613f5f81613dbc565b8114613f6a57600080fd5b50565b613f7681613dc6565b8114613f8157600080fd5b50565b613f8d81613dd7565b8114613f9857600080fd5b5056fe61546f6b656e2073686f756c64206e6f74206265207a65726f2061646472657373a2646970667358221220e85057bc097edb1b430a560cd390ce17f69403bb4ebcb4331c4e4a68927a4c8964736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/aavev2/HAaveProtocolV2.sol:HAaveProtocolV2",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/aavev2/HAaveProtocolV2.sol:HAaveProtocolV2",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}