{
  "address": "0x08f6F7f9910Eb265ae192F3818F42820292f143e",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minPoolAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minPoolAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityFactoryZap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "minPoolAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenJ",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "i",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "j",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenJ",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenJ",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeUint256Ether",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenJ",
          "type": "address"
        },
        {
          "internalType": "int128",
          "name": "i",
          "type": "int128"
        },
        {
          "internalType": "int128",
          "name": "j",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenJ",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "j",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "exchangeUnderlyingUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmount",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "i",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneCoin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmount",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "i",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneCoinFactoryZap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneCoinUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmount",
          "type": "uint256"
        },
        {
          "internalType": "int128",
          "name": "i",
          "type": "int128"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneCoinUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "handler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenI",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityOneCoinUnderlyingUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8d2f61c28545be144ce8afea854ac21155142b61f54007e21881dc4b6eaab0a",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x08f6F7f9910Eb265ae192F3818F42820292f143e",
    "transactionIndex": 0,
    "gasUsed": "4478000",
    "logsBloom": "0x
    "blockHash": "0x045f86c1b365242e11817573b66b074c2b21a75728eb485d7052f15f6876690e",
    "transactionHash": "0xe8d2f61c28545be144ce8afea854ac21155142b61f54007e21881dc4b6eaab0a",
    "logs": [],
    "blockNumber": 13356603,
    "cumulativeGasUsed": "4478000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityFactoryZap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUint256Ether\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"j\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenJ\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"j\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"exchangeUnderlyingUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinFactoryZap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"int128\",\"name\":\"i\",\"type\":\"int128\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityOneCoinUnderlyingUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,address[],uint256[],uint256)\":{\"notice\":\"Curve add liquidity\"},\"addLiquidityFactoryZap(address,address,address[],uint256[],uint256)\":{\"notice\":\"Curve add liquidity with factory zap\"},\"addLiquidityUnderlying(address,address,address[],uint256[],uint256)\":{\"notice\":\"Curve add liquidity with underlying true flag\"},\"exchange(address,address,address,int128,int128,uint256,uint256)\":{\"notice\":\"Curve exchange\"},\"exchangeUint256(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Curve exchange with uint256 ij\"},\"exchangeUint256Ether(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Curve exchange with uint256 ij and ether flag\"},\"exchangeUnderlying(address,address,address,int128,int128,uint256,uint256)\":{\"notice\":\"Curve exchange underlying\"},\"exchangeUnderlyingUint256(address,address,address,uint256,uint256,uint256,uint256)\":{\"notice\":\"Curve exchange underlying with uint256 ij\"},\"removeLiquidityOneCoin(address,address,address,uint256,int128,uint256)\":{\"notice\":\"Curve remove liquidity one coin\"},\"removeLiquidityOneCoinFactoryZap(address,address,address,uint256,int128,uint256)\":{\"notice\":\"Curve remove liquidity one coin with with factory zap\"},\"removeLiquidityOneCoinUint256(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Curve remove liquidity one coin with uint256 i\"},\"removeLiquidityOneCoinUnderlying(address,address,address,uint256,int128,uint256)\":{\"notice\":\"Curve remove liquidity one coin underlying\"},\"removeLiquidityOneCoinUnderlyingUint256(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Curve remove liquidity one coin underlying with uint256 i\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/curve/HCurve.sol\":\"HCurve\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/curve/HCurve.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"./ICurveHandler.sol\\\";\\n\\ncontract HCurve is HandlerBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HCurve\\\";\\n    }\\n\\n    // prettier-ignore\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /// @notice Curve exchange\\n    function exchange(\\n        address handler,\\n        address tokenI,\\n        address tokenJ,\\n        int128 i,\\n        int128 j,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\\n        try\\n            ICurveHandler(handler).exchange{value: ethAmount}(\\n                i,\\n                j,\\n                _amount,\\n                minAmount\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"exchange\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exchange\\\");\\n        }\\n\\n        return _exchangeAfter(tokenJ, balanceBefore);\\n    }\\n\\n    /// @notice Curve exchange with uint256 ij\\n    function exchangeUint256(\\n        address handler,\\n        address tokenI,\\n        address tokenJ,\\n        uint256 i,\\n        uint256 j,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\\n        try\\n            ICurveHandler(handler).exchange{value: ethAmount}(\\n                i,\\n                j,\\n                _amount,\\n                minAmount\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"exchangeUint256\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exchangeUint256\\\");\\n        }\\n\\n        return _exchangeAfter(tokenJ, balanceBefore);\\n    }\\n\\n    /// @notice Curve exchange with uint256 ij and ether flag\\n    function exchangeUint256Ether(\\n        address handler,\\n        address tokenI,\\n        address tokenJ,\\n        uint256 i,\\n        uint256 j,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\\n        try\\n            ICurveHandler(handler).exchange{value: ethAmount}(\\n                i,\\n                j,\\n                _amount,\\n                minAmount,\\n                true\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"exchangeUint256Ether\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exchangeUint256Ether\\\");\\n        }\\n\\n        return _exchangeAfter(tokenJ, balanceBefore);\\n    }\\n\\n    /// @notice Curve exchange underlying\\n    function exchangeUnderlying(\\n        address handler,\\n        address tokenI,\\n        address tokenJ,\\n        int128 i,\\n        int128 j,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\\n        try\\n            ICurveHandler(handler).exchange_underlying{value: ethAmount}(\\n                i,\\n                j,\\n                _amount,\\n                minAmount\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"exchangeUnderlying\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exchangeUnderlying\\\");\\n        }\\n\\n        return _exchangeAfter(tokenJ, balanceBefore);\\n    }\\n\\n    /// @notice Curve exchange underlying with uint256 ij\\n    function exchangeUnderlyingUint256(\\n        address handler,\\n        address tokenI,\\n        address tokenJ,\\n        uint256 i,\\n        uint256 j,\\n        uint256 amount,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _amount, uint256 balanceBefore, uint256 ethAmount) =\\n            _exchangeBefore(handler, tokenI, tokenJ, amount);\\n        try\\n            ICurveHandler(handler).exchange_underlying{value: ethAmount}(\\n                i,\\n                j,\\n                _amount,\\n                minAmount\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"exchangeUnderlyingUint256\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exchangeUnderlyingUint256\\\");\\n        }\\n\\n        return _exchangeAfter(tokenJ, balanceBefore);\\n    }\\n\\n    function _exchangeBefore(\\n        address handler,\\n        address tokenI,\\n        address tokenJ,\\n        uint256 amount\\n    )\\n        internal\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        amount = _getBalance(tokenI, amount);\\n        uint256 balanceBefore = _getBalance(tokenJ, type(uint256).max);\\n\\n        // Approve erc20 token or set eth amount\\n        uint256 ethAmount;\\n        if (tokenI != ETH_ADDRESS) {\\n            _tokenApprove(tokenI, handler, amount);\\n        } else {\\n            ethAmount = amount;\\n        }\\n\\n        return (amount, balanceBefore, ethAmount);\\n    }\\n\\n    function _exchangeAfter(address tokenJ, uint256 balanceBefore)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 balance = _getBalance(tokenJ, type(uint256).max);\\n        if (balance <= balanceBefore) {\\n            _revertMsg(\\\"_exchangeAfter\\\", \\\"after <= before\\\");\\n        }\\n\\n        if (tokenJ != ETH_ADDRESS) _updateToken(tokenJ);\\n\\n        return balance.sub(balanceBefore);\\n    }\\n\\n    /// @notice Curve add liquidity\\n    function addLiquidity(\\n        address handler,\\n        address pool,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256 minPoolAmount\\n    ) external payable returns (uint256) {\\n        (uint256[] memory _amounts, uint256 balanceBefore, uint256 ethAmount) =\\n            _addLiquidityBefore(handler, pool, tokens, amounts);\\n\\n        // Execute add_liquidity according to amount array size\\n        if (_amounts.length == 2) {\\n            uint256[2] memory amts = [_amounts[0], _amounts[1]];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidity\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidity\\\");\\n            }\\n        } else if (_amounts.length == 3) {\\n            uint256[3] memory amts = [_amounts[0], _amounts[1], _amounts[2]];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidity\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidity\\\");\\n            }\\n        } else if (_amounts.length == 4) {\\n            uint256[4] memory amts =\\n                [_amounts[0], _amounts[1], _amounts[2], _amounts[3]];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidity\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidity\\\");\\n            }\\n        } else if (_amounts.length == 5) {\\n            uint256[5] memory amts =\\n                [\\n                    _amounts[0],\\n                    _amounts[1],\\n                    _amounts[2],\\n                    _amounts[3],\\n                    _amounts[4]\\n                ];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidity\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidity\\\");\\n            }\\n        } else if (_amounts.length == 6) {\\n            uint256[6] memory amts =\\n                [\\n                    _amounts[0],\\n                    _amounts[1],\\n                    _amounts[2],\\n                    _amounts[3],\\n                    _amounts[4],\\n                    _amounts[5]\\n                ];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidity\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidity\\\");\\n            }\\n        } else {\\n            _revertMsg(\\\"addLiquidity\\\", \\\"invalid amount[] size\\\");\\n        }\\n\\n        return _addLiquidityAfter(pool, balanceBefore);\\n    }\\n\\n    /// @notice Curve add liquidity with underlying true flag\\n    function addLiquidityUnderlying(\\n        address handler,\\n        address pool,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256 minPoolAmount\\n    ) external payable returns (uint256) {\\n        (uint256[] memory _amounts, uint256 balanceBefore, uint256 ethAmount) =\\n            _addLiquidityBefore(handler, pool, tokens, amounts);\\n\\n        // Execute add_liquidity according to amount array size\\n        if (_amounts.length == 2) {\\n            uint256[2] memory amts = [_amounts[0], _amounts[1]];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount,\\n                    true\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\");\\n            }\\n        } else if (_amounts.length == 3) {\\n            uint256[3] memory amts = [_amounts[0], _amounts[1], _amounts[2]];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount,\\n                    true\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\");\\n            }\\n        } else if (_amounts.length == 4) {\\n            uint256[4] memory amts =\\n                [_amounts[0], _amounts[1], _amounts[2], _amounts[3]];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount,\\n                    true\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\");\\n            }\\n        } else if (_amounts.length == 5) {\\n            uint256[5] memory amts =\\n                [\\n                    _amounts[0],\\n                    _amounts[1],\\n                    _amounts[2],\\n                    _amounts[3],\\n                    _amounts[4]\\n                ];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount,\\n                    true\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\");\\n            }\\n        } else if (_amounts.length == 6) {\\n            uint256[6] memory amts =\\n                [\\n                    _amounts[0],\\n                    _amounts[1],\\n                    _amounts[2],\\n                    _amounts[3],\\n                    _amounts[4],\\n                    _amounts[5]\\n                ];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    amts,\\n                    minPoolAmount,\\n                    true\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityUnderlying\\\");\\n            }\\n        } else {\\n            _revertMsg(\\\"addLiquidityUnderlying\\\", \\\"invalid amount[] size\\\");\\n        }\\n\\n        return _addLiquidityAfter(pool, balanceBefore);\\n    }\\n\\n    /// @notice Curve add liquidity with factory zap\\n    function addLiquidityFactoryZap(\\n        address handler,\\n        address pool,\\n        address[] calldata tokens,\\n        uint256[] calldata amounts,\\n        uint256 minPoolAmount\\n    ) external payable returns (uint256) {\\n        (uint256[] memory _amounts, uint256 balanceBefore, uint256 ethAmount) =\\n            _addLiquidityBefore(handler, pool, tokens, amounts);\\n\\n        // Execute add_liquidity according to amount array size\\n        if (_amounts.length == 3) {\\n            uint256[3] memory amts = [_amounts[0], _amounts[1], _amounts[2]];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    pool,\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityFactoryZap\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityFactoryZap\\\");\\n            }\\n        } else if (_amounts.length == 4) {\\n            uint256[4] memory amts =\\n                [_amounts[0], _amounts[1], _amounts[2], _amounts[3]];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    pool,\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityFactoryZap\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityFactoryZap\\\");\\n            }\\n        } else if (_amounts.length == 5) {\\n            uint256[5] memory amts =\\n                [\\n                    _amounts[0],\\n                    _amounts[1],\\n                    _amounts[2],\\n                    _amounts[3],\\n                    _amounts[4]\\n                ];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    pool,\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityFactoryZap\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityFactoryZap\\\");\\n            }\\n        } else if (_amounts.length == 6) {\\n            uint256[6] memory amts =\\n                [\\n                    _amounts[0],\\n                    _amounts[1],\\n                    _amounts[2],\\n                    _amounts[3],\\n                    _amounts[4],\\n                    _amounts[5]\\n                ];\\n            try\\n                ICurveHandler(handler).add_liquidity{value: ethAmount}(\\n                    pool,\\n                    amts,\\n                    minPoolAmount\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"addLiquidityFactoryZap\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"addLiquidityFactoryZap\\\");\\n            }\\n        } else {\\n            _revertMsg(\\\"addLiquidityFactoryZap\\\", \\\"invalid amount[] size\\\");\\n        }\\n\\n        return _addLiquidityAfter(pool, balanceBefore);\\n    }\\n\\n    function _addLiquidityBefore(\\n        address handler,\\n        address pool,\\n        address[] memory tokens,\\n        uint256[] memory amounts\\n    )\\n        internal\\n        returns (\\n            uint256[] memory,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        uint256 balanceBefore = IERC20(pool).balanceOf(address(this));\\n\\n        // Approve non-zero amount erc20 token and set eth amount\\n        uint256 ethAmount;\\n        for (uint256 i = 0; i < amounts.length; i++) {\\n            if (amounts[i] == 0) continue;\\n            if (tokens[i] == ETH_ADDRESS) {\\n                ethAmount = amounts[i];\\n                continue;\\n            }\\n            amounts[i] = _getBalance(tokens[i], amounts[i]);\\n            _tokenApprove(tokens[i], handler, amounts[i]);\\n        }\\n\\n        return (amounts, balanceBefore, ethAmount);\\n    }\\n\\n    function _addLiquidityAfter(address pool, uint256 balanceBefore)\\n        internal\\n        returns (uint256)\\n    {\\n        uint256 balance = IERC20(pool).balanceOf(address(this));\\n        if (balance <= balanceBefore) {\\n            _revertMsg(\\\"_addLiquidityAfter\\\", \\\"after <= before\\\");\\n        }\\n\\n        // Update post process\\n        _updateToken(address(pool));\\n\\n        return balance.sub(balanceBefore);\\n    }\\n\\n    /// @notice Curve remove liquidity one coin\\n    function removeLiquidityOneCoin(\\n        address handler,\\n        address pool,\\n        address tokenI,\\n        uint256 poolAmount,\\n        int128 i,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _poolAmount, uint256 balanceBefore) =\\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\\n        try\\n            ICurveHandler(handler).remove_liquidity_one_coin(\\n                _poolAmount,\\n                i,\\n                minAmount\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"removeLiquidityOneCoin\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"removeLiquidityOneCoin\\\");\\n        }\\n\\n        return\\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\\n    }\\n\\n    /// @notice Curve remove liquidity one coin with uint256 i\\n    function removeLiquidityOneCoinUint256(\\n        address handler,\\n        address pool,\\n        address tokenI,\\n        uint256 poolAmount,\\n        uint256 i,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _poolAmount, uint256 balanceBefore) =\\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\\n        try\\n            ICurveHandler(handler).remove_liquidity_one_coin(\\n                _poolAmount,\\n                i,\\n                minAmount\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"removeLiquidityOneCoinUint256\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"removeLiquidityOneCoinUint256\\\");\\n        }\\n\\n        return\\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\\n    }\\n\\n    /// @notice Curve remove liquidity one coin underlying\\n    function removeLiquidityOneCoinUnderlying(\\n        address handler,\\n        address pool,\\n        address tokenI,\\n        uint256 poolAmount,\\n        int128 i,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _poolAmount, uint256 balanceBefore) =\\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\\n        try\\n            ICurveHandler(handler).remove_liquidity_one_coin(\\n                _poolAmount,\\n                i,\\n                minAmount,\\n                true\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"removeLiquidityOneCoinUnderlying\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"removeLiquidityOneCoinUnderlying\\\");\\n        }\\n\\n        return\\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\\n    }\\n\\n    /// @notice Curve remove liquidity one coin underlying with uint256 i\\n    function removeLiquidityOneCoinUnderlyingUint256(\\n        address handler,\\n        address pool,\\n        address tokenI,\\n        uint256 poolAmount,\\n        uint256 i,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _poolAmount, uint256 balanceBefore) =\\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\\n        try\\n            ICurveHandler(handler).remove_liquidity_one_coin(\\n                _poolAmount,\\n                i,\\n                minAmount,\\n                true\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"removeLiquidityOneCoinUnderlyingUint256\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"removeLiquidityOneCoinUnderlyingUint256\\\");\\n        }\\n\\n        return\\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\\n    }\\n\\n    /// @notice Curve remove liquidity one coin with with factory zap\\n    function removeLiquidityOneCoinFactoryZap(\\n        address handler,\\n        address pool,\\n        address tokenI,\\n        uint256 poolAmount,\\n        int128 i,\\n        uint256 minAmount\\n    ) external payable returns (uint256) {\\n        (uint256 _poolAmount, uint256 balanceBefore) =\\n            _removeLiquidityOneCoinBefore(handler, pool, tokenI, poolAmount);\\n        try\\n            ICurveHandler(handler).remove_liquidity_one_coin(\\n                pool,\\n                _poolAmount,\\n                i,\\n                minAmount\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"removeLiquidityOneCoinFactoryZap\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"removeLiquidityOneCoinFactoryZap\\\");\\n        }\\n\\n        return\\n            _removeLiquidityOneCoinAfter(handler, pool, tokenI, balanceBefore);\\n    }\\n\\n    function _removeLiquidityOneCoinBefore(\\n        address handler,\\n        address pool,\\n        address tokenI,\\n        uint256 poolAmount\\n    ) internal returns (uint256, uint256) {\\n        uint256 balanceBefore = _getBalance(tokenI, type(uint256).max);\\n        poolAmount = _getBalance(pool, poolAmount);\\n        _tokenApprove(pool, handler, poolAmount);\\n\\n        return (poolAmount, balanceBefore);\\n    }\\n\\n    function _removeLiquidityOneCoinAfter(\\n        address handler,\\n        address pool,\\n        address tokenI,\\n        uint256 balanceBefore\\n    ) internal returns (uint256) {\\n        // Some curve non-underlying pools like 3pool won't consume pool token\\n        // allowance since pool token was issued by the pool that don't need to\\n        // call transferFrom(). So set approval to 0 here.\\n        IERC20(pool).safeApprove(handler, 0);\\n        uint256 balance = _getBalance(tokenI, type(uint256).max);\\n        if (balance <= balanceBefore) {\\n            _revertMsg(\\\"_removeLiquidityOneCoinAfter\\\", \\\"after <= before\\\");\\n        }\\n\\n        // Update post process\\n        if (tokenI != ETH_ADDRESS) _updateToken(tokenI);\\n\\n        return balance.sub(balanceBefore);\\n    }\\n}\\n\",\"keccak256\":\"0xf8ba1a837138ef7182b0abfa761793eeed81f1ad98535b677cb60e7b2d5a66ce\"},\"contracts/handlers/curve/ICurveHandler.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ICurveHandler {\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable;\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable;\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool boolean // use_eth\\n    ) external payable;\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable;\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external payable;\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool boolean // use_eth\\n    ) external payable;\\n\\n    // Curve add liquidity function only support static array\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\\n        external\\n        payable;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount)\\n        external\\n        payable;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount)\\n        external\\n        payable;\\n\\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount)\\n        external\\n        payable;\\n\\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount)\\n        external\\n        payable;\\n\\n    // Curve add liquidity underlying\\n    function add_liquidity(\\n        uint256[2] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool boolean // use_underlying\\n    ) external payable;\\n\\n    function add_liquidity(\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool boolean // use_underlying\\n    ) external payable;\\n\\n    function add_liquidity(\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool boolean // use_underlying\\n    ) external payable;\\n\\n    function add_liquidity(\\n        uint256[5] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool boolean // use_underlying\\n    ) external payable;\\n\\n    function add_liquidity(\\n        uint256[6] calldata amounts,\\n        uint256 min_mint_amount,\\n        bool boolean // use_underlying\\n    ) external payable;\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[5] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[6] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Curve add liquidity factory metapool deposit zap\\n    function add_liquidity(\\n        address pool,\\n        uint256[3] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function add_liquidity(\\n        address pool,\\n        uint256[4] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function add_liquidity(\\n        address pool,\\n        uint256[5] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function add_liquidity(\\n        address pool,\\n        uint256[6] calldata amounts,\\n        uint256 min_mint_amount\\n    ) external payable;\\n\\n    function calc_token_amount(\\n        address pool,\\n        uint256[3] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        address pool,\\n        uint256[4] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        address pool,\\n        uint256[5] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(\\n        address pool,\\n        uint256[6] calldata amounts,\\n        bool deposit\\n    ) external view returns (uint256);\\n\\n    // Curve remove liquidity\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        uint256 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_uamount,\\n        bool boolean // donate_dust or use_underlying\\n    ) external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        uint256 i,\\n        uint256 min_uamount,\\n        bool boolean\\n    ) external;\\n\\n    // Curve remove liquidity factory metapool deposit zap\\n    function remove_liquidity_one_coin(\\n        address pool,\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, uint256 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    // Curve factory metapool deposit zap\\n    function calc_withdraw_one_coin(\\n        address pool,\\n        uint256 _token_amount,\\n        int128 i\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd24ea6a863d559067c7257445af1c0aa1b896aa1600fb86ab17bd5b248b3f06f\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061503e806100206000396000f3fe6080604052600436106101355760003560e01c8063a734f06e116100ab578063f5f5ba721161006f578063f5f5ba7214610a8f578063f9c1a8ee14610b1f578063fa2901a514610bd5578063fa8b325814610c1f578063fef6074e14610cdf578063ff2e5c4314610da557610135565b8063a734f06e14610810578063c272291614610851578063dc9031c41461085b578063df5f2889146108aa578063ec075daf1461096357610135565b806351c6312e116100fd57806351c6312e1461042b5780637ad0fd49146104eb5780637eb32418146106175780638337782d146106d057806387c139431461079657806399eb59b9146107c157610135565b80630f532d181461013a5780631413dc7d14610165578063301ee99614610190578063349a06351461024957806351a34ca5146102ff575b600080fd5b34801561014657600080fd5b5061014f610e65565b6040518082815260200191505060405180910390f35b34801561017157600080fd5b5061017a610e8c565b6040518082815260200191505060405180910390f35b610233600480360360c08110156101a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600f0b906020019092919080359060200190929190505050610eb3565b6040518082815260200191505060405180910390f35b6102e9600480360360c081101561025f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610ffa565b6040518082815260200191505060405180910390f35b610415600480360360a081101561031557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561037257600080fd5b82018360208201111561038457600080fd5b803590602001918460208302840111640100000000831117156103a657600080fd5b9091929391929390803590602001906401000000008111156103c757600080fd5b8201836020820111156103d957600080fd5b803590602001918460208302840111640100000000831117156103fb57600080fd5b90919293919293908035906020019092919050505061113e565b6040518082815260200191505060405180910390f35b6104d5600480360360e081101561044157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611b31565b6040518082815260200191505060405180910390f35b610601600480360360a081101561050157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561055e57600080fd5b82018360208201111561057057600080fd5b8035906020019184602083028401116401000000008311171561059257600080fd5b9091929391929390803590602001906401000000008111156105b357600080fd5b8201836020820111156105c557600080fd5b803590602001918460208302840111640100000000831117156105e757600080fd5b909192939192939080359060200190929190505050611c81565b6040518082815260200191505060405180910390f35b6106ba600480360360c081101561062d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600f0b9060200190929190803590602001909291905050506126ab565b6040518082815260200191505060405180910390f35b610780600480360360e08110156106e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600f0b90602001909291908035600f0b90602001909291908035906020019092919080359060200190929190505050612810565b6040518082815260200191505060405180910390f35b3480156107a257600080fd5b506107ab612966565b6040518082815260200191505060405180910390f35b3480156107cd57600080fd5b506107fa600480360360208110156107e457600080fd5b8101908080359060200190929190505050612972565b6040518082815260200191505060405180910390f35b34801561081c57600080fd5b5061082561298a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108596129a2565b005b34801561086757600080fd5b506108946004803603602081101561087e57600080fd5b8101908080359060200190929190505050612a10565b6040518082815260200191505060405180910390f35b61094d600480360360c08110156108c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600f0b906020019092919080359060200190929190505050612a31565b6040518082815260200191505060405180910390f35b610a79600480360360a081101561097957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156109d657600080fd5b8201836020820111156109e857600080fd5b80359060200191846020830284011164010000000083111715610a0a57600080fd5b909192939192939080359060200190640100000000811115610a2b57600080fd5b820183602082011115610a3d57600080fd5b80359060200191846020830284011164010000000083111715610a5f57600080fd5b909192939192939080359060200190929190505050612b83565b6040518082815260200191505060405180910390f35b348015610a9b57600080fd5b50610aa4613460565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ae4578082015181840152602081019050610ac9565b50505050905090810190601f168015610b115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610bbf600480360360c0811015610b3557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061349d565b6040518082815260200191505060405180910390f35b348015610be157600080fd5b50610bea6135b2565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610cc9600480360360e0811015610c3557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291905050506135bd565b6040518082815260200191505060405180910390f35b610d8f600480360360e0811015610cf557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600f0b90602001909291908035600f0b90602001909291908035906020019092919080359060200190929190505050613718565b6040518082815260200191505060405180910390f35b610e4f600480360360e0811015610dbb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919050505061386e565b6040518082815260200191505060405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b6000806000610ec4898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff16631a4d01d28387876040518463ffffffff1660e01b81526004018084815260200183600f0b81526020018281526020019350505050600060405180830381600087803b158015610f2e57600080fd5b505af1925050508015610f3f575060015b610fdf57610f4b614ea5565b80610f565750610f9b565b610f956040518060400160405280601681526020017f72656d6f76654c69717569646974794f6e65436f696e0000000000000000000081525082613a16565b50610fda565b610fd96040518060400160405280601681526020017f72656d6f76654c69717569646974794f6e65436f696e00000000000000000000815250613ca9565b5b610fe0565b5b610fec89898984613ceb565b925050509695505050505050565b600080600061100b898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff1663f1dc3cc98387876040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561107257600080fd5b505af1925050508015611083575060015b6111235761108f614ea5565b8061109a57506110df565b6110d96040518060400160405280601d81526020017f72656d6f76654c69717569646974794f6e65436f696e55696e7432353600000081525082613a16565b5061111e565b61111d6040518060400160405280601d81526020017f72656d6f76654c69717569646974794f6e65436f696e55696e74323536000000815250613ca9565b5b611124565b5b61113089898984613ceb565b925050509695505050505050565b600060606000806111d38b8b8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613e32565b925092509250600283511415611366576111eb614ddd565b60405180604001604052808560008151811061120357fe5b602002602001015181526020018560018151811061121d57fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16630b4c7e4d8383896040518463ffffffff1660e01b81526004018083600260200280838360005b83811015611283578082015181840152602081019050611268565b50505050905001828152602001925050506000604051808303818588803b1580156112ad57600080fd5b505af1935050505080156112bf575060015b61135f576112cb614ea5565b806112d6575061131b565b6113156040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b5061135a565b6113596040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b611360565b5b50611b17565b60038351141561150d57611378614dff565b60405180606001604052808560008151811061139057fe5b60200260200101518152602001856001815181106113aa57fe5b60200260200101518152602001856002815181106113c457fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16634515cef38383896040518463ffffffff1660e01b81526004018083600360200280838360005b8381101561142a57808201518184015260208101905061140f565b50505050905001828152602001925050506000604051808303818588803b15801561145457600080fd5b505af193505050508015611466575060015b61150657611472614ea5565b8061147d57506114c2565b6114bc6040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b50611501565b6115006040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b611507565b5b50611b16565b6004835114156116ce5761151f614e21565b60405180608001604052808560008151811061153757fe5b602002602001015181526020018560018151811061155157fe5b602002602001015181526020018560028151811061156b57fe5b602002602001015181526020018560038151811061158557fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663029b2f348383896040518463ffffffff1660e01b81526004018083600460200280838360005b838110156115eb5780820151818401526020810190506115d0565b50505050905001828152602001925050506000604051808303818588803b15801561161557600080fd5b505af193505050508015611627575060015b6116c757611633614ea5565b8061163e5750611683565b61167d6040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b506116c2565b6116c16040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b6116c8565b5b50611b15565b6005835114156118a9576116e0614e43565b6040518060a00160405280856000815181106116f857fe5b602002602001015181526020018560018151811061171257fe5b602002602001015181526020018560028151811061172c57fe5b602002602001015181526020018560038151811061174657fe5b602002602001015181526020018560048151811061176057fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663847384998383896040518463ffffffff1660e01b81526004018083600560200280838360005b838110156117c65780820151818401526020810190506117ab565b50505050905001828152602001925050506000604051808303818588803b1580156117f057600080fd5b505af193505050508015611802575060015b6118a25761180e614ea5565b80611819575061185e565b6118586040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b5061189d565b61189c6040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b6118a3565b5b50611b14565b600683511415611a9e576118bb614e65565b6040518060c00160405280856000815181106118d357fe5b60200260200101518152602001856001815181106118ed57fe5b602002602001015181526020018560028151811061190757fe5b602002602001015181526020018560038151811061192157fe5b602002602001015181526020018560048151811061193b57fe5b602002602001015181526020018560058151811061195557fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16633f8a44f38383896040518463ffffffff1660e01b81526004018083600660200280838360005b838110156119bb5780820151818401526020810190506119a0565b50505050905001828152602001925050506000604051808303818588803b1580156119e557600080fd5b505af1935050505080156119f7575060015b611a9757611a03614ea5565b80611a0e5750611a53565b611a4d6040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b50611a92565b611a916040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b611a98565b5b50611b13565b611b126040518060400160405280600c81526020017f6164644c697175696469747900000000000000000000000000000000000000008152506040518060400160405280601581526020017f696e76616c696420616d6f756e745b5d2073697a650000000000000000000000815250613a16565b5b5b5b5b5b611b218a83614022565b9350505050979650505050505050565b600080600080611b438b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff166365b2489b828a8a878a6040518663ffffffff1660e01b8152600401808581526020018481526020018381526020018281526020019450505050506000604051808303818588803b158015611bb457600080fd5b505af193505050508015611bc6575060015b611c6657611bd2614ea5565b80611bdd5750611c22565b611c1c6040518060400160405280601981526020017f65786368616e6765556e6465726c79696e6755696e743235360000000000000081525082613a16565b50611c61565b611c606040518060400160405280601981526020017f65786368616e6765556e6465726c79696e6755696e7432353600000000000000815250613ca9565b5b611c67565b5b611c71898361421b565b9350505050979650505050505050565b60006060600080611d168b8b8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613e32565b925092509250600283511415611eb457611d2e614ddd565b604051806040016040528085600081518110611d4657fe5b6020026020010151815260200185600181518110611d6057fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663ee22be2383838960016040518563ffffffff1660e01b81526004018084600260200280838360005b83811015611dc8578082015181840152602081019050611dad565b50505050905001838152602001821515815260200193505050506000604051808303818588803b158015611dfb57600080fd5b505af193505050508015611e0d575060015b611ead57611e19614ea5565b80611e245750611e69565b611e636040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b50611ea8565b611ea76040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b611eae565b5b50612691565b60038351141561206657611ec6614dff565b604051806060016040528085600081518110611ede57fe5b6020026020010151815260200185600181518110611ef857fe5b6020026020010151815260200185600281518110611f1257fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16632b6e993a83838960016040518563ffffffff1660e01b81526004018084600360200280838360005b83811015611f7a578082015181840152602081019050611f5f565b50505050905001838152602001821515815260200193505050506000604051808303818588803b158015611fad57600080fd5b505af193505050508015611fbf575060015b61205f57611fcb614ea5565b80611fd6575061201b565b6120156040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b5061205a565b6120596040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b612060565b5b50612690565b60048351141561223257612078614e21565b60405180608001604052808560008151811061209057fe5b60200260200101518152602001856001815181106120aa57fe5b60200260200101518152602001856002815181106120c457fe5b60200260200101518152602001856003815181106120de57fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663dc3a2d8183838960016040518563ffffffff1660e01b81526004018084600460200280838360005b8381101561214657808201518184015260208101905061212b565b50505050905001838152602001821515815260200193505050506000604051808303818588803b15801561217957600080fd5b505af19350505050801561218b575060015b61222b57612197614ea5565b806121a257506121e7565b6121e16040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b50612226565b6122256040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b61222c565b5b5061268f565b60058351141561241857612244614e43565b6040518060a001604052808560008151811061225c57fe5b602002602001015181526020018560018151811061227657fe5b602002602001015181526020018560028151811061229057fe5b60200260200101518152602001856003815181106122aa57fe5b60200260200101518152602001856004815181106122c457fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663c25fd56583838960016040518563ffffffff1660e01b81526004018084600560200280838360005b8381101561232c578082015181840152602081019050612311565b50505050905001838152602001821515815260200193505050506000604051808303818588803b15801561235f57600080fd5b505af193505050508015612371575060015b6124115761237d614ea5565b8061238857506123cd565b6123c76040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b5061240c565b61240b6040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b612412565b5b5061268e565b6006835114156126185761242a614e65565b6040518060c001604052808560008151811061244257fe5b602002602001015181526020018560018151811061245c57fe5b602002602001015181526020018560028151811061247657fe5b602002602001015181526020018560038151811061249057fe5b60200260200101518152602001856004815181106124aa57fe5b60200260200101518152602001856005815181106124c457fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff166312b7ef1e83838960016040518563ffffffff1660e01b81526004018084600660200280838360005b8381101561252c578082015181840152602081019050612511565b50505050905001838152602001821515815260200193505050506000604051808303818588803b15801561255f57600080fd5b505af193505050508015612571575060015b6126115761257d614ea5565b8061258857506125cd565b6125c76040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b5061260c565b61260b6040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b612612565b5b5061268d565b61268c6040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e67000000000000000000008152506040518060400160405280601581526020017f696e76616c696420616d6f756e745b5d2073697a650000000000000000000000815250613a16565b5b5b5b5b5b61269b8a83614022565b9350505050979650505050505050565b60008060006126bc898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff166329ed2862898488886040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183600f0b8152602001828152602001945050505050600060405180830381600087803b15801561274457600080fd5b505af1925050508015612755575060015b6127f557612761614ea5565b8061276c57506127b1565b6127ab6040518060400160405280602081526020017f72656d6f76654c69717569646974794f6e65436f696e466163746f72795a617081525082613a16565b506127f0565b6127ef6040518060400160405280602081526020017f72656d6f76654c69717569646974794f6e65436f696e466163746f72795a6170815250613ca9565b5b6127f6565b5b61280289898984613ceb565b925050509695505050505050565b6000806000806128228b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff16633df02124828a8a878a6040518663ffffffff1660e01b81526004018085600f0b815260200184600f0b81526020018381526020018281526020019450505050506000604051808303818588803b15801561289957600080fd5b505af1935050505080156128ab575060015b61294b576128b7614ea5565b806128c25750612907565b6129016040518060400160405280600881526020017f65786368616e676500000000000000000000000000000000000000000000000081525082613a16565b50612946565b6129456040518060400160405280600881526020017f65786368616e6765000000000000000000000000000000000000000000000000815250613ca9565b5b61294c565b5b612956898361421b565b9350505050979650505050505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b60008181548110612a1d57fe5b906000526020600020016000915090505481565b6000806000612a42898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff1663517a55a383878760016040518563ffffffff1660e01b81526004018085815260200184600f0b81526020018381526020018215158152602001945050505050600060405180830381600087803b158015612ab757600080fd5b505af1925050508015612ac8575060015b612b6857612ad4614ea5565b80612adf5750612b24565b612b1e6040518060400160405280602081526020017f72656d6f76654c69717569646974794f6e65436f696e556e6465726c79696e6781525082613a16565b50612b63565b612b626040518060400160405280602081526020017f72656d6f76654c69717569646974794f6e65436f696e556e6465726c79696e67815250613ca9565b5b612b69565b5b612b7589898984613ceb565b925050509695505050505050565b60006060600080612c188b8b8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613e32565b925092509250600383511415612de357612c30614dff565b604051806060016040528085600081518110612c4857fe5b6020026020010151815260200185600181518110612c6257fe5b6020026020010151815260200185600281518110612c7c57fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663a3185179838d848a6040518563ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183600360200280838360005b83811015612cff578082015181840152602081019050612ce4565b5050505090500182815260200193505050506000604051808303818588803b158015612d2a57600080fd5b505af193505050508015612d3c575060015b612ddc57612d48614ea5565b80612d535750612d98565b612d926040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a61700000000000000000000081525082613a16565b50612dd7565b612dd66040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a617000000000000000000000815250613ca9565b5b612ddd565b5b50613446565b600483511415612fc257612df5614e21565b604051806080016040528085600081518110612e0d57fe5b6020026020010151815260200185600181518110612e2757fe5b6020026020010151815260200185600281518110612e4157fe5b6020026020010151815260200185600381518110612e5b57fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663384e03db838d848a6040518563ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183600460200280838360005b83811015612ede578082015181840152602081019050612ec3565b5050505090500182815260200193505050506000604051808303818588803b158015612f0957600080fd5b505af193505050508015612f1b575060015b612fbb57612f27614ea5565b80612f325750612f77565b612f716040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a61700000000000000000000081525082613a16565b50612fb6565b612fb56040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a617000000000000000000000815250613ca9565b5b612fbc565b5b50613445565b6005835114156131bb57612fd4614e43565b6040518060a0016040528085600081518110612fec57fe5b602002602001015181526020018560018151811061300657fe5b602002602001015181526020018560028151811061302057fe5b602002602001015181526020018560038151811061303a57fe5b602002602001015181526020018560048151811061305457fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16631b61222b838d848a6040518563ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183600560200280838360005b838110156130d75780820151818401526020810190506130bc565b5050505090500182815260200193505050506000604051808303818588803b15801561310257600080fd5b505af193505050508015613114575060015b6131b457613120614ea5565b8061312b5750613170565b61316a6040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a61700000000000000000000081525082613a16565b506131af565b6131ae6040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a617000000000000000000000815250613ca9565b5b6131b5565b5b50613444565b6006835114156133ce576131cd614e65565b6040518060c00160405280856000815181106131e557fe5b60200260200101518152602001856001815181106131ff57fe5b602002602001015181526020018560028151811061321957fe5b602002602001015181526020018560038151811061323357fe5b602002602001015181526020018560048151811061324d57fe5b602002602001015181526020018560058151811061326757fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16630dd95c5e838d848a6040518563ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183600660200280838360005b838110156132ea5780820151818401526020810190506132cf565b5050505090500182815260200193505050506000604051808303818588803b15801561331557600080fd5b505af193505050508015613327575060015b6133c757613333614ea5565b8061333e5750613383565b61337d6040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a61700000000000000000000081525082613a16565b506133c2565b6133c16040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a617000000000000000000000815250613ca9565b5b6133c8565b5b50613443565b6134426040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a6170000000000000000000008152506040518060400160405280601581526020017f696e76616c696420616d6f756e745b5d2073697a650000000000000000000000815250613a16565b5b5b5b5b6134508a83614022565b9350505050979650505050505050565b60606040518060400160405280600681526020017f4843757276650000000000000000000000000000000000000000000000000000815250905090565b60008060006134ae898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff16638f15b6b583878760016040518563ffffffff1660e01b8152600401808581526020018481526020018381526020018215158152602001945050505050600060405180830381600087803b15801561352057600080fd5b505af1925050508015613531575060015b6135975761353d614ea5565b806135485750613570565b61356a604051806060016040528060278152602001614f5c6027913982613a16565b50613592565b613591604051806060016040528060278152602001614f5c60279139613ca9565b5b613598565b5b6135a489898984613ceb565b925050509695505050505050565b63c272291660e01b81565b6000806000806135cf8b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff1663394747c5828a8a878a60016040518763ffffffff1660e01b8152600401808681526020018581526020018481526020018381526020018215158152602001955050505050506000604051808303818588803b15801561364b57600080fd5b505af19350505050801561365d575060015b6136fd57613669614ea5565b8061367457506136b9565b6136b36040518060400160405280601481526020017f65786368616e676555696e74323536457468657200000000000000000000000081525082613a16565b506136f8565b6136f76040518060400160405280601481526020017f65786368616e676555696e743235364574686572000000000000000000000000815250613ca9565b5b6136fe565b5b613708898361421b565b9350505050979650505050505050565b60008060008061372a8b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff1663a6417ed6828a8a878a6040518663ffffffff1660e01b81526004018085600f0b815260200184600f0b81526020018381526020018281526020019450505050506000604051808303818588803b1580156137a157600080fd5b505af1935050505080156137b3575060015b613853576137bf614ea5565b806137ca575061380f565b6138096040518060400160405280601281526020017f65786368616e6765556e6465726c79696e67000000000000000000000000000081525082613a16565b5061384e565b61384d6040518060400160405280601281526020017f65786368616e6765556e6465726c79696e670000000000000000000000000000815250613ca9565b5b613854565b5b61385e898361421b565b9350505050979650505050505050565b6000806000806138808b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff16635b41b908828a8a878a6040518663ffffffff1660e01b8152600401808581526020018481526020018381526020018281526020019450505050506000604051808303818588803b1580156138f157600080fd5b505af193505050508015613903575060015b6139a35761390f614ea5565b8061391a575061395f565b6139596040518060400160405280600f81526020017f65786368616e676555696e74323536000000000000000000000000000000000081525082613a16565b5061399e565b61399d6040518060400160405280600f81526020017f65786368616e676555696e743235360000000000000000000000000000000000815250613ca9565b5b6139a4565b5b6139ae898361421b565b9350505050979650505050505050565b60008060006139ed857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614333565b90506139f98685614333565b9350613a06868886614496565b8381925092505094509492505050565b613a26613a2161457e565b6145bc565b613a2e613460565b83836040516020018085805190602001908083835b60208310613a665780518252602082019150602081019050602083039250613a43565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b60208310613adf5780518252602082019150602081019050602083039250613abc565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310613b585780518252602082019150602081019050602083039250613b35565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b60208310613bd15780518252602082019150602081019050602083039250613bae565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613c6e578082015181840152602081019050613c53565b50505050905090810190601f168015613c9b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b613ce8816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250613a16565b50565b6000613d198560008673ffffffffffffffffffffffffffffffffffffffff166147039092919063ffffffff16565b6000613d45847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614333565b9050828111613dc357613dc26040518060400160405280601c81526020017f5f72656d6f76654c69717569646974794f6e65436f696e4166746572000000008152506040518060400160405280600f81526020017f6166746572203c3d206265666f72650000000000000000000000000000000000815250613a16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614613e1457613e13846148c8565b5b613e2783826148df90919063ffffffff16565b915050949350505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613ea057600080fd5b505afa158015613eb4573d6000803e3d6000fd5b505050506040513d6020811015613eca57600080fd5b81019080805190602001909291905050509050600080600090505b865181101561400c576000878281518110613efc57fe5b60200260200101511415613f0f57613fff565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16888281518110613f4657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415613f8557868181518110613f7657fe5b60200260200101519150613fff565b613fb5888281518110613f9457fe5b6020026020010151888381518110613fa857fe5b6020026020010151614333565b878281518110613fc157fe5b602002602001018181525050613ffe888281518110613fdc57fe5b60200260200101518b898481518110613ff157fe5b6020026020010151614496565b5b8080600101915050613ee5565b5085828294509450945050509450945094915050565b6000808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561408c57600080fd5b505afa1580156140a0573d6000803e3d6000fd5b505050506040513d60208110156140b657600080fd5b81019080805190602001909291905050509050828111614145576141446040518060400160405280601281526020017f5f6164644c6971756964697479416674657200000000000000000000000000008152506040518060400160405280600f81526020017f6166746572203c3d206265666f72650000000000000000000000000000000000815250613a16565b5b61414e846148c8565b61416183826148df90919063ffffffff16565b91505092915050565b60008060006141798685614333565b935060006141a7867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614333565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614614202576141fd888a88614496565b614206565b8590505b85828294509450945050509450945094915050565b600080614248847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614333565b90508281116142c6576142c56040518060400160405280600e81526020017f5f65786368616e676541667465720000000000000000000000000000000000008152506040518060400160405280600f81526020017f6166746572203c3d206265666f72650000000000000000000000000000000000815250613a16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461431757614316846148c8565b5b61432a83826148df90919063ffffffff16565b91505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461436457819050614490565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806143de575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b156143eb57479050614490565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561445257600080fd5b505afa158015614466573d6000803e3d6000fd5b505050506040513d602081101561447c57600080fd5b810190808051906020019092919050505090505b92915050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561450757600080fd5b505af1925050508015614518575060015b614578576145488260008573ffffffffffffffffffffffffffffffffffffffff166147039092919063ffffffff16565b61457382828573ffffffffffffffffffffffffffffffffffffffff166147039092919063ffffffff16565b614579565b5b505050565b60006145b77ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161492990919063ffffffff16565b905090565b60606000821415614604576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506146fe565b6000808390505b600081111561462e578180600101925050600a818161462657fe5b04905061460b565b5060608167ffffffffffffffff8111801561464857600080fd5b506040519080825280601f01601f19166020018201604052801561467b5781602001600182028036833780820191505090505b50905060008290505b60008111156146f757600a858161469757fe5b0660300160f81b8260018303815181106146ad57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85816146e657fe5b049450808060019003915050614684565b5080925050505b919050565b60008114806147d1575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561479457600080fd5b505afa1580156147a8573d6000803e3d6000fd5b505050506040513d60208110156147be57600080fd5b8101908080519060200190929190505050145b614826576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180614fd36036913960400191505060405180910390fd5b6148c38363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614949565b505050565b6148dc816000614a3890919063ffffffff16565b50565b600061492183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614a7d565b905092915050565b60008260008381526020019081526020016000205460001c905092915050565b60606149ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16614b3d9092919063ffffffff16565b9050600081511115614a33578080602001905160208110156149cc57600080fd5b8101908080519060200190929190505050614a32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614fa9602a913960400191505060405180910390fd5b5b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b6000838311158290614b2a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614aef578082015181840152602081019050614ad4565b50505050905090810190601f168015614b1c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6060614b4c8484600085614b55565b90509392505050565b606082471015614bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614f836026913960400191505060405180910390fd5b614bb985614cfe565b614c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310614c7b5780518252602082019150602081019050602083039250614c58565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614cdd576040519150601f19603f3d011682016040523d82523d6000602084013e614ce2565b606091505b5091509150614cf2828286614d11565b92505050949350505050565b600080823b905060008111915050919050565b60608315614d2157829050614dd6565b600083511115614d345782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614d9b578082015181840152602081019050614d80565b50505050905090810190601f168015614dc85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060a00160405280600590602082028036833780820191505090505090565b6040518060c00160405280600690602082028036833780820191505090505090565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015614eb557614f58565b60046000803e614ec6600051614e98565b6308c379a08114614ed75750614f58565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715614f0357505050614f58565b808201805167ffffffffffffffff811115614f22575050505050614f58565b8060208301013d8501811115614f3d57505050505050614f58565b614f4682614e87565b60208401016040528296505050505050505b9056fe72656d6f76654c69717569646974794f6e65436f696e556e6465726c79696e6755696e74323536416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d9412a60f12e454826c8f280ff346a339b02c7ecff11fbad88a4a59acbec835a64736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c8063a734f06e116100ab578063f5f5ba721161006f578063f5f5ba7214610a8f578063f9c1a8ee14610b1f578063fa2901a514610bd5578063fa8b325814610c1f578063fef6074e14610cdf578063ff2e5c4314610da557610135565b8063a734f06e14610810578063c272291614610851578063dc9031c41461085b578063df5f2889146108aa578063ec075daf1461096357610135565b806351c6312e116100fd57806351c6312e1461042b5780637ad0fd49146104eb5780637eb32418146106175780638337782d146106d057806387c139431461079657806399eb59b9146107c157610135565b80630f532d181461013a5780631413dc7d14610165578063301ee99614610190578063349a06351461024957806351a34ca5146102ff575b600080fd5b34801561014657600080fd5b5061014f610e65565b6040518082815260200191505060405180910390f35b34801561017157600080fd5b5061017a610e8c565b6040518082815260200191505060405180910390f35b610233600480360360c08110156101a657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600f0b906020019092919080359060200190929190505050610eb3565b6040518082815260200191505060405180910390f35b6102e9600480360360c081101561025f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050610ffa565b6040518082815260200191505060405180910390f35b610415600480360360a081101561031557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561037257600080fd5b82018360208201111561038457600080fd5b803590602001918460208302840111640100000000831117156103a657600080fd5b9091929391929390803590602001906401000000008111156103c757600080fd5b8201836020820111156103d957600080fd5b803590602001918460208302840111640100000000831117156103fb57600080fd5b90919293919293908035906020019092919050505061113e565b6040518082815260200191505060405180910390f35b6104d5600480360360e081101561044157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190505050611b31565b6040518082815260200191505060405180910390f35b610601600480360360a081101561050157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561055e57600080fd5b82018360208201111561057057600080fd5b8035906020019184602083028401116401000000008311171561059257600080fd5b9091929391929390803590602001906401000000008111156105b357600080fd5b8201836020820111156105c557600080fd5b803590602001918460208302840111640100000000831117156105e757600080fd5b909192939192939080359060200190929190505050611c81565b6040518082815260200191505060405180910390f35b6106ba600480360360c081101561062d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600f0b9060200190929190803590602001909291905050506126ab565b6040518082815260200191505060405180910390f35b610780600480360360e08110156106e657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600f0b90602001909291908035600f0b90602001909291908035906020019092919080359060200190929190505050612810565b6040518082815260200191505060405180910390f35b3480156107a257600080fd5b506107ab612966565b6040518082815260200191505060405180910390f35b3480156107cd57600080fd5b506107fa600480360360208110156107e457600080fd5b8101908080359060200190929190505050612972565b6040518082815260200191505060405180910390f35b34801561081c57600080fd5b5061082561298a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6108596129a2565b005b34801561086757600080fd5b506108946004803603602081101561087e57600080fd5b8101908080359060200190929190505050612a10565b6040518082815260200191505060405180910390f35b61094d600480360360c08110156108c057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035600f0b906020019092919080359060200190929190505050612a31565b6040518082815260200191505060405180910390f35b610a79600480360360a081101561097957600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001906401000000008111156109d657600080fd5b8201836020820111156109e857600080fd5b80359060200191846020830284011164010000000083111715610a0a57600080fd5b909192939192939080359060200190640100000000811115610a2b57600080fd5b820183602082011115610a3d57600080fd5b80359060200191846020830284011164010000000083111715610a5f57600080fd5b909192939192939080359060200190929190505050612b83565b6040518082815260200191505060405180910390f35b348015610a9b57600080fd5b50610aa4613460565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ae4578082015181840152602081019050610ac9565b50505050905090810190601f168015610b115780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610bbf600480360360c0811015610b3557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291908035906020019092919050505061349d565b6040518082815260200191505060405180910390f35b348015610be157600080fd5b50610bea6135b2565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b610cc9600480360360e0811015610c3557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291905050506135bd565b6040518082815260200191505060405180910390f35b610d8f600480360360e0811015610cf557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035600f0b90602001909291908035600f0b90602001909291908035906020019092919080359060200190929190505050613718565b6040518082815260200191505060405180910390f35b610e4f600480360360e0811015610dbb57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919050505061386e565b6040518082815260200191505060405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b6000806000610ec4898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff16631a4d01d28387876040518463ffffffff1660e01b81526004018084815260200183600f0b81526020018281526020019350505050600060405180830381600087803b158015610f2e57600080fd5b505af1925050508015610f3f575060015b610fdf57610f4b614ea5565b80610f565750610f9b565b610f956040518060400160405280601681526020017f72656d6f76654c69717569646974794f6e65436f696e0000000000000000000081525082613a16565b50610fda565b610fd96040518060400160405280601681526020017f72656d6f76654c69717569646974794f6e65436f696e00000000000000000000815250613ca9565b5b610fe0565b5b610fec89898984613ceb565b925050509695505050505050565b600080600061100b898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff1663f1dc3cc98387876040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561107257600080fd5b505af1925050508015611083575060015b6111235761108f614ea5565b8061109a57506110df565b6110d96040518060400160405280601d81526020017f72656d6f76654c69717569646974794f6e65436f696e55696e7432353600000081525082613a16565b5061111e565b61111d6040518060400160405280601d81526020017f72656d6f76654c69717569646974794f6e65436f696e55696e74323536000000815250613ca9565b5b611124565b5b61113089898984613ceb565b925050509695505050505050565b600060606000806111d38b8b8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613e32565b925092509250600283511415611366576111eb614ddd565b60405180604001604052808560008151811061120357fe5b602002602001015181526020018560018151811061121d57fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16630b4c7e4d8383896040518463ffffffff1660e01b81526004018083600260200280838360005b83811015611283578082015181840152602081019050611268565b50505050905001828152602001925050506000604051808303818588803b1580156112ad57600080fd5b505af1935050505080156112bf575060015b61135f576112cb614ea5565b806112d6575061131b565b6113156040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b5061135a565b6113596040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b611360565b5b50611b17565b60038351141561150d57611378614dff565b60405180606001604052808560008151811061139057fe5b60200260200101518152602001856001815181106113aa57fe5b60200260200101518152602001856002815181106113c457fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16634515cef38383896040518463ffffffff1660e01b81526004018083600360200280838360005b8381101561142a57808201518184015260208101905061140f565b50505050905001828152602001925050506000604051808303818588803b15801561145457600080fd5b505af193505050508015611466575060015b61150657611472614ea5565b8061147d57506114c2565b6114bc6040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b50611501565b6115006040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b611507565b5b50611b16565b6004835114156116ce5761151f614e21565b60405180608001604052808560008151811061153757fe5b602002602001015181526020018560018151811061155157fe5b602002602001015181526020018560028151811061156b57fe5b602002602001015181526020018560038151811061158557fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663029b2f348383896040518463ffffffff1660e01b81526004018083600460200280838360005b838110156115eb5780820151818401526020810190506115d0565b50505050905001828152602001925050506000604051808303818588803b15801561161557600080fd5b505af193505050508015611627575060015b6116c757611633614ea5565b8061163e5750611683565b61167d6040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b506116c2565b6116c16040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b6116c8565b5b50611b15565b6005835114156118a9576116e0614e43565b6040518060a00160405280856000815181106116f857fe5b602002602001015181526020018560018151811061171257fe5b602002602001015181526020018560028151811061172c57fe5b602002602001015181526020018560038151811061174657fe5b602002602001015181526020018560048151811061176057fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663847384998383896040518463ffffffff1660e01b81526004018083600560200280838360005b838110156117c65780820151818401526020810190506117ab565b50505050905001828152602001925050506000604051808303818588803b1580156117f057600080fd5b505af193505050508015611802575060015b6118a25761180e614ea5565b80611819575061185e565b6118586040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b5061189d565b61189c6040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b6118a3565b5b50611b14565b600683511415611a9e576118bb614e65565b6040518060c00160405280856000815181106118d357fe5b60200260200101518152602001856001815181106118ed57fe5b602002602001015181526020018560028151811061190757fe5b602002602001015181526020018560038151811061192157fe5b602002602001015181526020018560048151811061193b57fe5b602002602001015181526020018560058151811061195557fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16633f8a44f38383896040518463ffffffff1660e01b81526004018083600660200280838360005b838110156119bb5780820151818401526020810190506119a0565b50505050905001828152602001925050506000604051808303818588803b1580156119e557600080fd5b505af1935050505080156119f7575060015b611a9757611a03614ea5565b80611a0e5750611a53565b611a4d6040518060400160405280600c81526020017f6164644c6971756964697479000000000000000000000000000000000000000081525082613a16565b50611a92565b611a916040518060400160405280600c81526020017f6164644c69717569646974790000000000000000000000000000000000000000815250613ca9565b5b611a98565b5b50611b13565b611b126040518060400160405280600c81526020017f6164644c697175696469747900000000000000000000000000000000000000008152506040518060400160405280601581526020017f696e76616c696420616d6f756e745b5d2073697a650000000000000000000000815250613a16565b5b5b5b5b5b611b218a83614022565b9350505050979650505050505050565b600080600080611b438b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff166365b2489b828a8a878a6040518663ffffffff1660e01b8152600401808581526020018481526020018381526020018281526020019450505050506000604051808303818588803b158015611bb457600080fd5b505af193505050508015611bc6575060015b611c6657611bd2614ea5565b80611bdd5750611c22565b611c1c6040518060400160405280601981526020017f65786368616e6765556e6465726c79696e6755696e743235360000000000000081525082613a16565b50611c61565b611c606040518060400160405280601981526020017f65786368616e6765556e6465726c79696e6755696e7432353600000000000000815250613ca9565b5b611c67565b5b611c71898361421b565b9350505050979650505050505050565b60006060600080611d168b8b8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613e32565b925092509250600283511415611eb457611d2e614ddd565b604051806040016040528085600081518110611d4657fe5b6020026020010151815260200185600181518110611d6057fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663ee22be2383838960016040518563ffffffff1660e01b81526004018084600260200280838360005b83811015611dc8578082015181840152602081019050611dad565b50505050905001838152602001821515815260200193505050506000604051808303818588803b158015611dfb57600080fd5b505af193505050508015611e0d575060015b611ead57611e19614ea5565b80611e245750611e69565b611e636040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b50611ea8565b611ea76040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b611eae565b5b50612691565b60038351141561206657611ec6614dff565b604051806060016040528085600081518110611ede57fe5b6020026020010151815260200185600181518110611ef857fe5b6020026020010151815260200185600281518110611f1257fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16632b6e993a83838960016040518563ffffffff1660e01b81526004018084600360200280838360005b83811015611f7a578082015181840152602081019050611f5f565b50505050905001838152602001821515815260200193505050506000604051808303818588803b158015611fad57600080fd5b505af193505050508015611fbf575060015b61205f57611fcb614ea5565b80611fd6575061201b565b6120156040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b5061205a565b6120596040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b612060565b5b50612690565b60048351141561223257612078614e21565b60405180608001604052808560008151811061209057fe5b60200260200101518152602001856001815181106120aa57fe5b60200260200101518152602001856002815181106120c457fe5b60200260200101518152602001856003815181106120de57fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663dc3a2d8183838960016040518563ffffffff1660e01b81526004018084600460200280838360005b8381101561214657808201518184015260208101905061212b565b50505050905001838152602001821515815260200193505050506000604051808303818588803b15801561217957600080fd5b505af19350505050801561218b575060015b61222b57612197614ea5565b806121a257506121e7565b6121e16040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b50612226565b6122256040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b61222c565b5b5061268f565b60058351141561241857612244614e43565b6040518060a001604052808560008151811061225c57fe5b602002602001015181526020018560018151811061227657fe5b602002602001015181526020018560028151811061229057fe5b60200260200101518152602001856003815181106122aa57fe5b60200260200101518152602001856004815181106122c457fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663c25fd56583838960016040518563ffffffff1660e01b81526004018084600560200280838360005b8381101561232c578082015181840152602081019050612311565b50505050905001838152602001821515815260200193505050506000604051808303818588803b15801561235f57600080fd5b505af193505050508015612371575060015b6124115761237d614ea5565b8061238857506123cd565b6123c76040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b5061240c565b61240b6040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b612412565b5b5061268e565b6006835114156126185761242a614e65565b6040518060c001604052808560008151811061244257fe5b602002602001015181526020018560018151811061245c57fe5b602002602001015181526020018560028151811061247657fe5b602002602001015181526020018560038151811061249057fe5b60200260200101518152602001856004815181106124aa57fe5b60200260200101518152602001856005815181106124c457fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff166312b7ef1e83838960016040518563ffffffff1660e01b81526004018084600660200280838360005b8381101561252c578082015181840152602081019050612511565b50505050905001838152602001821515815260200193505050506000604051808303818588803b15801561255f57600080fd5b505af193505050508015612571575060015b6126115761257d614ea5565b8061258857506125cd565b6125c76040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e670000000000000000000081525082613a16565b5061260c565b61260b6040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e6700000000000000000000815250613ca9565b5b612612565b5b5061268d565b61268c6040518060400160405280601681526020017f6164644c6971756964697479556e6465726c79696e67000000000000000000008152506040518060400160405280601581526020017f696e76616c696420616d6f756e745b5d2073697a650000000000000000000000815250613a16565b5b5b5b5b5b61269b8a83614022565b9350505050979650505050505050565b60008060006126bc898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff166329ed2862898488886040518563ffffffff1660e01b8152600401808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200183600f0b8152602001828152602001945050505050600060405180830381600087803b15801561274457600080fd5b505af1925050508015612755575060015b6127f557612761614ea5565b8061276c57506127b1565b6127ab6040518060400160405280602081526020017f72656d6f76654c69717569646974794f6e65436f696e466163746f72795a617081525082613a16565b506127f0565b6127ef6040518060400160405280602081526020017f72656d6f76654c69717569646974794f6e65436f696e466163746f72795a6170815250613ca9565b5b6127f6565b5b61280289898984613ceb565b925050509695505050505050565b6000806000806128228b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff16633df02124828a8a878a6040518663ffffffff1660e01b81526004018085600f0b815260200184600f0b81526020018381526020018281526020019450505050506000604051808303818588803b15801561289957600080fd5b505af1935050505080156128ab575060015b61294b576128b7614ea5565b806128c25750612907565b6129016040518060400160405280600881526020017f65786368616e676500000000000000000000000000000000000000000000000081525082613a16565b50612946565b6129456040518060400160405280600881526020017f65786368616e6765000000000000000000000000000000000000000000000000815250613ca9565b5b61294c565b5b612956898361421b565b9350505050979650505050505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b60008181548110612a1d57fe5b906000526020600020016000915090505481565b6000806000612a42898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff1663517a55a383878760016040518563ffffffff1660e01b81526004018085815260200184600f0b81526020018381526020018215158152602001945050505050600060405180830381600087803b158015612ab757600080fd5b505af1925050508015612ac8575060015b612b6857612ad4614ea5565b80612adf5750612b24565b612b1e6040518060400160405280602081526020017f72656d6f76654c69717569646974794f6e65436f696e556e6465726c79696e6781525082613a16565b50612b63565b612b626040518060400160405280602081526020017f72656d6f76654c69717569646974794f6e65436f696e556e6465726c79696e67815250613ca9565b5b612b69565b5b612b7589898984613ceb565b925050509695505050505050565b60006060600080612c188b8b8b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508a8a80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050613e32565b925092509250600383511415612de357612c30614dff565b604051806060016040528085600081518110612c4857fe5b6020026020010151815260200185600181518110612c6257fe5b6020026020010151815260200185600281518110612c7c57fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663a3185179838d848a6040518563ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183600360200280838360005b83811015612cff578082015181840152602081019050612ce4565b5050505090500182815260200193505050506000604051808303818588803b158015612d2a57600080fd5b505af193505050508015612d3c575060015b612ddc57612d48614ea5565b80612d535750612d98565b612d926040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a61700000000000000000000081525082613a16565b50612dd7565b612dd66040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a617000000000000000000000815250613ca9565b5b612ddd565b5b50613446565b600483511415612fc257612df5614e21565b604051806080016040528085600081518110612e0d57fe5b6020026020010151815260200185600181518110612e2757fe5b6020026020010151815260200185600281518110612e4157fe5b6020026020010151815260200185600381518110612e5b57fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff1663384e03db838d848a6040518563ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183600460200280838360005b83811015612ede578082015181840152602081019050612ec3565b5050505090500182815260200193505050506000604051808303818588803b158015612f0957600080fd5b505af193505050508015612f1b575060015b612fbb57612f27614ea5565b80612f325750612f77565b612f716040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a61700000000000000000000081525082613a16565b50612fb6565b612fb56040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a617000000000000000000000815250613ca9565b5b612fbc565b5b50613445565b6005835114156131bb57612fd4614e43565b6040518060a0016040528085600081518110612fec57fe5b602002602001015181526020018560018151811061300657fe5b602002602001015181526020018560028151811061302057fe5b602002602001015181526020018560038151811061303a57fe5b602002602001015181526020018560048151811061305457fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16631b61222b838d848a6040518563ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183600560200280838360005b838110156130d75780820151818401526020810190506130bc565b5050505090500182815260200193505050506000604051808303818588803b15801561310257600080fd5b505af193505050508015613114575060015b6131b457613120614ea5565b8061312b5750613170565b61316a6040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a61700000000000000000000081525082613a16565b506131af565b6131ae6040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a617000000000000000000000815250613ca9565b5b6131b5565b5b50613444565b6006835114156133ce576131cd614e65565b6040518060c00160405280856000815181106131e557fe5b60200260200101518152602001856001815181106131ff57fe5b602002602001015181526020018560028151811061321957fe5b602002602001015181526020018560038151811061323357fe5b602002602001015181526020018560048151811061324d57fe5b602002602001015181526020018560058151811061326757fe5b602002602001015181525090508b73ffffffffffffffffffffffffffffffffffffffff16630dd95c5e838d848a6040518563ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff16815260200183600660200280838360005b838110156132ea5780820151818401526020810190506132cf565b5050505090500182815260200193505050506000604051808303818588803b15801561331557600080fd5b505af193505050508015613327575060015b6133c757613333614ea5565b8061333e5750613383565b61337d6040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a61700000000000000000000081525082613a16565b506133c2565b6133c16040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a617000000000000000000000815250613ca9565b5b6133c8565b5b50613443565b6134426040518060400160405280601681526020017f6164644c6971756964697479466163746f72795a6170000000000000000000008152506040518060400160405280601581526020017f696e76616c696420616d6f756e745b5d2073697a650000000000000000000000815250613a16565b5b5b5b5b6134508a83614022565b9350505050979650505050505050565b60606040518060400160405280600681526020017f4843757276650000000000000000000000000000000000000000000000000000815250905090565b60008060006134ae898989896139be565b915091508873ffffffffffffffffffffffffffffffffffffffff16638f15b6b583878760016040518563ffffffff1660e01b8152600401808581526020018481526020018381526020018215158152602001945050505050600060405180830381600087803b15801561352057600080fd5b505af1925050508015613531575060015b6135975761353d614ea5565b806135485750613570565b61356a604051806060016040528060278152602001614f5c6027913982613a16565b50613592565b613591604051806060016040528060278152602001614f5c60279139613ca9565b5b613598565b5b6135a489898984613ceb565b925050509695505050505050565b63c272291660e01b81565b6000806000806135cf8b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff1663394747c5828a8a878a60016040518763ffffffff1660e01b8152600401808681526020018581526020018481526020018381526020018215158152602001955050505050506000604051808303818588803b15801561364b57600080fd5b505af19350505050801561365d575060015b6136fd57613669614ea5565b8061367457506136b9565b6136b36040518060400160405280601481526020017f65786368616e676555696e74323536457468657200000000000000000000000081525082613a16565b506136f8565b6136f76040518060400160405280601481526020017f65786368616e676555696e743235364574686572000000000000000000000000815250613ca9565b5b6136fe565b5b613708898361421b565b9350505050979650505050505050565b60008060008061372a8b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff1663a6417ed6828a8a878a6040518663ffffffff1660e01b81526004018085600f0b815260200184600f0b81526020018381526020018281526020019450505050506000604051808303818588803b1580156137a157600080fd5b505af1935050505080156137b3575060015b613853576137bf614ea5565b806137ca575061380f565b6138096040518060400160405280601281526020017f65786368616e6765556e6465726c79696e67000000000000000000000000000081525082613a16565b5061384e565b61384d6040518060400160405280601281526020017f65786368616e6765556e6465726c79696e670000000000000000000000000000815250613ca9565b5b613854565b5b61385e898361421b565b9350505050979650505050505050565b6000806000806138808b8b8b8961416a565b9250925092508a73ffffffffffffffffffffffffffffffffffffffff16635b41b908828a8a878a6040518663ffffffff1660e01b8152600401808581526020018481526020018381526020018281526020019450505050506000604051808303818588803b1580156138f157600080fd5b505af193505050508015613903575060015b6139a35761390f614ea5565b8061391a575061395f565b6139596040518060400160405280600f81526020017f65786368616e676555696e74323536000000000000000000000000000000000081525082613a16565b5061399e565b61399d6040518060400160405280600f81526020017f65786368616e676555696e743235360000000000000000000000000000000000815250613ca9565b5b6139a4565b5b6139ae898361421b565b9350505050979650505050505050565b60008060006139ed857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614333565b90506139f98685614333565b9350613a06868886614496565b8381925092505094509492505050565b613a26613a2161457e565b6145bc565b613a2e613460565b83836040516020018085805190602001908083835b60208310613a665780518252602082019150602081019050602083039250613a43565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b60208310613adf5780518252602082019150602081019050602083039250613abc565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310613b585780518252602082019150602081019050602083039250613b35565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b60208310613bd15780518252602082019150602081019050602083039250613bae565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613c6e578082015181840152602081019050613c53565b50505050905090810190601f168015613c9b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b613ce8816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250613a16565b50565b6000613d198560008673ffffffffffffffffffffffffffffffffffffffff166147039092919063ffffffff16565b6000613d45847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614333565b9050828111613dc357613dc26040518060400160405280601c81526020017f5f72656d6f76654c69717569646974794f6e65436f696e4166746572000000008152506040518060400160405280600f81526020017f6166746572203c3d206265666f72650000000000000000000000000000000000815250613a16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614613e1457613e13846148c8565b5b613e2783826148df90919063ffffffff16565b915050949350505050565b606060008060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015613ea057600080fd5b505afa158015613eb4573d6000803e3d6000fd5b505050506040513d6020811015613eca57600080fd5b81019080805190602001909291905050509050600080600090505b865181101561400c576000878281518110613efc57fe5b60200260200101511415613f0f57613fff565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16888281518110613f4657fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415613f8557868181518110613f7657fe5b60200260200101519150613fff565b613fb5888281518110613f9457fe5b6020026020010151888381518110613fa857fe5b6020026020010151614333565b878281518110613fc157fe5b602002602001018181525050613ffe888281518110613fdc57fe5b60200260200101518b898481518110613ff157fe5b6020026020010151614496565b5b8080600101915050613ee5565b5085828294509450945050509450945094915050565b6000808373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561408c57600080fd5b505afa1580156140a0573d6000803e3d6000fd5b505050506040513d60208110156140b657600080fd5b81019080805190602001909291905050509050828111614145576141446040518060400160405280601281526020017f5f6164644c6971756964697479416674657200000000000000000000000000008152506040518060400160405280600f81526020017f6166746572203c3d206265666f72650000000000000000000000000000000000815250613a16565b5b61414e846148c8565b61416183826148df90919063ffffffff16565b91505092915050565b60008060006141798685614333565b935060006141a7867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614333565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614614202576141fd888a88614496565b614206565b8590505b85828294509450945050509450945094915050565b600080614248847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff614333565b90508281116142c6576142c56040518060400160405280600e81526020017f5f65786368616e676541667465720000000000000000000000000000000000008152506040518060400160405280600f81526020017f6166746572203c3d206265666f72650000000000000000000000000000000000815250613a16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161461431757614316846148c8565b5b61432a83826148df90919063ffffffff16565b91505092915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461436457819050614490565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614806143de575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b156143eb57479050614490565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561445257600080fd5b505afa158015614466573d6000803e3d6000fd5b505050506040513d602081101561447c57600080fd5b810190808051906020019092919050505090505b92915050565b8273ffffffffffffffffffffffffffffffffffffffff1663095ea7b383836040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561450757600080fd5b505af1925050508015614518575060015b614578576145488260008573ffffffffffffffffffffffffffffffffffffffff166147039092919063ffffffff16565b61457382828573ffffffffffffffffffffffffffffffffffffffff166147039092919063ffffffff16565b614579565b5b505050565b60006145b77ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161492990919063ffffffff16565b905090565b60606000821415614604576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506146fe565b6000808390505b600081111561462e578180600101925050600a818161462657fe5b04905061460b565b5060608167ffffffffffffffff8111801561464857600080fd5b506040519080825280601f01601f19166020018201604052801561467b5781602001600182028036833780820191505090505b50905060008290505b60008111156146f757600a858161469757fe5b0660300160f81b8260018303815181106146ad57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85816146e657fe5b049450808060019003915050614684565b5080925050505b919050565b60008114806147d1575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561479457600080fd5b505afa1580156147a8573d6000803e3d6000fd5b505050506040513d60208110156147be57600080fd5b8101908080519060200190929190505050145b614826576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526036815260200180614fd36036913960400191505060405180910390fd5b6148c38363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050614949565b505050565b6148dc816000614a3890919063ffffffff16565b50565b600061492183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250614a7d565b905092915050565b60008260008381526020019081526020016000205460001c905092915050565b60606149ab826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16614b3d9092919063ffffffff16565b9050600081511115614a33578080602001905160208110156149cc57600080fd5b8101908080519060200190929190505050614a32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180614fa9602a913960400191505060405180910390fd5b5b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b6000838311158290614b2a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614aef578082015181840152602081019050614ad4565b50505050905090810190601f168015614b1c5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6060614b4c8484600085614b55565b90509392505050565b606082471015614bb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401808060200182810382526026815260200180614f836026913960400191505060405180910390fd5b614bb985614cfe565b614c2b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310614c7b5780518252602082019150602081019050602083039250614c58565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114614cdd576040519150601f19603f3d011682016040523d82523d6000602084013e614ce2565b606091505b5091509150614cf2828286614d11565b92505050949350505050565b600080823b905060008111915050919050565b60608315614d2157829050614dd6565b600083511115614d345782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015614d9b578082015181840152602081019050614d80565b50505050905090810190601f168015614dc85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6040518060400160405280600290602082028036833780820191505090505090565b6040518060600160405280600390602082028036833780820191505090505090565b6040518060800160405280600490602082028036833780820191505090505090565b6040518060a00160405280600590602082028036833780820191505090505090565b6040518060c00160405280600690602082028036833780820191505090505090565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015614eb557614f58565b60046000803e614ec6600051614e98565b6308c379a08114614ed75750614f58565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715614f0357505050614f58565b808201805167ffffffffffffffff811115614f22575050505050614f58565b8060208301013d8501811115614f3d57505050505050614f58565b614f4682614e87565b60208401016040528296505050505050505b9056fe72656d6f76654c69717569646974794f6e65436f696e556e6465726c79696e6755696e74323536416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a2646970667358221220d9412a60f12e454826c8f280ff346a339b02c7ecff11fbad88a4a59acbec835a64736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addLiquidity(address,address,address[],uint256[],uint256)": {
        "notice": "Curve add liquidity"
      },
      "addLiquidityFactoryZap(address,address,address[],uint256[],uint256)": {
        "notice": "Curve add liquidity with factory zap"
      },
      "addLiquidityUnderlying(address,address,address[],uint256[],uint256)": {
        "notice": "Curve add liquidity with underlying true flag"
      },
      "exchange(address,address,address,int128,int128,uint256,uint256)": {
        "notice": "Curve exchange"
      },
      "exchangeUint256(address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Curve exchange with uint256 ij"
      },
      "exchangeUint256Ether(address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Curve exchange with uint256 ij and ether flag"
      },
      "exchangeUnderlying(address,address,address,int128,int128,uint256,uint256)": {
        "notice": "Curve exchange underlying"
      },
      "exchangeUnderlyingUint256(address,address,address,uint256,uint256,uint256,uint256)": {
        "notice": "Curve exchange underlying with uint256 ij"
      },
      "removeLiquidityOneCoin(address,address,address,uint256,int128,uint256)": {
        "notice": "Curve remove liquidity one coin"
      },
      "removeLiquidityOneCoinFactoryZap(address,address,address,uint256,int128,uint256)": {
        "notice": "Curve remove liquidity one coin with with factory zap"
      },
      "removeLiquidityOneCoinUint256(address,address,address,uint256,uint256,uint256)": {
        "notice": "Curve remove liquidity one coin with uint256 i"
      },
      "removeLiquidityOneCoinUnderlying(address,address,address,uint256,int128,uint256)": {
        "notice": "Curve remove liquidity one coin underlying"
      },
      "removeLiquidityOneCoinUnderlyingUint256(address,address,address,uint256,uint256,uint256)": {
        "notice": "Curve remove liquidity one coin underlying with uint256 i"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/curve/HCurve.sol:HCurve",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/curve/HCurve.sol:HCurve",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}