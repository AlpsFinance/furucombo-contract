{
  "address": "0xB91b37b0c01B84E3494ec8163136D4ed435Afc06",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "pools",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "week",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "balance",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct IMerkleRedeem.Claim[][]",
          "name": "claims",
          "type": "tuple[][]"
        }
      ],
      "name": "claimAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd200a1e082b1df4451b0eccd82983a8f8e367876b50ef6f93f1e4be1f539b945",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0xB91b37b0c01B84E3494ec8163136D4ed435Afc06",
    "transactionIndex": 0,
    "gasUsed": "1493601",
    "logsBloom": "0x
    "blockHash": "0xa91ce466261977d500acccb9247ba223d3ccec181914864965d803d06e1a18a5",
    "transactionHash": "0xd200a1e082b1df4451b0eccd82983a8f8e367876b50ef6f93f1e4be1f539b945",
    "logs": [],
    "blockNumber": 13356619,
    "cumulativeGasUsed": "1493601",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"pools\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"week\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IMerkleRedeem.Claim[][]\",\"name\":\"claims\",\"type\":\"tuple[][]\"}],\"name\":\"claimAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/furucombo/HFurucomboStaking.sol\":\"HFurucomboStaking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/furucombo/HFurucomboStaking.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"./IStaking.sol\\\";\\nimport \\\"./IMerkleRedeem.sol\\\";\\n\\ncontract HFurucomboStaking is HandlerBase {\\n    using SafeERC20 for IERC20;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HFurucomboStaking\\\";\\n    }\\n\\n    function stake(address pool, uint256 amount) external payable {\\n        IStaking staking = IStaking(pool);\\n        address stakeToken = staking.stakingToken();\\n        amount = _getBalance(stakeToken, amount);\\n        require(amount > 0, \\\"HFurucombo: stake amount = 0\\\");\\n\\n        IERC20(stakeToken).safeApprove(pool, amount);\\n        staking.stakeFor(_getSender(), amount);\\n        IERC20(stakeToken).safeApprove(pool, 0);\\n    }\\n\\n    function unstake(address pool, uint256 amount) external payable {\\n        require(amount > 0, \\\"HFurucombo: unstake amount = 0\\\");\\n        IStaking staking = IStaking(pool);\\n        staking.unstakeFor(_getSender(), amount);\\n\\n        // Update involved token\\n        _updateToken(staking.stakingToken());\\n    }\\n\\n    function claimAll(\\n        address user,\\n        address[] calldata pools,\\n        IMerkleRedeem.Claim[][] calldata claims\\n    ) external payable {\\n        require(claims.length > 0, \\\"HFurucombo: claims length = 0\\\");\\n        require(\\n            pools.length == claims.length,\\n            \\\"HFurucombo: pools length != claims length\\\"\\n        );\\n\\n        for (uint256 i = 0; i < claims.length; i++) {\\n            IMerkleRedeem redeem = IMerkleRedeem(pools[i]);\\n            redeem.claimWeeks(user, claims[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x657bf443da7fdd59bb204408bf79eb00f0653ee10f884c260e6d0452193681eb\"},\"contracts/handlers/furucombo/IMerkleRedeem.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IMerkleRedeem {\\n    struct Claim {\\n        uint256 week;\\n        uint256 balance;\\n        bytes32[] merkleProof;\\n    }\\n    function token() external view returns (address);\\n    function claimWeeks(address, Claim[] calldata) external;\\n}\\n\",\"keccak256\":\"0x90d2300a3bbad4333b0d6641585eaeb145b344fcdcfa42c8dce65678dfa7e4eb\"},\"contracts/handlers/furucombo/IStaking.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IMerkleRedeem.sol\\\";\\n\\ninterface IStaking {\\n    function stakingToken() external view returns (address);\\n    function redeemable() external view returns (address);\\n    function stakeFor(address, uint256) external;\\n    function unstakeFor(address, uint256) external;\\n    function claimWeeks(address, IMerkleRedeem.Claim[] calldata) external;\\n}\\n\",\"keccak256\":\"0x4eef383d2fc62a9c944c96d6dafcd0e2a0e6d0b71721a89fac6078dc360ff126\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a2a806100206000396000f3fe60806040526004361061009c5760003560e01c8063adc9772e11610064578063adc9772e1461017b578063c272291614610197578063c2a672e0146101a1578063dc9031c4146101bd578063f5f5ba72146101fa578063fa2901a5146102255761009c565b80630f532d18146100a15780631413dc7d146100cc5780632c420db3146100f757806387c139431461011357806399eb59b91461013e575b600080fd5b3480156100ad57600080fd5b506100b6610250565b6040516100c391906115e0565b60405180910390f35b3480156100d857600080fd5b506100e1610277565b6040516100ee91906115e0565b60405180910390f35b610111600480360381019061010c9190610eea565b61029e565b005b34801561011f57600080fd5b50610128610400565b6040516101359190611758565b60405180910390f35b34801561014a57600080fd5b5061016560048036038101906101609190610fd8565b61040c565b60405161017291906115e0565b60405180910390f35b61019560048036038101906101909190610f73565b610424565b005b61019f6105cb565b005b6101bb60048036038101906101b69190610f73565b610606565b005b3480156101c957600080fd5b506101e460048036038101906101df9190611001565b61074d565b6040516101f191906115e0565b60405180910390f35b34801561020657600080fd5b5061020f61076e565b60405161021c9190611616565b60405180910390f35b34801561023157600080fd5b5061023a6107ab565b60405161024791906115fb565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b600082829050116102e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102db90611638565b60405180910390fd5b81819050848490501461032c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032390611698565b60405180910390fd5b60005b828290508110156103f857600085858381811061034857fe5b905060200201602081019061035d9190610e98565b90508073ffffffffffffffffffffffffffffffffffffffff1663c804c39a8886868681811061038857fe5b905060200281019061039a9190611773565b6040518463ffffffff1660e01b81526004016103b893929190611585565b600060405180830381600087803b1580156103d257600080fd5b505af11580156103e6573d6000803e3d6000fd5b5050505050808060010191505061032f565b505050505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b600082905060008173ffffffffffffffffffffffffffffffffffffffff166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561047157600080fd5b505afa158015610485573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a99190610ec1565b90506104b581846107b6565b9250600083116104fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f190611658565b60405180910390fd5b61052584848373ffffffffffffffffffffffffffffffffffffffff166109009092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff16632ee40908610549610a5e565b856040518363ffffffff1660e01b81526004016105679291906115b7565b600060405180830381600087803b15801561058157600080fd5b505af1158015610595573d6000803e3d6000fd5b505050506105c58460008373ffffffffffffffffffffffffffffffffffffffff166109009092919063ffffffff16565b50505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105fd906116d8565b60405180910390fd5b60008111610649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064090611678565b60405180910390fd5b60008290508073ffffffffffffffffffffffffffffffffffffffff166336ef088c610672610a5e565b846040518363ffffffff1660e01b81526004016106909291906115b7565b600060405180830381600087803b1580156106aa57600080fd5b505af11580156106be573d6000803e3d6000fd5b505050506107488173ffffffffffffffffffffffffffffffffffffffff166372f702f36040518163ffffffff1660e01b815260040160206040518083038186803b15801561070b57600080fd5b505afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190610ec1565b610a9c565b505050565b6000818154811061075a57fe5b906000526020600020016000915090505481565b60606040518060400160405280601181526020017f4846757275636f6d626f5374616b696e67000000000000000000000000000000815250905090565b63c272291660e01b81565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82146107e7578190506108fa565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610861575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561086e574790506108fa565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108a79190611541565b60206040518083038186803b1580156108bf57600080fd5b505afa1580156108d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f7919061102a565b90505b92915050565b6000811480610999575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161094792919061155c565b60206040518083038186803b15801561095f57600080fd5b505afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610997919061102a565b145b6109d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cf90611738565b60405180910390fd5b610a598363095ea7b360e01b84846040516024016109f79291906115b7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610ab3565b505050565b6000610a977fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b6001610b7a90919063ffffffff16565b905090565b610ab0816000610b9a90919063ffffffff16565b50565b6060610b15826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610bdf9092919063ffffffff16565b9050600081511115610b755780806020019051810190610b359190610faf565b610b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6b90611718565b60405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b6060610bee8484600085610bf7565b90509392505050565b606082471015610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c33906116b8565b60405180910390fd5b610c4585610d0c565b610c84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7b906116f8565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051610cae919061152a565b60006040518083038185875af1925050503d8060008114610ceb576040519150601f19603f3d011682016040523d82523d6000602084013e610cf0565b606091505b5091509150610d00828286610d1f565b92505050949350505050565b600080823b905060008111915050919050565b60608315610d2f57829050610d7f565b600083511115610d425782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d769190611616565b60405180910390fd5b9392505050565b600081359050610d9581611998565b92915050565b600081519050610daa81611998565b92915050565b60008083601f840112610dc257600080fd5b8235905067ffffffffffffffff811115610ddb57600080fd5b602083019150836020820283011115610df357600080fd5b9250929050565b60008083601f840112610e0c57600080fd5b8235905067ffffffffffffffff811115610e2557600080fd5b602083019150836020820283011115610e3d57600080fd5b9250929050565b600081519050610e53816119af565b92915050565b600081359050610e68816119c6565b92915050565b600081359050610e7d816119dd565b92915050565b600081519050610e92816119dd565b92915050565b600060208284031215610eaa57600080fd5b6000610eb884828501610d86565b91505092915050565b600060208284031215610ed357600080fd5b6000610ee184828501610d9b565b91505092915050565b600080600080600060608688031215610f0257600080fd5b6000610f1088828901610d86565b955050602086013567ffffffffffffffff811115610f2d57600080fd5b610f3988828901610db0565b9450945050604086013567ffffffffffffffff811115610f5857600080fd5b610f6488828901610dfa565b92509250509295509295909350565b60008060408385031215610f8657600080fd5b6000610f9485828601610d86565b9250506020610fa585828601610e6e565b9150509250929050565b600060208284031215610fc157600080fd5b6000610fcf84828501610e44565b91505092915050565b600060208284031215610fea57600080fd5b6000610ff884828501610e59565b91505092915050565b60006020828403121561101357600080fd5b600061102184828501610e6e565b91505092915050565b60006020828403121561103c57600080fd5b600061104a84828501610e83565b91505092915050565b600061105f83836114a2565b905092915050565b611070816118c7565b82525050565b600061108283856117f7565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156110b157600080fd5b6020830292506110c2838584611945565b82840190509392505050565b60006110da8385611808565b9350836020840285016110ec846117ca565b8060005b87811015611130578484038952611107828461188c565b6111118582611053565b945061111c836117ea565b925060208a019950506001810190506110f0565b50829750879450505050509392505050565b61114b816118e5565b82525050565b61115a816118ef565b82525050565b600061116b826117d4565b6111758185611819565b9350611185818560208601611954565b80840191505092915050565b600061119c826117df565b6111a68185611824565b93506111b6818560208601611954565b6111bf81611987565b840191505092915050565b60006111d7601d83611824565b91507f4846757275636f6d626f3a20636c61696d73206c656e677468203d20300000006000830152602082019050919050565b6000611217601c83611824565b91507f4846757275636f6d626f3a207374616b6520616d6f756e74203d2030000000006000830152602082019050919050565b6000611257601e83611824565b91507f4846757275636f6d626f3a20756e7374616b6520616d6f756e74203d203000006000830152602082019050919050565b6000611297602983611824565b91507f4846757275636f6d626f3a20706f6f6c73206c656e67746820213d20636c616960008301527f6d73206c656e67746800000000000000000000000000000000000000000000006020830152604082019050919050565b60006112fd602683611824565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000611363601483611824565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b60006113a3601d83611824565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006113e3602a83611824565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000611449603683611824565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b6000606083016114b560008401846118b0565b6114c2600086018261150c565b506114d060208401846118b0565b6114dd602086018261150c565b506114eb6040840184611835565b85830360408701526114fe838284611076565b925050508091505092915050565b6115158161193b565b82525050565b6115248161193b565b82525050565b60006115368284611160565b915081905092915050565b60006020820190506115566000830184611067565b92915050565b60006040820190506115716000830185611067565b61157e6020830184611067565b9392505050565b600060408201905061159a6000830186611067565b81810360208301526115ad8184866110ce565b9050949350505050565b60006040820190506115cc6000830185611067565b6115d9602083018461151b565b9392505050565b60006020820190506115f56000830184611142565b92915050565b60006020820190506116106000830184611151565b92915050565b600060208201905081810360008301526116308184611191565b905092915050565b60006020820190508181036000830152611651816111ca565b9050919050565b600060208201905081810360008301526116718161120a565b9050919050565b600060208201905081810360008301526116918161124a565b9050919050565b600060208201905081810360008301526116b18161128a565b9050919050565b600060208201905081810360008301526116d1816112f0565b9050919050565b600060208201905081810360008301526116f181611356565b9050919050565b6000602082019050818103600083015261171181611396565b9050919050565b60006020820190508181036000830152611731816113d6565b9050919050565b600060208201905081810360008301526117518161143c565b9050919050565b600060208201905061176d600083018461151b565b92915050565b6000808335600160200384360303811261178c57600080fd5b80840192508235915067ffffffffffffffff8211156117aa57600080fd5b6020830192506020820236038313156117c257600080fd5b509250929050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000808335600160200384360303811261184e57600080fd5b83810192508235915060208301925067ffffffffffffffff82111561187257600080fd5b60208202360384131561188457600080fd5b509250929050565b6000823560016060038336030381126118a457600080fd5b82810191505092915050565b60006118bf6020840184610e6e565b905092915050565b60006118d28261191b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015611972578082015181840152602081019050611957565b83811115611981576000848401525b50505050565b6000601f19601f8301169050919050565b6119a1816118c7565b81146119ac57600080fd5b50565b6119b8816118d9565b81146119c357600080fd5b50565b6119cf816118e5565b81146119da57600080fd5b50565b6119e68161193b565b81146119f157600080fd5b5056fea26469706673582212203fd13c4603189998cca97fab23e8ecb860b6e740d4cc13d02d8b2ca64f7131f364736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/furucombo/HFurucomboStaking.sol:HFurucomboStaking",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/furucombo/HFurucomboStaking.sol:HFurucomboStaking",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}