{
  "address": "0xA9ae8b7D570a16EAcFA7Ba667A89DC4F871fdBb1",
  "abi": [
    {
      "inputs": [],
      "name": "CHAIN_LOG",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DAI_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "draw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "freeETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "freeGem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCdpManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMcdJug",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProxyActions",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "openLockETHAndDraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "ilk",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "wadC",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wadD",
          "type": "uint256"
        }
      ],
      "name": "openLockGemAndDraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ethJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "safeLockETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gemJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "safeLockGem",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wad",
          "type": "uint256"
        }
      ],
      "name": "wipe",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "daiJoin",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cdp",
          "type": "uint256"
        }
      ],
      "name": "wipeAll",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6dd2ffbf6456ce918e3807f1982549310c36b8c3fbfbdaccad044e2622bdc251",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0xA9ae8b7D570a16EAcFA7Ba667A89DC4F871fdBb1",
    "transactionIndex": 0,
    "gasUsed": "3813649",
    "logsBloom": "0x
    "blockHash": "0x4530e3939ccf8e80c7c7f171243768a0e980379497ad0792153b3ad7256fe146",
    "transactionHash": "0x6dd2ffbf6456ce918e3807f1982549310c36b8c3fbfbdaccad044e2622bdc251",
    "logs": [],
    "blockNumber": 13356594,
    "cumulativeGasUsed": "3813649",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CHAIN_LOG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DAI_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"draw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"freeETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"freeGem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCdpManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMcdJug\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProxyActions\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockETHAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"wadC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wadD\",\"type\":\"uint256\"}],\"name\":\"openLockGemAndDraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ethJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"safeLockETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gemJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"safeLockGem\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"wipe\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"daiJoin\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cdp\",\"type\":\"uint256\"}],\"name\":\"wipeAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/maker/HMaker.sol\":\"HMaker\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/maker/HMaker.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./IDSProxy.sol\\\";\\nimport \\\"./IMaker.sol\\\";\\nimport \\\"../HandlerBase.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract HMaker is HandlerBase {\\n    using SafeERC20 for IERC20;\\n\\n    // prettier-ignore\\n    address public constant PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\\n    // prettier-ignore\\n    address public constant DAI_TOKEN = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    // prettier-ignore\\n    address public constant CHAIN_LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\\n\\n    modifier cdpAllowed(uint256 cdp) {\\n        IMakerManager manager = IMakerManager(getCdpManager());\\n        address owner = manager.owns(cdp);\\n        address sender = _getSender();\\n        if (\\n            IDSProxyRegistry(PROXY_REGISTRY).proxies(sender) != owner &&\\n            manager.cdpCan(owner, cdp, sender) != 1\\n        ) _revertMsg(\\\"General\\\", \\\"Unauthorized sender of cdp\\\");\\n        _;\\n    }\\n\\n    function getContractName()\\n        public\\n        pure\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        return \\\"HMaker\\\";\\n    }\\n\\n    function getProxyActions() public pure virtual returns (address) {\\n        return 0x82ecD135Dce65Fbc6DbdD0e4237E0AF93FFD5038;\\n    }\\n\\n    function getCdpManager() public pure virtual returns (address) {\\n        return 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\\n    }\\n\\n    function getMcdJug() public view returns (address) {\\n        return IMakerChainLog(CHAIN_LOG).getAddress(\\\"MCD_JUG\\\");\\n    }\\n\\n    function openLockETHAndDraw(\\n        uint256 value,\\n        address ethJoin,\\n        address daiJoin,\\n        bytes32 ilk,\\n        uint256 wadD\\n    ) external payable returns (uint256 cdp) {\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        // if amount == uint256(-1) return balance of Proxy\\n        value = _getBalance(address(0), value);\\n\\n        try\\n            proxy.execute.value(value)(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"openLockETHAndDraw(address,address,address,address,bytes32,uint256)\\\"\\n                    0xe685cc04,\\n                    getCdpManager(),\\n                    getMcdJug(),\\n                    ethJoin,\\n                    daiJoin,\\n                    ilk,\\n                    wadD\\n                )\\n            )\\n        returns (bytes32 ret) {\\n            cdp = uint256(ret);\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"openLockETHAndDraw\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"openLockETHAndDraw\\\");\\n        }\\n\\n        // Update post process\\n        bytes32[] memory params = new bytes32[](1);\\n        params[0] = bytes32(cdp);\\n        _updatePostProcess(params);\\n    }\\n\\n    function openLockGemAndDraw(\\n        address gemJoin,\\n        address daiJoin,\\n        bytes32 ilk,\\n        uint256 wadC,\\n        uint256 wadD\\n    ) external payable returns (uint256 cdp) {\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        address token = IMakerGemJoin(gemJoin).gem();\\n\\n        // if amount == uint256(-1) return balance of Proxy\\n        wadC = _getBalance(token, wadC);\\n\\n        IERC20(token).safeApprove(address(proxy), wadC);\\n        try\\n            proxy.execute(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"openLockGemAndDraw(address,address,address,address,bytes32,uint256,uint256,bool)\\\"\\n                    0xdb802a32,\\n                    getCdpManager(),\\n                    getMcdJug(),\\n                    gemJoin,\\n                    daiJoin,\\n                    ilk,\\n                    wadC,\\n                    wadD,\\n                    true\\n                )\\n            )\\n        returns (bytes32 ret) {\\n            cdp = uint256(ret);\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"openLockGemAndDraw\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"openLockGemAndDraw\\\");\\n        }\\n        IERC20(token).safeApprove(address(proxy), 0);\\n\\n        // Update post process\\n        bytes32[] memory params = new bytes32[](1);\\n        params[0] = bytes32(cdp);\\n        _updatePostProcess(params);\\n    }\\n\\n    function safeLockETH(\\n        uint256 value,\\n        address ethJoin,\\n        uint256 cdp\\n    ) external payable {\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        address owner = _getProxy(_getSender());\\n        // if amount == uint256(-1) return balance of Proxy\\n        value = _getBalance(address(0), value);\\n\\n        try\\n            proxy.execute.value(value)(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"safeLockETH(address,address,uint256,address)\\\"\\n                    0xee284576,\\n                    getCdpManager(),\\n                    ethJoin,\\n                    cdp,\\n                    owner\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"safeLockETH\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"safeLockETH\\\");\\n        }\\n    }\\n\\n    function safeLockGem(\\n        address gemJoin,\\n        uint256 cdp,\\n        uint256 wad\\n    ) external payable {\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        address owner = _getProxy(_getSender());\\n        address token = IMakerGemJoin(gemJoin).gem();\\n        // if amount == uint256(-1) return balance of Proxy\\n        wad = _getBalance(token, wad);\\n        IERC20(token).safeApprove(address(proxy), wad);\\n        try\\n            proxy.execute(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"safeLockGem(address,address,uint256,uint256,bool,address)\\\"\\n                    0xead64729,\\n                    getCdpManager(),\\n                    gemJoin,\\n                    cdp,\\n                    wad,\\n                    true,\\n                    owner\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"safeLockGem\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"safeLockGem\\\");\\n        }\\n        IERC20(token).safeApprove(address(proxy), 0);\\n    }\\n\\n    function freeETH(\\n        address ethJoin,\\n        uint256 cdp,\\n        uint256 wad\\n    ) external payable cdpAllowed(cdp) {\\n        // Check msg.sender authority\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        try\\n            proxy.execute(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"freeETH(address,address,uint256,uint256)\\\"\\n                    0x7b5a3b43,\\n                    getCdpManager(),\\n                    ethJoin,\\n                    cdp,\\n                    wad\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"freeETH\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"freeETH\\\");\\n        }\\n    }\\n\\n    function freeGem(\\n        address gemJoin,\\n        uint256 cdp,\\n        uint256 wad\\n    ) external payable cdpAllowed(cdp) {\\n        // Check msg.sender authority\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        address token = IMakerGemJoin(gemJoin).gem();\\n        try\\n            proxy.execute(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"freeGem(address,address,uint256,uint256)\\\"\\n                    0x6ab6a491,\\n                    getCdpManager(),\\n                    gemJoin,\\n                    cdp,\\n                    wad\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"freeGem\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"freeGem\\\");\\n        }\\n\\n        // Update post process\\n        _updateToken(token);\\n    }\\n\\n    function draw(\\n        address daiJoin,\\n        uint256 cdp,\\n        uint256 wad\\n    ) external payable cdpAllowed(cdp) {\\n        // Check msg.sender authority\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        try\\n            proxy.execute(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"draw(address,address,address,uint256,uint256)\\\"\\n                    0x9f6f3d5b,\\n                    getCdpManager(),\\n                    getMcdJug(),\\n                    daiJoin,\\n                    cdp,\\n                    wad\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"draw\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"draw\\\");\\n        }\\n\\n        // Update post process\\n        _updateToken(DAI_TOKEN);\\n    }\\n\\n    function wipe(\\n        address daiJoin,\\n        uint256 cdp,\\n        uint256 wad\\n    ) external payable {\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        IERC20(DAI_TOKEN).safeApprove(address(proxy), wad);\\n        try\\n            proxy.execute(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"wipe(address,address,uint256,uint256)\\\"\\n                    0x4b666199,\\n                    getCdpManager(),\\n                    daiJoin,\\n                    cdp,\\n                    wad\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"wipe\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"wipe\\\");\\n        }\\n        IERC20(DAI_TOKEN).safeApprove(address(proxy), 0);\\n    }\\n\\n    function wipeAll(address daiJoin, uint256 cdp) external payable {\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        IERC20(DAI_TOKEN).safeApprove(address(proxy), uint256(-1));\\n        try\\n            proxy.execute(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"wipeAll(address,address,uint256)\\\"\\n                    0x036a2395,\\n                    getCdpManager(),\\n                    daiJoin,\\n                    cdp\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"wipeAll\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"wipeAll\\\");\\n        }\\n        IERC20(DAI_TOKEN).safeApprove(address(proxy), 0);\\n    }\\n\\n    function postProcess() external payable override {\\n        bytes4 sig = stack.getSig();\\n        // selector of openLockETHAndDraw(uint256,address,address,bytes32,uint256)\\n        // and openLockGemAndDraw(address,address,bytes32,uint256,uint256)\\n        if (sig == 0x5481e4a4 || sig == 0x73af24e7) {\\n            _transferCdp(uint256(stack.get()));\\n            uint256 amount = IERC20(DAI_TOKEN).balanceOf(address(this));\\n            if (amount > 0)\\n                IERC20(DAI_TOKEN).safeTransfer(_getSender(), amount);\\n        } else revert(\\\"Invalid post process\\\");\\n    }\\n\\n    function _getProxy(address user) internal returns (address) {\\n        return IDSProxyRegistry(PROXY_REGISTRY).proxies(user);\\n    }\\n\\n    function _transferCdp(uint256 cdp) internal {\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        try\\n            proxy.execute(\\n                getProxyActions(),\\n                abi.encodeWithSelector(\\n                    // selector of \\\"giveToProxy(address,address,uint256,address)\\\"\\n                    0x493c2049,\\n                    PROXY_REGISTRY,\\n                    getCdpManager(),\\n                    cdp,\\n                    _getSender()\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"_transferCdp\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"_transferCdp\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x253b182b1b9df8b730d950c65707acd9675f5532971532590c95c4d0a335996b\"},\"contracts/handlers/maker/IDSProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IDSProxy {\\n    function execute(address _target, bytes calldata _data) external payable returns (bytes32 response);\\n    function owner() external view returns (address);\\n    function setAuthority(address authority_) external;\\n}\\n\\ninterface IDSProxyFactory {\\n    function isProxy(address proxy) external view returns (bool);\\n    function build() external returns (address);\\n    function build(address owner) external returns (address);\\n}\\n\\ninterface IDSProxyRegistry {\\n    function proxies(address input) external view returns (address);\\n    function build() external returns (address);\\n    function build(address owner) external returns (address);\\n}\\n\",\"keccak256\":\"0xa48fa308aae7ac9194c8fa839cf4e389f05ec214f25f0e415de8b72b658405e9\"},\"contracts/handlers/maker/IMaker.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IMakerManager {\\n    function cdpCan(address, uint, address) external view returns (uint);\\n    function ilks(uint) external view returns (bytes32);\\n    function owns(uint) external view returns (address);\\n    function urns(uint) external view returns (address);\\n    function vat() external view returns (address);\\n    function open(bytes32, address) external returns (uint);\\n    function give(uint, address) external;\\n    function cdpAllow(uint, address, uint) external;\\n    function urnAllow(address, uint) external;\\n    function frob(uint, int, int) external;\\n    function flux(uint, address, uint) external;\\n    function move(uint, address, uint) external;\\n    function exit(address, uint, address, uint) external;\\n    function quit(uint, address) external;\\n    function enter(address, uint) external;\\n    function shift(uint, uint) external;\\n\\n    function count(address) external view returns (uint256);\\n    function first(address) external view returns (uint256);\\n    function last(address) external view returns (uint256);\\n}\\n\\ninterface IMakerVat {\\n    function can(address, address) external view returns (uint);\\n    function ilks(bytes32) external view returns (uint, uint, uint, uint, uint);\\n    function dai(address) external view returns (uint);\\n    function urns(bytes32, address) external view returns (uint, uint);\\n    function frob(bytes32, address, address, address, int, int) external;\\n    function hope(address) external;\\n    function move(address, address, uint) external;\\n}\\n\\ninterface IMakerGemJoin {\\n    function dec() external view returns (uint);\\n    function gem() external view returns (address);\\n    function join(address, uint) external payable;\\n    function exit(address, uint) external;\\n}\\n\\ninterface IMakerChainLog {\\n    function getAddress(bytes32) external view returns (address);\\n}\\n\",\"keccak256\":\"0x8d9f51015e07e587f5e5396599dcc8bf0462cfd7cb8881ff7de6a931857685ba\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614437806100206000396000f3fe60806040526004361061013f5760003560e01c8063895e4990116100b6578063e606df871161006f578063e606df871461064b578063f07ab7be1461068c578063f5f5ba72146106e4578063f659659014610774578063fa2901a5146107cc578063fe285fd5146108165761013f565b8063895e4990146104c957806399eb59b91461050a578063b98d24b014610559578063c27229161461059a578063c3b6cb4b146105a4578063dc9031c4146105fc5761013f565b80635481e4a4116101085780635481e4a41461027457806363d070a51461030a5780636ddb4566146103625780637031b517146103b057806373af24e71461040857806387c139431461049e5761013f565b8062e28c52146101445780630f532d18146101855780631413dc7d146101b05780632537e4b5146101db5780634bbc298714610233575b600080fd5b34801561015057600080fd5b50610159610857565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019157600080fd5b5061019a61091e565b6040518082815260200191505060405180910390f35b3480156101bc57600080fd5b506101c5610945565b6040518082815260200191505060405180910390f35b610231600480360360608110156101f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061096c565b005b34801561023f57600080fd5b50610248610eb3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102f4600480360360a081101561028a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610ecb565b6040518082815260200191505060405180910390f35b6103606004803603606081101561032057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611201565b005b6103ae6004803603604081101561037857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061158f565b005b610406600480360360608110156103c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061188c565b005b610488600480360360a081101561041e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611e62565b6040518082815260200191505060405180910390f35b3480156104aa57600080fd5b506104b3612286565b6040518082815260200191505060405180910390f35b3480156104d557600080fd5b506104de612292565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561051657600080fd5b506105436004803603602081101561052d57600080fd5b81019080803590602001909291905050506122aa565b6040518082815260200191505060405180910390f35b34801561056557600080fd5b5061056e6122c2565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105a26122de565b005b6105fa600480360360608110156105ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506124e0565b005b34801561060857600080fd5b506106356004803603602081101561061f57600080fd5b81019080803590602001909291905050506127c6565b6040518082815260200191505060405180910390f35b34801561065757600080fd5b506106606127e7565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106e2600480360360608110156106a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506127ff565b005b3480156106f057600080fd5b506106f9612d88565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561073957808201518184015260208101905061071e565b50505050905090810190601f1680156107665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107ca6004803603606081101561078a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612dc5565b005b3480156107d857600080fd5b506107e1613065565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561082257600080fd5b5061082b613070565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600073da0ab1e0017debcd72be8599041a2aa3ba7e740f73ffffffffffffffffffffffffffffffffffffffff166321f8a7216040518163ffffffff1660e01b815260040180807f4d43445f4a554700000000000000000000000000000000000000000000000000815250602001905060206040518083038186803b1580156108de57600080fd5b505afa1580156108f2573d6000803e3d6000fd5b505050506040513d602081101561090857600080fd5b8101908080519060200190929190505050905090565b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b816000610977613070565b905060008173ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156109cc57600080fd5b505afa1580156109e0573d6000803e3d6000fd5b505050506040513d60208110156109f657600080fd5b810190808051906020019092919050505090506000610a1361308c565b90508173ffffffffffffffffffffffffffffffffffffffff16734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610aa757600080fd5b505afa158015610abb573d6000803e3d6000fd5b505050506040513d6020811015610ad157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614158015610bce575060018373ffffffffffffffffffffffffffffffffffffffff16635aebb4608487856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015610b9057600080fd5b505afa158015610ba4573d6000803e3d6000fd5b505050506040513d6020811015610bba57600080fd5b810190808051906020019092919050505014155b15610c4857610c476040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601a81526020017f556e617574686f72697a65642073656e646572206f66206364700000000000008152506130ca565b5b6000610c533061335d565b90508073ffffffffffffffffffffffffffffffffffffffff16631cff79cd610c796122c2565b637b5a3b43610c86613070565b8c8c8c604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d86578082015181840152602081019050610d6b565b50505050905090810190601f168015610db35780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610dd357600080fd5b505af1925050508015610e0757506040513d6020811015610df357600080fd5b810190808051906020019092919050505060015b610ea757610e136142c5565b80610e1e5750610e63565b610e5d6040518060400160405280600781526020017f6672656545544800000000000000000000000000000000000000000000000000815250826130ca565b50610ea2565b610ea16040518060400160405280600781526020017f667265654554480000000000000000000000000000000000000000000000000081525061341c565b5b610ea9565b505b5050505050505050565b734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe481565b600080610ed73061335d565b9050610ee460008861345e565b96508073ffffffffffffffffffffffffffffffffffffffff16631cff79cd88610f0b6122c2565b63e685cc04610f18613070565b610f20610857565b8c8c8c8c604051602401808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200196505050505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561105b578082015181840152602081019050611040565b50505050905090810190601f1680156110885780820380516001836020036101000a031916815260200191505b5093505050506020604051808303818588803b1580156110a757600080fd5b505af1935050505080156110dc57506040513d60208110156110c857600080fd5b810190808051906020019092919050505060015b61117c576110e86142c5565b806110f35750611138565b6111326040518060400160405280601281526020017f6f70656e4c6f636b455448416e64447261770000000000000000000000000000815250826130ca565b50611177565b6111766040518060400160405280601281526020017f6f70656e4c6f636b455448416e6444726177000000000000000000000000000081525061341c565b5b611184565b8060001c9250505b6060600167ffffffffffffffff8111801561119e57600080fd5b506040519080825280602002602001820160405280156111cd5781602001602082028036833780820191505090505b5090508260001b816000815181106111e157fe5b6020026020010181815250506111f6816135c1565b505095945050505050565b600061120c3061335d565b9050600061122061121b61308c565b61335d565b905060008573ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d602081101561129457600080fd5b810190808051906020019092919050505090506112b1818561345e565b93506112de83858373ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff16631cff79cd6113026122c2565b63ead6472961130f613070565b8a8a8a60018a604051602401808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183151581526020018273ffffffffffffffffffffffffffffffffffffffff16815260200196505050505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561143857808201518184015260208101905061141d565b50505050905090810190601f1680156114655780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561148557600080fd5b505af19250505080156114b957506040513d60208110156114a557600080fd5b810190808051906020019092919050505060015b611559576114c56142c5565b806114d05750611515565b61150f6040518060400160405280600b81526020017f736166654c6f636b47656d000000000000000000000000000000000000000000815250826130ca565b50611554565b6115536040518060400160405280600b81526020017f736166654c6f636b47656d00000000000000000000000000000000000000000081525061341c565b5b61155b565b505b6115878360008373ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b505050505050565b600061159a3061335d565b90506115fb817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff16631cff79cd61161f6122c2565b63036a239561162c613070565b8787604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611724578082015181840152602081019050611709565b50505050905090810190601f1680156117515780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561177157600080fd5b505af19250505080156117a557506040513d602081101561179157600080fd5b810190808051906020019092919050505060015b611845576117b16142c5565b806117bc5750611801565b6117fb6040518060400160405280600781526020017f77697065416c6c00000000000000000000000000000000000000000000000000815250826130ca565b50611840565b61183f6040518060400160405280600781526020017f77697065416c6c0000000000000000000000000000000000000000000000000081525061341c565b5b611847565b505b611887816000736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b505050565b816000611897613070565b905060008173ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156118ec57600080fd5b505afa158015611900573d6000803e3d6000fd5b505050506040513d602081101561191657600080fd5b81019080805190602001909291905050509050600061193361308c565b90508173ffffffffffffffffffffffffffffffffffffffff16734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156119c757600080fd5b505afa1580156119db573d6000803e3d6000fd5b505050506040513d60208110156119f157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614158015611aee575060018373ffffffffffffffffffffffffffffffffffffffff16635aebb4608487856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015611ab057600080fd5b505afa158015611ac4573d6000803e3d6000fd5b505050506040513d6020811015611ada57600080fd5b810190808051906020019092919050505014155b15611b6857611b676040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601a81526020017f556e617574686f72697a65642073656e646572206f66206364700000000000008152506130ca565b5b6000611b733061335d565b905060008873ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbd57600080fd5b505afa158015611bd1573d6000803e3d6000fd5b505050506040513d6020811015611be757600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff16631cff79cd611c1e6122c2565b636ab6a491611c2b613070565b8d8d8d604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d2b578082015181840152602081019050611d10565b50505050905090810190601f168015611d585780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611d7857600080fd5b505af1925050508015611dac57506040513d6020811015611d9857600080fd5b810190808051906020019092919050505060015b611e4c57611db86142c5565b80611dc35750611e08565b611e026040518060400160405280600781526020017f6672656547656d00000000000000000000000000000000000000000000000000815250826130ca565b50611e47565b611e466040518060400160405280600781526020017f6672656547656d0000000000000000000000000000000000000000000000000081525061341c565b5b611e4e565b505b611e578161383e565b505050505050505050565b600080611e6e3061335d565b905060008773ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb857600080fd5b505afa158015611ecc573d6000803e3d6000fd5b505050506040513d6020811015611ee257600080fd5b81019080805190602001909291905050509050611eff818661345e565b9450611f2c82868373ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff16631cff79cd611f506122c2565b63db802a32611f5d613070565b611f65610857565b8d8d8d8d8d6001604051602401808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018215158152602001985050505050505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156120b3578082015181840152602081019050612098565b50505050905090810190601f1680156120e05780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561210057600080fd5b505af192505050801561213457506040513d602081101561212057600080fd5b810190808051906020019092919050505060015b6121d4576121406142c5565b8061214b5750612190565b61218a6040518060400160405280601281526020017f6f70656e4c6f636b47656d416e64447261770000000000000000000000000000815250826130ca565b506121cf565b6121ce6040518060400160405280601281526020017f6f70656e4c6f636b47656d416e6444726177000000000000000000000000000081525061341c565b5b6121dc565b8060001c9350505b6122088260008373ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b6060600167ffffffffffffffff8111801561222257600080fd5b506040519080825280602002602001820160405280156122515781602001602082028036833780820191505090505b5090508360001b8160008151811061226557fe5b60200260200101818152505061227a816135c1565b50505095945050505050565b670de0b6b3a764000081565b73da0ab1e0017debcd72be8599041a2aa3ba7e740f81565b60016020528060005260406000206000915090505481565b60007382ecd135dce65fbc6dbdd0e4237e0af93ffd5038905090565b60006122ea6000613855565b9050635481e4a460e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061234557506373af24e760e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561246f5761235f6123576000613887565b60001c6138b9565b6000736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156123dc57600080fd5b505afa1580156123f0573d6000803e3d6000fd5b505050506040513d602081101561240657600080fd5b8101908080519060200190929190505050905060008111156124695761246861242d61308c565b82736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff16613b4f9092919063ffffffff16565b5b506124dd565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b50565b60006124eb3061335d565b905061252c8183736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff16631cff79cd6125506122c2565b634b66619961255d613070565b888888604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561265d578082015181840152602081019050612642565b50505050905090810190601f16801561268a5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156126aa57600080fd5b505af19250505080156126de57506040513d60208110156126ca57600080fd5b810190808051906020019092919050505060015b61277e576126ea6142c5565b806126f5575061273a565b6127346040518060400160405280600481526020017f7769706500000000000000000000000000000000000000000000000000000000815250826130ca565b50612779565b6127786040518060400160405280600481526020017f776970650000000000000000000000000000000000000000000000000000000081525061341c565b5b612780565b505b6127c0816000736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b50505050565b600081815481106127d357fe5b906000526020600020016000915090505481565b736b175474e89094c44da98b954eedeac495271d0f81565b81600061280a613070565b905060008173ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561285f57600080fd5b505afa158015612873573d6000803e3d6000fd5b505050506040513d602081101561288957600080fd5b8101908080519060200190929190505050905060006128a661308c565b90508173ffffffffffffffffffffffffffffffffffffffff16734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561293a57600080fd5b505afa15801561294e573d6000803e3d6000fd5b505050506040513d602081101561296457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614158015612a61575060018373ffffffffffffffffffffffffffffffffffffffff16635aebb4608487856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015612a2357600080fd5b505afa158015612a37573d6000803e3d6000fd5b505050506040513d6020811015612a4d57600080fd5b810190808051906020019092919050505014155b15612adb57612ada6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601a81526020017f556e617574686f72697a65642073656e646572206f66206364700000000000008152506130ca565b5b6000612ae63061335d565b90508073ffffffffffffffffffffffffffffffffffffffff16631cff79cd612b0c6122c2565b639f6f3d5b612b19613070565b612b21610857565b8d8d8d604051602401808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001955050505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612c3e578082015181840152602081019050612c23565b50505050905090810190601f168015612c6b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612c8b57600080fd5b505af1925050508015612cbf57506040513d6020811015612cab57600080fd5b810190808051906020019092919050505060015b612d5f57612ccb6142c5565b80612cd65750612d1b565b612d156040518060400160405280600481526020017f6472617700000000000000000000000000000000000000000000000000000000815250826130ca565b50612d5a565b612d596040518060400160405280600481526020017f647261770000000000000000000000000000000000000000000000000000000081525061341c565b5b612d61565b505b612d7e736b175474e89094c44da98b954eedeac495271d0f61383e565b5050505050505050565b60606040518060400160405280600681526020017f484d616b65720000000000000000000000000000000000000000000000000000815250905090565b6000612dd03061335d565b90506000612de4612ddf61308c565b61335d565b9050612df160008661345e565b94508173ffffffffffffffffffffffffffffffffffffffff16631cff79cd86612e186122c2565b63ee284576612e25613070565b898988604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f3b578082015181840152602081019050612f20565b50505050905090810190601f168015612f685780820380516001836020036101000a031916815260200191505b5093505050506020604051808303818588803b158015612f8757600080fd5b505af193505050508015612fbc57506040513d6020811015612fa857600080fd5b810190808051906020019092919050505060015b61305c57612fc86142c5565b80612fd35750613018565b6130126040518060400160405280600b81526020017f736166654c6f636b455448000000000000000000000000000000000000000000815250826130ca565b50613057565b6130566040518060400160405280600b81526020017f736166654c6f636b45544800000000000000000000000000000000000000000081525061341c565b5b61305e565b505b5050505050565b63c272291660e01b81565b6000735ef30b9986345249bc32d8928b7ee64de9435e39905090565b60006130c57fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b6001613bf190919063ffffffff16565b905090565b6130da6130d5613c11565b613c4f565b6130e2612d88565b83836040516020018085805190602001908083835b6020831061311a57805182526020820191506020810190506020830392506130f7565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b602083106131935780518252602082019150602081019050602083039250613170565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b6020831061320c57805182526020820191506020810190506020830392506131e9565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b602083106132855780518252602082019150602081019050602083039250613262565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613322578082015181840152602081019050613307565b50505050905090810190601f16801561334f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156133da57600080fd5b505afa1580156133ee573d6000803e3d6000fd5b505050506040513d602081101561340457600080fd5b81019080805190602001909291905050509050919050565b61345b816040518060400160405280600b81526020017f556e7370656369666965640000000000000000000000000000000000000000008152506130ca565b50565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461348f578190506135bb565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480613509575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15613516574790506135bb565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561357d57600080fd5b505afa158015613591573d6000803e3d6000fd5b505050506040513d60208110156135a757600080fd5b810190808051906020019092919050505090505b92915050565b6000815190505b6000811115613609576135fb8260018303815181106135e357fe5b60200260200101516000613d9690919063ffffffff16565b8080600190039150506135c8565b506136616000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166000613d9690919063ffffffff16565b61367660016000613dc290919063ffffffff16565b50565b6000811480613747575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561370a57600080fd5b505afa15801561371e573d6000803e3d6000fd5b505050506040513d602081101561373457600080fd5b8101908080519060200190929190505050145b61379c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806143cc6036913960400191505060405180910390fd5b6138398363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613e13565b505050565b613852816000613f0290919063ffffffff16565b50565b600061386082613f47565b90508180548061386c57fe5b60019003818190600052602060002001600090559055919050565b600061389282613f47565b90508180548061389e57fe5b60019003818190600052602060002001600090559055919050565b60006138c43061335d565b90508073ffffffffffffffffffffffffffffffffffffffff16631cff79cd6138ea6122c2565b63493c2049734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe461390c613070565b8761391561308c565b604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613a28578082015181840152602081019050613a0d565b50505050905090810190601f168015613a555780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613a7557600080fd5b505af1925050508015613aa957506040513d6020811015613a9557600080fd5b810190808051906020019092919050505060015b613b4957613ab56142c5565b80613ac05750613b05565b613aff6040518060400160405280600c81526020017f5f7472616e736665724364700000000000000000000000000000000000000000815250826130ca565b50613b44565b613b436040518060400160405280600c81526020017f5f7472616e73666572436470000000000000000000000000000000000000000081525061341c565b5b613b4b565b505b5050565b613bec8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613e13565b505050565b60008260008381526020019081526020016000205460001c905092915050565b6000613c4a7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b6001613fe790919063ffffffff16565b905090565b60606000821415613c97576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613d91565b6000808390505b6000811115613cc1578180600101925050600a8181613cb957fe5b049050613c9e565b5060608167ffffffffffffffff81118015613cdb57600080fd5b506040519080825280601f01601f191660200182016040528015613d0e5781602001600182028036833780820191505090505b50905060008290505b6000811115613d8a57600a8581613d2a57fe5b0660300160f81b826001830381518110613d4057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581613d7957fe5b049450808060019003915050613d17565b5080925050505b919050565b818190806001815401808255809150506001900390600052602060002001600090919091909150555050565b81816002811115613dcf57fe5b60a01b908060018154018082558091505060019003906000526020600020016000909173ffffffffffffffffffffffffffffffffffffffff19169091909150555050565b6060613e75826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166140079092919063ffffffff16565b9050600081511115613efd57808060200190516020811015613e9657600080fd5b8101908080519060200190929190505050613efc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806143a2602a913960400191505060405180910390fd5b5b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b600080828054905011613fc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f737461636b20656d70747900000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600183805490500381548110613fd557fe5b90600052602060002001549050919050565b60008260008381526020019081526020016000205460001c905092915050565b6060614016848460008561401f565b90509392505050565b60608247101561407a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061437c6026913960400191505060405180910390fd5b614083856141c8565b6140f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106141455780518252602082019150602081019050602083039250614122565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146141a7576040519150601f19603f3d011682016040523d82523d6000602084013e6141ac565b606091505b50915091506141bc8282866141db565b92505050949350505050565b600080823b905060008111915050919050565b606083156141eb578290506142a0565b6000835111156141fe5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561426557808201518184015260208101905061424a565b50505050905090810190601f1680156142925780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d10156142d557614378565b60046000803e6142e66000516142b8565b6308c379a081146142f75750614378565b60405160043d036004823e80513d602482011167ffffffffffffffff8211171561432357505050614378565b808201805167ffffffffffffffff811115614342575050505050614378565b8060208301013d850181111561435d57505050505050614378565b614366826142a7565b60208401016040528296505050505050505b9056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212203b82feedc6fb56ae04c5e9645d90178dd014161329727337811fbc28b7586ba464736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061013f5760003560e01c8063895e4990116100b6578063e606df871161006f578063e606df871461064b578063f07ab7be1461068c578063f5f5ba72146106e4578063f659659014610774578063fa2901a5146107cc578063fe285fd5146108165761013f565b8063895e4990146104c957806399eb59b91461050a578063b98d24b014610559578063c27229161461059a578063c3b6cb4b146105a4578063dc9031c4146105fc5761013f565b80635481e4a4116101085780635481e4a41461027457806363d070a51461030a5780636ddb4566146103625780637031b517146103b057806373af24e71461040857806387c139431461049e5761013f565b8062e28c52146101445780630f532d18146101855780631413dc7d146101b05780632537e4b5146101db5780634bbc298714610233575b600080fd5b34801561015057600080fd5b50610159610857565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561019157600080fd5b5061019a61091e565b6040518082815260200191505060405180910390f35b3480156101bc57600080fd5b506101c5610945565b6040518082815260200191505060405180910390f35b610231600480360360608110156101f157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061096c565b005b34801561023f57600080fd5b50610248610eb3565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6102f4600480360360a081101561028a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610ecb565b6040518082815260200191505060405180910390f35b6103606004803603606081101561032057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611201565b005b6103ae6004803603604081101561037857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061158f565b005b610406600480360360608110156103c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919050505061188c565b005b610488600480360360a081101561041e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019092919080359060200190929190505050611e62565b6040518082815260200191505060405180910390f35b3480156104aa57600080fd5b506104b3612286565b6040518082815260200191505060405180910390f35b3480156104d557600080fd5b506104de612292565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561051657600080fd5b506105436004803603602081101561052d57600080fd5b81019080803590602001909291905050506122aa565b6040518082815260200191505060405180910390f35b34801561056557600080fd5b5061056e6122c2565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6105a26122de565b005b6105fa600480360360608110156105ba57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506124e0565b005b34801561060857600080fd5b506106356004803603602081101561061f57600080fd5b81019080803590602001909291905050506127c6565b6040518082815260200191505060405180910390f35b34801561065757600080fd5b506106606127e7565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6106e2600480360360608110156106a257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001909291905050506127ff565b005b3480156106f057600080fd5b506106f9612d88565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561073957808201518184015260208101905061071e565b50505050905090810190601f1680156107665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6107ca6004803603606081101561078a57600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612dc5565b005b3480156107d857600080fd5b506107e1613065565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561082257600080fd5b5061082b613070565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b600073da0ab1e0017debcd72be8599041a2aa3ba7e740f73ffffffffffffffffffffffffffffffffffffffff166321f8a7216040518163ffffffff1660e01b815260040180807f4d43445f4a554700000000000000000000000000000000000000000000000000815250602001905060206040518083038186803b1580156108de57600080fd5b505afa1580156108f2573d6000803e3d6000fd5b505050506040513d602081101561090857600080fd5b8101908080519060200190929190505050905090565b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b816000610977613070565b905060008173ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156109cc57600080fd5b505afa1580156109e0573d6000803e3d6000fd5b505050506040513d60208110156109f657600080fd5b810190808051906020019092919050505090506000610a1361308c565b90508173ffffffffffffffffffffffffffffffffffffffff16734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610aa757600080fd5b505afa158015610abb573d6000803e3d6000fd5b505050506040513d6020811015610ad157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614158015610bce575060018373ffffffffffffffffffffffffffffffffffffffff16635aebb4608487856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015610b9057600080fd5b505afa158015610ba4573d6000803e3d6000fd5b505050506040513d6020811015610bba57600080fd5b810190808051906020019092919050505014155b15610c4857610c476040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601a81526020017f556e617574686f72697a65642073656e646572206f66206364700000000000008152506130ca565b5b6000610c533061335d565b90508073ffffffffffffffffffffffffffffffffffffffff16631cff79cd610c796122c2565b637b5a3b43610c86613070565b8c8c8c604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610d86578082015181840152602081019050610d6b565b50505050905090810190601f168015610db35780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015610dd357600080fd5b505af1925050508015610e0757506040513d6020811015610df357600080fd5b810190808051906020019092919050505060015b610ea757610e136142c5565b80610e1e5750610e63565b610e5d6040518060400160405280600781526020017f6672656545544800000000000000000000000000000000000000000000000000815250826130ca565b50610ea2565b610ea16040518060400160405280600781526020017f667265654554480000000000000000000000000000000000000000000000000081525061341c565b5b610ea9565b505b5050505050505050565b734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe481565b600080610ed73061335d565b9050610ee460008861345e565b96508073ffffffffffffffffffffffffffffffffffffffff16631cff79cd88610f0b6122c2565b63e685cc04610f18613070565b610f20610857565b8c8c8c8c604051602401808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200182815260200196505050505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561105b578082015181840152602081019050611040565b50505050905090810190601f1680156110885780820380516001836020036101000a031916815260200191505b5093505050506020604051808303818588803b1580156110a757600080fd5b505af1935050505080156110dc57506040513d60208110156110c857600080fd5b810190808051906020019092919050505060015b61117c576110e86142c5565b806110f35750611138565b6111326040518060400160405280601281526020017f6f70656e4c6f636b455448416e64447261770000000000000000000000000000815250826130ca565b50611177565b6111766040518060400160405280601281526020017f6f70656e4c6f636b455448416e6444726177000000000000000000000000000081525061341c565b5b611184565b8060001c9250505b6060600167ffffffffffffffff8111801561119e57600080fd5b506040519080825280602002602001820160405280156111cd5781602001602082028036833780820191505090505b5090508260001b816000815181106111e157fe5b6020026020010181815250506111f6816135c1565b505095945050505050565b600061120c3061335d565b9050600061122061121b61308c565b61335d565b905060008573ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b15801561126a57600080fd5b505afa15801561127e573d6000803e3d6000fd5b505050506040513d602081101561129457600080fd5b810190808051906020019092919050505090506112b1818561345e565b93506112de83858373ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff16631cff79cd6113026122c2565b63ead6472961130f613070565b8a8a8a60018a604051602401808773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815260200184815260200183151581526020018273ffffffffffffffffffffffffffffffffffffffff16815260200196505050505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561143857808201518184015260208101905061141d565b50505050905090810190601f1680156114655780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561148557600080fd5b505af19250505080156114b957506040513d60208110156114a557600080fd5b810190808051906020019092919050505060015b611559576114c56142c5565b806114d05750611515565b61150f6040518060400160405280600b81526020017f736166654c6f636b47656d000000000000000000000000000000000000000000815250826130ca565b50611554565b6115536040518060400160405280600b81526020017f736166654c6f636b47656d00000000000000000000000000000000000000000081525061341c565b5b61155b565b505b6115878360008373ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b505050505050565b600061159a3061335d565b90506115fb817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff16631cff79cd61161f6122c2565b63036a239561162c613070565b8787604051602401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200193505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611724578082015181840152602081019050611709565b50505050905090810190601f1680156117515780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561177157600080fd5b505af19250505080156117a557506040513d602081101561179157600080fd5b810190808051906020019092919050505060015b611845576117b16142c5565b806117bc5750611801565b6117fb6040518060400160405280600781526020017f77697065416c6c00000000000000000000000000000000000000000000000000815250826130ca565b50611840565b61183f6040518060400160405280600781526020017f77697065416c6c0000000000000000000000000000000000000000000000000081525061341c565b5b611847565b505b611887816000736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b505050565b816000611897613070565b905060008173ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156118ec57600080fd5b505afa158015611900573d6000803e3d6000fd5b505050506040513d602081101561191657600080fd5b81019080805190602001909291905050509050600061193361308c565b90508173ffffffffffffffffffffffffffffffffffffffff16734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156119c757600080fd5b505afa1580156119db573d6000803e3d6000fd5b505050506040513d60208110156119f157600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614158015611aee575060018373ffffffffffffffffffffffffffffffffffffffff16635aebb4608487856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015611ab057600080fd5b505afa158015611ac4573d6000803e3d6000fd5b505050506040513d6020811015611ada57600080fd5b810190808051906020019092919050505014155b15611b6857611b676040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601a81526020017f556e617574686f72697a65642073656e646572206f66206364700000000000008152506130ca565b5b6000611b733061335d565b905060008873ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b158015611bbd57600080fd5b505afa158015611bd1573d6000803e3d6000fd5b505050506040513d6020811015611be757600080fd5b810190808051906020019092919050505090508173ffffffffffffffffffffffffffffffffffffffff16631cff79cd611c1e6122c2565b636ab6a491611c2b613070565b8d8d8d604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d2b578082015181840152602081019050611d10565b50505050905090810190601f168015611d585780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015611d7857600080fd5b505af1925050508015611dac57506040513d6020811015611d9857600080fd5b810190808051906020019092919050505060015b611e4c57611db86142c5565b80611dc35750611e08565b611e026040518060400160405280600781526020017f6672656547656d00000000000000000000000000000000000000000000000000815250826130ca565b50611e47565b611e466040518060400160405280600781526020017f6672656547656d0000000000000000000000000000000000000000000000000081525061341c565b5b611e4e565b505b611e578161383e565b505050505050505050565b600080611e6e3061335d565b905060008773ffffffffffffffffffffffffffffffffffffffff16637bd2bea76040518163ffffffff1660e01b815260040160206040518083038186803b158015611eb857600080fd5b505afa158015611ecc573d6000803e3d6000fd5b505050506040513d6020811015611ee257600080fd5b81019080805190602001909291905050509050611eff818661345e565b9450611f2c82868373ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff16631cff79cd611f506122c2565b63db802a32611f5d613070565b611f65610857565b8d8d8d8d8d6001604051602401808973ffffffffffffffffffffffffffffffffffffffff1681526020018873ffffffffffffffffffffffffffffffffffffffff1681526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018215158152602001985050505050505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156120b3578082015181840152602081019050612098565b50505050905090810190601f1680156120e05780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561210057600080fd5b505af192505050801561213457506040513d602081101561212057600080fd5b810190808051906020019092919050505060015b6121d4576121406142c5565b8061214b5750612190565b61218a6040518060400160405280601281526020017f6f70656e4c6f636b47656d416e64447261770000000000000000000000000000815250826130ca565b506121cf565b6121ce6040518060400160405280601281526020017f6f70656e4c6f636b47656d416e6444726177000000000000000000000000000081525061341c565b5b6121dc565b8060001c9350505b6122088260008373ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b6060600167ffffffffffffffff8111801561222257600080fd5b506040519080825280602002602001820160405280156122515781602001602082028036833780820191505090505b5090508360001b8160008151811061226557fe5b60200260200101818152505061227a816135c1565b50505095945050505050565b670de0b6b3a764000081565b73da0ab1e0017debcd72be8599041a2aa3ba7e740f81565b60016020528060005260406000206000915090505481565b60007382ecd135dce65fbc6dbdd0e4237e0af93ffd5038905090565b60006122ea6000613855565b9050635481e4a460e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061234557506373af24e760e01b817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b1561246f5761235f6123576000613887565b60001c6138b9565b6000736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156123dc57600080fd5b505afa1580156123f0573d6000803e3d6000fd5b505050506040513d602081101561240657600080fd5b8101908080519060200190929190505050905060008111156124695761246861242d61308c565b82736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff16613b4f9092919063ffffffff16565b5b506124dd565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b50565b60006124eb3061335d565b905061252c8183736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff16631cff79cd6125506122c2565b634b66619961255d613070565b888888604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561265d578082015181840152602081019050612642565b50505050905090810190601f16801561268a5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156126aa57600080fd5b505af19250505080156126de57506040513d60208110156126ca57600080fd5b810190808051906020019092919050505060015b61277e576126ea6142c5565b806126f5575061273a565b6127346040518060400160405280600481526020017f7769706500000000000000000000000000000000000000000000000000000000815250826130ca565b50612779565b6127786040518060400160405280600481526020017f776970650000000000000000000000000000000000000000000000000000000081525061341c565b5b612780565b505b6127c0816000736b175474e89094c44da98b954eedeac495271d0f73ffffffffffffffffffffffffffffffffffffffff166136799092919063ffffffff16565b50505050565b600081815481106127d357fe5b906000526020600020016000915090505481565b736b175474e89094c44da98b954eedeac495271d0f81565b81600061280a613070565b905060008173ffffffffffffffffffffffffffffffffffffffff16638161b120846040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561285f57600080fd5b505afa158015612873573d6000803e3d6000fd5b505050506040513d602081101561288957600080fd5b8101908080519060200190929190505050905060006128a661308c565b90508173ffffffffffffffffffffffffffffffffffffffff16734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561293a57600080fd5b505afa15801561294e573d6000803e3d6000fd5b505050506040513d602081101561296457600080fd5b810190808051906020019092919050505073ffffffffffffffffffffffffffffffffffffffff1614158015612a61575060018373ffffffffffffffffffffffffffffffffffffffff16635aebb4608487856040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff168152602001935050505060206040518083038186803b158015612a2357600080fd5b505afa158015612a37573d6000803e3d6000fd5b505050506040513d6020811015612a4d57600080fd5b810190808051906020019092919050505014155b15612adb57612ada6040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152506040518060400160405280601a81526020017f556e617574686f72697a65642073656e646572206f66206364700000000000008152506130ca565b5b6000612ae63061335d565b90508073ffffffffffffffffffffffffffffffffffffffff16631cff79cd612b0c6122c2565b639f6f3d5b612b19613070565b612b21610857565b8d8d8d604051602401808673ffffffffffffffffffffffffffffffffffffffff1681526020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001955050505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612c3e578082015181840152602081019050612c23565b50505050905090810190601f168015612c6b5780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015612c8b57600080fd5b505af1925050508015612cbf57506040513d6020811015612cab57600080fd5b810190808051906020019092919050505060015b612d5f57612ccb6142c5565b80612cd65750612d1b565b612d156040518060400160405280600481526020017f6472617700000000000000000000000000000000000000000000000000000000815250826130ca565b50612d5a565b612d596040518060400160405280600481526020017f647261770000000000000000000000000000000000000000000000000000000081525061341c565b5b612d61565b505b612d7e736b175474e89094c44da98b954eedeac495271d0f61383e565b5050505050505050565b60606040518060400160405280600681526020017f484d616b65720000000000000000000000000000000000000000000000000000815250905090565b6000612dd03061335d565b90506000612de4612ddf61308c565b61335d565b9050612df160008661345e565b94508173ffffffffffffffffffffffffffffffffffffffff16631cff79cd86612e186122c2565b63ee284576612e25613070565b898988604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518463ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612f3b578082015181840152602081019050612f20565b50505050905090810190601f168015612f685780820380516001836020036101000a031916815260200191505b5093505050506020604051808303818588803b158015612f8757600080fd5b505af193505050508015612fbc57506040513d6020811015612fa857600080fd5b810190808051906020019092919050505060015b61305c57612fc86142c5565b80612fd35750613018565b6130126040518060400160405280600b81526020017f736166654c6f636b455448000000000000000000000000000000000000000000815250826130ca565b50613057565b6130566040518060400160405280600b81526020017f736166654c6f636b45544800000000000000000000000000000000000000000081525061341c565b5b61305e565b505b5050505050565b63c272291660e01b81565b6000735ef30b9986345249bc32d8928b7ee64de9435e39905090565b60006130c57fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b6001613bf190919063ffffffff16565b905090565b6130da6130d5613c11565b613c4f565b6130e2612d88565b83836040516020018085805190602001908083835b6020831061311a57805182526020820191506020810190506020830392506130f7565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b602083106131935780518252602082019150602081019050602083039250613170565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b6020831061320c57805182526020820191506020810190506020830392506131e9565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b602083106132855780518252602082019150602081019050602083039250613262565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613322578082015181840152602081019050613307565b50505050905090810190601f16801561334f5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6000734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156133da57600080fd5b505afa1580156133ee573d6000803e3d6000fd5b505050506040513d602081101561340457600080fd5b81019080805190602001909291905050509050919050565b61345b816040518060400160405280600b81526020017f556e7370656369666965640000000000000000000000000000000000000000008152506130ca565b50565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821461348f578190506135bb565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480613509575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15613516574790506135bb565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561357d57600080fd5b505afa158015613591573d6000803e3d6000fd5b505050506040513d60208110156135a757600080fd5b810190808051906020019092919050505090505b92915050565b6000815190505b6000811115613609576135fb8260018303815181106135e357fe5b60200260200101516000613d9690919063ffffffff16565b8080600190039150506135c8565b506136616000357fffffffff00000000000000000000000000000000000000000000000000000000167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166000613d9690919063ffffffff16565b61367660016000613dc290919063ffffffff16565b50565b6000811480613747575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561370a57600080fd5b505afa15801561371e573d6000803e3d6000fd5b505050506040513d602081101561373457600080fd5b8101908080519060200190929190505050145b61379c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260368152602001806143cc6036913960400191505060405180910390fd5b6138398363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613e13565b505050565b613852816000613f0290919063ffffffff16565b50565b600061386082613f47565b90508180548061386c57fe5b60019003818190600052602060002001600090559055919050565b600061389282613f47565b90508180548061389e57fe5b60019003818190600052602060002001600090559055919050565b60006138c43061335d565b90508073ffffffffffffffffffffffffffffffffffffffff16631cff79cd6138ea6122c2565b63493c2049734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe461390c613070565b8761391561308c565b604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613a28578082015181840152602081019050613a0d565b50505050905090810190601f168015613a555780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b158015613a7557600080fd5b505af1925050508015613aa957506040513d6020811015613a9557600080fd5b810190808051906020019092919050505060015b613b4957613ab56142c5565b80613ac05750613b05565b613aff6040518060400160405280600c81526020017f5f7472616e736665724364700000000000000000000000000000000000000000815250826130ca565b50613b44565b613b436040518060400160405280600c81526020017f5f7472616e73666572436470000000000000000000000000000000000000000081525061341c565b5b613b4b565b505b5050565b613bec8363a9059cbb60e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050613e13565b505050565b60008260008381526020019081526020016000205460001c905092915050565b6000613c4a7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b6001613fe790919063ffffffff16565b905090565b60606000821415613c97576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613d91565b6000808390505b6000811115613cc1578180600101925050600a8181613cb957fe5b049050613c9e565b5060608167ffffffffffffffff81118015613cdb57600080fd5b506040519080825280601f01601f191660200182016040528015613d0e5781602001600182028036833780820191505090505b50905060008290505b6000811115613d8a57600a8581613d2a57fe5b0660300160f81b826001830381518110613d4057fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8581613d7957fe5b049450808060019003915050613d17565b5080925050505b919050565b818190806001815401808255809150506001900390600052602060002001600090919091909150555050565b81816002811115613dcf57fe5b60a01b908060018154018082558091505060019003906000526020600020016000909173ffffffffffffffffffffffffffffffffffffffff19169091909150555050565b6060613e75826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166140079092919063ffffffff16565b9050600081511115613efd57808060200190516020811015613e9657600080fd5b8101908080519060200190929190505050613efc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806143a2602a913960400191505060405180910390fd5b5b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b600080828054905011613fc2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f737461636b20656d70747900000000000000000000000000000000000000000081525060200191505060405180910390fd5b81600183805490500381548110613fd557fe5b90600052602060002001549050919050565b60008260008381526020019081526020016000205460001c905092915050565b6060614016848460008561401f565b90509392505050565b60608247101561407a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602681526020018061437c6026913960400191505060405180910390fd5b614083856141c8565b6140f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106141455780518252602082019150602081019050602083039250614122565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146141a7576040519150601f19603f3d011682016040523d82523d6000602084013e6141ac565b606091505b50915091506141bc8282866141db565b92505050949350505050565b600080823b905060008111915050919050565b606083156141eb578290506142a0565b6000835111156141fe5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561426557808201518184015260208101905061424a565b50505050905090810190601f1680156142925780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d10156142d557614378565b60046000803e6142e66000516142b8565b6308c379a081146142f75750614378565b60405160043d036004823e80513d602482011167ffffffffffffffff8211171561432357505050614378565b808201805167ffffffffffffffff811115614342575050505050614378565b8060208301013d850181111561435d57505050505050614378565b614366826142a7565b60208401016040528296505050505050505b9056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a26469706673582212203b82feedc6fb56ae04c5e9645d90178dd014161329727337811fbc28b7586ba464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/maker/HMaker.sol:HMaker",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/maker/HMaker.sol:HMaker",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}