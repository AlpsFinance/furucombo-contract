{
  "address": "0x5ba4Edd8BADb91f6DCAB19Bef1829a67de0fA669",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "configs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "batchExec",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tos",
          "type": "address[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "configs",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes[]",
          "name": "datas",
          "type": "bytes[]"
        }
      ],
      "name": "execs",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registry",
      "outputs": [
        {
          "internalType": "contract IRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd444d97b3bff5ef15092b0409fef982c8bd50867cc03b76b79f790f70f1abc96",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x5ba4Edd8BADb91f6DCAB19Bef1829a67de0fA669",
    "transactionIndex": 0,
    "gasUsed": "2983430",
    "logsBloom": "0x
    "blockHash": "0x41da8ba549a804d6ebc2772ac9aaeeeed4358a9f96f2716720860df90a87eb45",
    "transactionHash": "0xd444d97b3bff5ef15092b0409fef982c8bd50867cc03b76b79f790f70f1abc96",
    "logs": [],
    "blockNumber": 13356584,
    "cumulativeGasUsed": "2983430",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x97cFdd3d45d7Df2EA9552DF5Ee8473128d1833de"
  ],
  "solcInputHash": "bb259667c42cbb0fa18e2cd3d62f52c9",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"configs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"batchExec\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tos\",\"type\":\"address[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"configs\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes[]\",\"name\":\"datas\",\"type\":\"bytes[]\"}],\"name\":\"execs\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Ben Huang\",\"kind\":\"dev\",\"methods\":{\"batchExec(address[],bytes32[],bytes[])\":{\"params\":{\"configs\":\"The configurations of executing cubes.\",\"datas\":\"The combo datas.\",\"tos\":\"The handlers of combo.\"}},\"execs(address[],bytes32[],bytes[])\":{\"details\":\"This function can only be called through the handler, which makes the caller become proxy itself.\"}},\"title\":\"The entrance of Furucombo\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchExec(address[],bytes32[],bytes[])\":{\"notice\":\"Combo execution function. Including three phases: pre-process, exection and post-process.\"},\"execs(address[],bytes32[],bytes[])\":{\"notice\":\"The execution interface for callback function to be executed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Proxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./interface/IProxy.sol\\\";\\nimport \\\"./interface/IRegistry.sol\\\";\\nimport \\\"./Config.sol\\\";\\nimport \\\"./Storage.sol\\\";\\nimport \\\"./lib/LibParam.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @title The entrance of Furucombo\\n * @author Ben Huang\\n */\\ncontract Proxy is IProxy, Storage, Config {\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    using LibParam for bytes32;\\n\\n    modifier isNotBanned() {\\n        require(registry.bannedAgents(address(this)) == 0, \\\"Banned\\\");\\n        _;\\n    }\\n\\n    modifier isNotHalted() {\\n        require(registry.fHalt() == false, \\\"Halted\\\");\\n        _;\\n    }\\n\\n    IRegistry public immutable registry;\\n\\n    constructor(address _registry) public {\\n        registry = IRegistry(_registry);\\n    }\\n\\n    /**\\n     * @notice Direct transfer from EOA should be reverted.\\n     * @dev Callback function will be handled here.\\n     */\\n    fallback() external payable isNotHalted isNotBanned isInitialized {\\n        // If triggered by a function call, caller should be registered in\\n        // registry.\\n        // The function call will then be forwarded to the location registered\\n        // in registry.\\n        require(_isValidCaller(msg.sender), \\\"Invalid caller\\\");\\n\\n        address target = address(bytes20(registry.callers(msg.sender)));\\n        bytes memory result = _exec(target, msg.data);\\n\\n        // return result for aave v2 flashloan()\\n        uint256 size = result.length;\\n        assembly {\\n            let loc := add(result, 0x20)\\n            return(loc, size)\\n        }\\n    }\\n\\n    /**\\n     * @notice Direct transfer from EOA should be reverted.\\n     */\\n    receive() external payable {\\n        require(Address.isContract(msg.sender), \\\"Not allowed from EOA\\\");\\n    }\\n\\n    /**\\n     * @notice Combo execution function. Including three phases: pre-process,\\n     * exection and post-process.\\n     * @param tos The handlers of combo.\\n     * @param configs The configurations of executing cubes.\\n     * @param datas The combo datas.\\n     */\\n    function batchExec(\\n        address[] calldata tos,\\n        bytes32[] calldata configs,\\n        bytes[] memory datas\\n    ) external payable override isNotHalted isNotBanned {\\n        console.log('----------');\\n        console.log('tos:%s', tos.length);\\n        console.log('tos[0]:%s', tos[0]);\\n        _preProcess();\\n        _execs(tos, configs, datas);\\n        _postProcess();\\n    }\\n\\n    /**\\n     * @notice The execution interface for callback function to be executed.\\n     * @dev This function can only be called through the handler, which makes\\n     * the caller become proxy itself.\\n     */\\n    function execs(\\n        address[] calldata tos,\\n        bytes32[] calldata configs,\\n        bytes[] memory datas\\n    ) external payable override isNotHalted isNotBanned isInitialized {\\n        require(msg.sender == address(this), \\\"Does not allow external calls\\\");\\n        _execs(tos, configs, datas);\\n    }\\n\\n    /**\\n     * @notice The execution phase.\\n     * @param tos The handlers of combo.\\n     * @param configs The configurations of executing cubes.\\n     * @param datas The combo datas.\\n     */\\n    function _execs(\\n        address[] memory tos,\\n        bytes32[] memory configs,\\n        bytes[] memory datas\\n    ) internal {\\n        bytes32[256] memory localStack;\\n        uint256 index = 0;\\n\\n        require(\\n            tos.length == datas.length,\\n            \\\"Tos and datas length inconsistent\\\"\\n        );\\n        require(\\n            tos.length == configs.length,\\n            \\\"Tos and configs length inconsistent\\\"\\n        );\\n        for (uint256 i = 0; i < tos.length; i++) {\\n            bytes32 config = configs[i];\\n            // Check if the data contains dynamic parameter\\n            if (!config.isStatic()) {\\n                // If so, trim the exectution data base on the configuration and stack content\\n                _trim(datas[i], config, localStack, index);\\n            }\\n            // Check if the output will be referenced afterwards\\n            bytes memory result = _exec(tos[i], datas[i]);\\n            if (config.isReferenced()) {\\n                // If so, parse the output and place it into local stack\\n                uint256 num = config.getReturnNum();\\n                uint256 newIndex = _parse(localStack, result, index);\\n                require(\\n                    newIndex == index + num,\\n                    \\\"Return num and parsed return num not matched\\\"\\n                );\\n                index = newIndex;\\n            }\\n\\n            // Setup the process to be triggered in the post-process phase\\n            _setPostProcess(tos[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Trimming the execution data.\\n     * @param data The execution data.\\n     * @param config The configuration.\\n     * @param localStack The stack the be referenced.\\n     * @param index Current element count of localStack.\\n     */\\n    function _trim(\\n        bytes memory data,\\n        bytes32 config,\\n        bytes32[256] memory localStack,\\n        uint256 index\\n    ) internal pure {\\n        // Fetch the parameter configuration from config\\n        (uint256[] memory refs, uint256[] memory params) = config.getParams();\\n        // Trim the data with the reference and parameters\\n        for (uint256 i = 0; i < refs.length; i++) {\\n            require(refs[i] < index, \\\"Reference to out of localStack\\\");\\n            bytes32 ref = localStack[refs[i]];\\n            uint256 offset = params[i];\\n            uint256 base = PERCENTAGE_BASE;\\n            assembly {\\n                let loc := add(add(data, 0x20), offset)\\n                let m := mload(loc)\\n                // Adjust the value by multiplier if a dynamic parameter is not zero\\n                if iszero(iszero(m)) {\\n                    // Assert no overflow first\\n                    let p := mul(m, ref)\\n                    if iszero(eq(div(p, m), ref)) {\\n                        revert(0, 0)\\n                    } // require(p / m == ref)\\n                    ref := div(p, base)\\n                }\\n                mstore(loc, ref)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Parse the return data to the local stack.\\n     * @param localStack The local stack to place the return values.\\n     * @param ret The return data.\\n     * @param index The current tail.\\n     */\\n    function _parse(\\n        bytes32[256] memory localStack,\\n        bytes memory ret,\\n        uint256 index\\n    ) internal pure returns (uint256 newIndex) {\\n        uint256 len = ret.length;\\n        // The return value should be multiple of 32-bytes to be parsed.\\n        require(len % 32 == 0, \\\"illegal length for _parse\\\");\\n        // Estimate the tail after the process.\\n        newIndex = index + len / 32;\\n        require(newIndex <= 256, \\\"stack overflow\\\");\\n        assembly {\\n            let offset := shl(5, index)\\n            // Store the data into localStack\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n                i := add(i, 0x20)\\n            } {\\n                mstore(\\n                    add(localStack, add(i, offset)),\\n                    mload(add(add(ret, i), 0x20))\\n                )\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice The execution of a single cube.\\n     * @param _to The handler of cube.\\n     * @param _data The cube execution data.\\n     */\\n    function _exec(address _to, bytes memory _data)\\n        internal\\n        returns (bytes memory result)\\n    {\\n        require(_isValidHandler(_to), \\\"Invalid handler\\\");\\n        _addCubeCounter();\\n        assembly {\\n            let succeeded := delegatecall(\\n                sub(gas(), 5000),\\n                _to,\\n                add(_data, 0x20),\\n                mload(_data),\\n                0,\\n                0\\n            )\\n            let size := returndatasize()\\n\\n            result := mload(0x40)\\n            mstore(\\n                0x40,\\n                add(result, and(add(add(size, 0x20), 0x1f), not(0x1f)))\\n            )\\n            mstore(result, size)\\n            returndatacopy(add(result, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n                case 1 {\\n                    revert(add(result, 0x20), size)\\n                }\\n        }\\n    }\\n\\n    /**\\n     * @notice Setup the post-process.\\n     * @param _to The handler of post-process.\\n     */\\n    function _setPostProcess(address _to) internal {\\n        // If the stack length equals 0, just skip\\n        // If the top is a custom post-process, replace it with the handler\\n        // address.\\n        if (stack.length == 0) {\\n            return;\\n        } else if (\\n            stack.peek() == bytes32(bytes12(uint96(HandlerType.Custom)))\\n        ) {\\n            stack.pop();\\n            // Check if the handler is already set.\\n            if (bytes4(stack.peek()) != 0x00000000) stack.setAddress(_to);\\n            stack.setHandlerType(HandlerType.Custom);\\n        }\\n    }\\n\\n    /// @notice The pre-process phase.\\n    function _preProcess() internal virtual isStackEmpty isCubeCounterZero {\\n        // Set the sender.\\n        _setSender();\\n    }\\n\\n    /// @notice The post-process phase.\\n    function _postProcess() internal {\\n        // Handler type will be parsed at the beginning. Will send the token back to\\n        // user if the handler type is \\\"Token\\\". Will get the handler address and\\n        // execute the customized post-process if handler type is \\\"Custom\\\".\\n        while (stack.length > 0) {\\n            bytes32 top = stack.get();\\n            // Get handler type\\n            HandlerType handlerType = HandlerType(uint96(bytes12(top)));\\n            if (handlerType == HandlerType.Token) {\\n                address addr = address(uint160(uint256(top)));\\n                uint256 amount = IERC20(addr).balanceOf(address(this));\\n                if (amount > 0) IERC20(addr).safeTransfer(msg.sender, amount);\\n            } else if (handlerType == HandlerType.Custom) {\\n                address addr = stack.getAddress();\\n                _exec(addr, abi.encodeWithSelector(POSTPROCESS_SIG));\\n            } else {\\n                revert(\\\"Invalid handler type\\\");\\n            }\\n        }\\n\\n        // Balance should also be returned to user\\n        uint256 amount = address(this).balance;\\n        if (amount > 0) msg.sender.transfer(amount);\\n\\n        // Reset the msg.sender and cube counter\\n        _resetSender();\\n        _resetCubeCounter();\\n    }\\n\\n    /// @notice Check if the handler is valid in registry.\\n    function _isValidHandler(address handler) internal view returns (bool) {\\n        return registry.isValidHandler(handler);\\n    }\\n\\n    /// @notice Check if the caller is valid in registry.\\n    function _isValidCaller(address caller) internal view returns (bool) {\\n        return registry.isValidCaller(caller);\\n    }\\n}\\n\",\"keccak256\":\"0x5390f22d403d5465c8318a8b0530560ccc68767fbd45521c64d657c71126699e\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/interface/IProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IProxy {\\n    function batchExec(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\\n    function execs(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\\n}\\n\",\"keccak256\":\"0x1396275637bbbacc003d2090ef230a3aa685510a7177d7d2cfac77886ded9392\"},\"contracts/interface/IRegistry.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IRegistry {\\n    function handlers(address) external view returns (bytes32);\\n    function callers(address) external view returns (bytes32);\\n    function bannedAgents(address) external view returns (uint256);\\n    function fHalt() external view returns (bool);\\n    function isValidHandler(address handler) external view returns (bool);\\n    function isValidCaller(address handler) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x6033e6932f50b45a31eed1ef34fb13cc85e4001f31f6d63b604ed6322a491bbd\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibParam.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibParam {\\n    bytes32 private constant STATIC_MASK =\\n        0x0100000000000000000000000000000000000000000000000000000000000000;\\n    bytes32 private constant PARAMS_MASK =\\n        0x0000000000000000000000000000000000000000000000000000000000000001;\\n    bytes32 private constant REFS_MASK =\\n        0x00000000000000000000000000000000000000000000000000000000000000FF;\\n    bytes32 private constant RETURN_NUM_MASK =\\n        0x00FF000000000000000000000000000000000000000000000000000000000000;\\n\\n    uint256 private constant REFS_LIMIT = 22;\\n    uint256 private constant PARAMS_SIZE_LIMIT = 64;\\n    uint256 private constant RETURN_NUM_OFFSET = 240;\\n\\n    function isStatic(bytes32 conf) internal pure returns (bool) {\\n        if (conf & STATIC_MASK == 0) return true;\\n        else return false;\\n    }\\n\\n    function isReferenced(bytes32 conf) internal pure returns (bool) {\\n        if (getReturnNum(conf) == 0) return false;\\n        else return true;\\n    }\\n\\n    function getReturnNum(bytes32 conf) internal pure returns (uint256 num) {\\n        bytes32 temp = (conf & RETURN_NUM_MASK) >> RETURN_NUM_OFFSET;\\n        num = uint256(temp);\\n    }\\n\\n    function getParams(bytes32 conf)\\n        internal\\n        pure\\n        returns (uint256[] memory refs, uint256[] memory params)\\n    {\\n        require(!isStatic(conf), \\\"Static params\\\");\\n        uint256 n = REFS_LIMIT;\\n        while (conf & REFS_MASK == REFS_MASK && n > 0) {\\n            n--;\\n            conf = conf >> 8;\\n        }\\n        require(n > 0, \\\"No dynamic param\\\");\\n        refs = new uint256[](n);\\n        params = new uint256[](n);\\n        for (uint256 i = 0; i < n; i++) {\\n            refs[i] = uint256(conf & REFS_MASK);\\n            conf = conf >> 8;\\n        }\\n        uint256 i = 0;\\n        for (uint256 k = 0; k < PARAMS_SIZE_LIMIT; k++) {\\n            if (conf & PARAMS_MASK != 0) {\\n                require(i < n, \\\"Location count exceeds ref count\\\");\\n                params[i] = k * 32 + 4;\\n                i++;\\n            }\\n            conf = conf >> 1;\\n        }\\n        require(i == n, \\\"Location count less than ref count\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xf5c4449351cca5d7be5d6c971b37fed6be11f8146bc6bb8df7365747a3277818\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620036a3380380620036a383398181016040528101906200003791906200008c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250505062000106565b6000815190506200008681620000ec565b92915050565b6000602082840312156200009f57600080fd5b6000620000af8482850162000075565b91505092915050565b6000620000c582620000cc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620000f781620000b8565b81146200010357600080fd5b50565b60805160601c613553620001506000398060df52806101c1528061036b528061065652806107fa52806108dc5280610b4d5280610c2f5280610e915280610f2752506135536000f3fe60806040526004361061008a5760003560e01c80637b103999116100595780637b1039991461050657806387c139431461053157806399eb59b91461055c578063dc9031c414610599578063fa2901a5146105d6576100d9565b80630f532d18146104785780631413dc7d146104a357806338c5c08e146104ce57806371938509146104ea576100d9565b366100d95761009833610601565b6100d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ce906130c8565b60405180910390fd5b005b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea750af66040518163ffffffff1660e01b815260040160206040518083038186803b15801561014357600080fd5b505afa158015610157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017b91906125aa565b1515146101bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b490613188565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631903dcaa306040518263ffffffff1660e01b81526004016102189190612e91565b60206040518083038186803b15801561023057600080fd5b505afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610268919061264e565b146102a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029f906130e8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166102c8610614565b73ffffffffffffffffffffffffffffffffffffffff16141561031f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031690612fa8565b60405180910390fd5b61032833610652565b610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035e90613008565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637bbf4a3f336040518263ffffffff1660e01b81526004016103c29190612e91565b60206040518083038186803b1580156103da57600080fd5b505afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041291906125fc565b60601c90506060610468826000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610704565b9050600081519050602082018181f35b34801561048457600080fd5b5061048d6107a6565b60405161049a9190612ed5565b60405180910390f35b3480156104af57600080fd5b506104b86107cd565b6040516104c59190612ed5565b60405180910390f35b6104e860048036038101906104e39190612509565b6107f4565b005b61050460048036038101906104ff9190612509565b610b47565b005b34801561051257600080fd5b5061051b610e8f565b6040516105289190612f0b565b60405180910390f35b34801561053d57600080fd5b50610546610eb3565b60405161055391906132c8565b60405180910390f35b34801561056857600080fd5b50610583600480360381019061057e91906125d3565b610ebf565b6040516105909190612ed5565b60405180910390f35b3480156105a557600080fd5b506105c060048036038101906105bb9190612625565b610ed7565b6040516105cd9190612ed5565b60405180910390f35b3480156105e257600080fd5b506105eb610ef8565b6040516105f89190612ef0565b60405180910390f35b600080823b905060008111915050919050565b600061064d7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b6001610f0390919063ffffffff16565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb1010e9836040518263ffffffff1660e01b81526004016106ad9190612e76565b60206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd91906125aa565b9050919050565b606061070f83610f23565b61074e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074590613128565b60405180910390fd5b610756610fd5565b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e8115600181146107965761079d565b8160208501fd5b50505092915050565b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea750af66040518163ffffffff1660e01b815260040160206040518083038186803b15801561085e57600080fd5b505afa158015610872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089691906125aa565b1515146108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf90613188565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631903dcaa306040518263ffffffff1660e01b81526004016109339190612e91565b60206040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610983919061264e565b146109c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ba906130e8565b60405180910390fd5b610a016040518060400160405280600a81526020017f2d2d2d2d2d2d2d2d2d2d0000000000000000000000000000000000000000000081525061101a565b610a436040518060400160405280600681526020017f746f733a25730000000000000000000000000000000000000000000000000000815250868690506110b3565b610aa36040518060400160405280600981526020017f746f735b305d3a2573000000000000000000000000000000000000000000000081525086866000818110610a8957fe5b9050602002016020810190610a9e91906124e0565b61114f565b610aab6111eb565b610b38858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083611286565b610b40611444565b5050505050565b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea750af66040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb157600080fd5b505afa158015610bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be991906125aa565b151514610c2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2290613188565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631903dcaa306040518263ffffffff1660e01b8152600401610c869190612e91565b60206040518083038186803b158015610c9e57600080fd5b505afa158015610cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd6919061264e565b14610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d906130e8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16610d36610614565b73ffffffffffffffffffffffffffffffffffffffff161415610d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8490612fa8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df290613148565b60405180910390fd5b610e88858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083611286565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b60008181548110610ee457fe5b906000526020600020016000915090505481565b63c272291660e01b81565b60008260008381526020019081526020016000205460001c905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d4c68348836040518263ffffffff1660e01b8152600401610f7e9190612e76565b60206040518083038186803b158015610f9657600080fd5b505afa158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce91906125aa565b9050919050565b6110187ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b60016110066116c5565b0160016117039092919063ffffffff16565b565b6110b08160405160240161102e9190612f26565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611722565b50565b61114b82826040516024016110c9929190612f78565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611722565b5050565b6111e78282604051602401611165929190612f48565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611722565b5050565b6000808054905014611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122990613208565b60405180910390fd5b600061123c6116c5565b1461127c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127390613048565b60405180910390fd5b61128461174b565b565b61128e6122e2565b600082518551146112d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cb906131e8565b60405180910390fd5b8351855114611318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130f90613248565b60405180910390fd5b60005b855181101561143c57600085828151811061133257fe5b60200260200101519050611345816117fc565b6113695761136885838151811061135857fe5b6020026020010151828686611841565b5b606061139b88848151811061137a57fe5b602002602001015187858151811061138e57fe5b6020026020010151610704565b90506113a682611944565b156114115760006113b683611969565b905060006113c58784886119a3565b9050818601811461140b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140290613168565b60405180910390fd5b80955050505b61142d88848151811061142057fe5b6020026020010151611a7c565b5050808060010191505061131b565b505050505050565b5b60008080549050111561165c57600061145e6000611b48565b905060008160a01c6bffffffffffffffffffffffff16600281111561147f57fe5b90506000600281111561148e57fe5b81600281111561149a57fe5b14156115715760008260001c905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114e39190612e91565b60206040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611533919061264e565b9050600081111561156a5761156933828473ffffffffffffffffffffffffffffffffffffffff16611b7a9092919063ffffffff16565b5b5050611655565b6001600281111561157e57fe5b81600281111561158a57fe5b141561161957600061159c6000611c00565b90506116128163c272291660e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610704565b5050611654565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90612fc8565b60405180910390fd5b5b5050611445565b600047905060008111156116b2573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156116b0573d6000803e3d6000fd5b505b6116ba611c35565b6116c2611c71565b50565b60006116fe7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b6001611cad90919063ffffffff16565b905090565b8060001b83600084815260200190815260200160002081905550505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600073ffffffffffffffffffffffffffffffffffffffff1661176b610614565b73ffffffffffffffffffffffffffffffffffffffff16146117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b890613028565b60405180910390fd5b6117fa7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b336001611ccd9092919063ffffffff16565b565b60008060001b7f010000000000000000000000000000000000000000000000000000000000000060001b83161415611837576001905061183c565b600090505b919050565b60608061184d85611d02565b9150915060005b825181101561193b578383828151811061186a57fe5b6020026020010151106118b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a990613288565b60405180910390fd5b6000858483815181106118c157fe5b602002602001015161010081106118d457fe5b6020020151905060008383815181106118e957fe5b602002602001015190506000670de0b6b3a764000090508160208b01018051801561192657848102858282041461191f57600080fd5b8381049550505b84825250505050508080600101915050611854565b50505050505050565b60008061195083611969565b141561195f5760009050611964565b600190505b919050565b60008060f07eff00000000000000000000000000000000000000000000000000000000000060001b8416901c90508060001c915050919050565b600080835190506000602082816119b657fe5b06146119f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ee90613228565b60405180910390fd5b60208181611a0157fe5b0483019150610100821115611a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a42906131c8565b60405180910390fd5b8260051b60005b82811015611a725760208187010151828201880152602081019050611a52565b5050509392505050565b600080805490501415611a8e57611b45565b60016002811115611a9b57fe5b60a01b73ffffffffffffffffffffffffffffffffffffffff1916611abf6000611f84565b1415611b44576000805480611ad057fe5b60019003818190600052602060002001600090559055600060e01b611af56000611f84565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b2e57611b2d816000611ff190919063ffffffff16565b5b611b436001600061203690919063ffffffff16565b5b5b50565b6000611b5382611f84565b905081805480611b5f57fe5b60019003818190600052602060002001600090559055919050565b611bfb8363a9059cbb60e01b8484604051602401611b99929190612eac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612087565b505050565b6000611c0b82611f84565b60001c905081805480611c1a57fe5b60019003818190600052602060002001600090559055919050565b611c6f7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b60006001611ccd9092919063ffffffff16565b565b611cab7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600060016117039092919063ffffffff16565b565b60008260008381526020019081526020016000205460001c905092915050565b8073ffffffffffffffffffffffffffffffffffffffff1660001b83600084815260200190815260200160002081905550505050565b606080611d0e836117fc565b15611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4590613108565b60405180910390fd5b6000601690505b60ff60001b60ff60001b8516148015611d6e5750600081115b15611d8857808060019003915050600884901c9350611d55565b60008111611dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc290612fe8565b60405180910390fd5b8067ffffffffffffffff81118015611de257600080fd5b50604051908082528060200260200182016040528015611e115781602001602082028036833780820191505090505b5092508067ffffffffffffffff81118015611e2b57600080fd5b50604051908082528060200260200182016040528015611e5a5781602001602082028036833780820191505090505b50915060005b81811015611e9e5760ff60001b851660001c848281518110611e7e57fe5b602002602001018181525050600885901c94508080600101915050611e60565b506000805b6040811015611f3a576000801b600160001b871614611f2657828210611efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef590613088565b60405180910390fd5b60046020820201848381518110611f1157fe5b60200260200101818152505081806001019250505b600186901c95508080600101915050611ea3565b50818114611f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7490613068565b60405180910390fd5b5050915091565b600080828054905011611fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc3906131a8565b60405180910390fd5b81600183805490500381548110611fdf57fe5b90600052602060002001549050919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b8181600281111561204357fe5b60a01b908060018154018082558091505060019003906000526020600020016000909173ffffffffffffffffffffffffffffffffffffffff19169091909150555050565b60606120e9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661214e9092919063ffffffff16565b9050600081511115612149578080602001905181019061210991906125aa565b612148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213f906132a8565b60405180910390fd5b5b505050565b606061215d8484600085612166565b90509392505050565b6060824710156121ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a2906130a8565b60405180910390fd5b6121b485610601565b6121f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ea90613268565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161221d9190612e5f565b60006040518083038185875af1925050503d806000811461225a576040519150601f19603f3d011682016040523d82523d6000602084013e61225f565b606091505b509150915061226f82828661227b565b92505050949350505050565b6060831561228b578290506122db565b60008351111561229e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d29190612f26565b60405180910390fd5b9392505050565b60405180612000016040528061010090602082028036833780820191505090505090565b600081359050612315816134c1565b92915050565b60008083601f84011261232d57600080fd5b8235905067ffffffffffffffff81111561234657600080fd5b60208301915083602082028301111561235e57600080fd5b9250929050565b60008083601f84011261237757600080fd5b8235905067ffffffffffffffff81111561239057600080fd5b6020830191508360208202830111156123a857600080fd5b9250929050565b600082601f8301126123c057600080fd5b81356123d36123ce82613310565b6132e3565b9150818183526020840193506020810190508360005b8381101561241957813586016123ff8882612462565b8452602084019350602083019250506001810190506123e9565b5050505092915050565b600081519050612432816134d8565b92915050565b600081359050612447816134ef565b92915050565b60008151905061245c816134ef565b92915050565b600082601f83011261247357600080fd5b813561248661248182613338565b6132e3565b915080825260208301602083018583830111156124a257600080fd5b6124ad83828461346e565b50505092915050565b6000813590506124c581613506565b92915050565b6000815190506124da81613506565b92915050565b6000602082840312156124f257600080fd5b600061250084828501612306565b91505092915050565b60008060008060006060868803121561252157600080fd5b600086013567ffffffffffffffff81111561253b57600080fd5b6125478882890161231b565b9550955050602086013567ffffffffffffffff81111561256657600080fd5b61257288828901612365565b9350935050604086013567ffffffffffffffff81111561259157600080fd5b61259d888289016123af565b9150509295509295909350565b6000602082840312156125bc57600080fd5b60006125ca84828501612423565b91505092915050565b6000602082840312156125e557600080fd5b60006125f384828501612438565b91505092915050565b60006020828403121561260e57600080fd5b600061261c8482850161244d565b91505092915050565b60006020828403121561263757600080fd5b6000612645848285016124b6565b91505092915050565b60006020828403121561266057600080fd5b600061266e848285016124cb565b91505092915050565b61268081613414565b82525050565b61268f81613396565b82525050565b61269e816133b4565b82525050565b6126ad816133be565b82525050565b60006126be82613364565b6126c8818561337a565b93506126d881856020860161347d565b80840191505092915050565b6126ed81613426565b82525050565b60006126fe8261336f565b6127088185613385565b935061271881856020860161347d565b612721816134b0565b840191505092915050565b6000612739601983613385565b91507f53656e646572206973206e6f7420696e697469616c697a6564000000000000006000830152602082019050919050565b6000612779601483613385565b91507f496e76616c69642068616e646c657220747970650000000000000000000000006000830152602082019050919050565b60006127b9601083613385565b91507f4e6f2064796e616d696320706172616d000000000000000000000000000000006000830152602082019050919050565b60006127f9600e83613385565b91507f496e76616c69642063616c6c65720000000000000000000000000000000000006000830152602082019050919050565b6000612839601583613385565b91507f53656e64657220697320696e697469616c697a656400000000000000000000006000830152602082019050919050565b6000612879601583613385565b91507f4375626520636f756e746572206e6f74207a65726f00000000000000000000006000830152602082019050919050565b60006128b9602283613385565b91507f4c6f636174696f6e20636f756e74206c657373207468616e2072656620636f7560008301527f6e740000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061291f602083613385565b91507f4c6f636174696f6e20636f756e7420657863656564732072656620636f756e746000830152602082019050919050565b600061295f602683613385565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129c5601483613385565b91507f4e6f7420616c6c6f7765642066726f6d20454f410000000000000000000000006000830152602082019050919050565b6000612a05600683613385565b91507f42616e6e656400000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612a45600d83613385565b91507f53746174696320706172616d73000000000000000000000000000000000000006000830152602082019050919050565b6000612a85600f83613385565b91507f496e76616c69642068616e646c657200000000000000000000000000000000006000830152602082019050919050565b6000612ac5601d83613385565b91507f446f6573206e6f7420616c6c6f772065787465726e616c2063616c6c730000006000830152602082019050919050565b6000612b05602c83613385565b91507f52657475726e206e756d20616e64207061727365642072657475726e206e756d60008301527f206e6f74206d61746368656400000000000000000000000000000000000000006020830152604082019050919050565b6000612b6b600683613385565b91507f48616c74656400000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612bab600b83613385565b91507f737461636b20656d7074790000000000000000000000000000000000000000006000830152602082019050919050565b6000612beb600e83613385565b91507f737461636b206f766572666c6f770000000000000000000000000000000000006000830152602082019050919050565b6000612c2b602183613385565b91507f546f7320616e64206461746173206c656e67746820696e636f6e73697374656e60008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612c91600f83613385565b91507f537461636b206e6f7420656d70747900000000000000000000000000000000006000830152602082019050919050565b6000612cd1601983613385565b91507f696c6c6567616c206c656e67746820666f72205f7061727365000000000000006000830152602082019050919050565b6000612d11602383613385565b91507f546f7320616e6420636f6e66696773206c656e67746820696e636f6e7369737460008301527f656e7400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612d77601d83613385565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612db7601e83613385565b91507f5265666572656e636520746f206f7574206f66206c6f63616c537461636b00006000830152602082019050919050565b6000612df7602a83613385565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b612e598161340a565b82525050565b6000612e6b82846126b3565b915081905092915050565b6000602082019050612e8b6000830184612686565b92915050565b6000602082019050612ea66000830184612677565b92915050565b6000604082019050612ec16000830185612686565b612ece6020830184612e50565b9392505050565b6000602082019050612eea6000830184612695565b92915050565b6000602082019050612f0560008301846126a4565b92915050565b6000602082019050612f2060008301846126e4565b92915050565b60006020820190508181036000830152612f4081846126f3565b905092915050565b60006040820190508181036000830152612f6281856126f3565b9050612f716020830184612686565b9392505050565b60006040820190508181036000830152612f9281856126f3565b9050612fa16020830184612e50565b9392505050565b60006020820190508181036000830152612fc18161272c565b9050919050565b60006020820190508181036000830152612fe18161276c565b9050919050565b60006020820190508181036000830152613001816127ac565b9050919050565b60006020820190508181036000830152613021816127ec565b9050919050565b600060208201905081810360008301526130418161282c565b9050919050565b600060208201905081810360008301526130618161286c565b9050919050565b60006020820190508181036000830152613081816128ac565b9050919050565b600060208201905081810360008301526130a181612912565b9050919050565b600060208201905081810360008301526130c181612952565b9050919050565b600060208201905081810360008301526130e1816129b8565b9050919050565b60006020820190508181036000830152613101816129f8565b9050919050565b6000602082019050818103600083015261312181612a38565b9050919050565b6000602082019050818103600083015261314181612a78565b9050919050565b6000602082019050818103600083015261316181612ab8565b9050919050565b6000602082019050818103600083015261318181612af8565b9050919050565b600060208201905081810360008301526131a181612b5e565b9050919050565b600060208201905081810360008301526131c181612b9e565b9050919050565b600060208201905081810360008301526131e181612bde565b9050919050565b6000602082019050818103600083015261320181612c1e565b9050919050565b6000602082019050818103600083015261322181612c84565b9050919050565b6000602082019050818103600083015261324181612cc4565b9050919050565b6000602082019050818103600083015261326181612d04565b9050919050565b6000602082019050818103600083015261328181612d6a565b9050919050565b600060208201905081810360008301526132a181612daa565b9050919050565b600060208201905081810360008301526132c181612dea565b9050919050565b60006020820190506132dd6000830184612e50565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561330657600080fd5b8060405250919050565b600067ffffffffffffffff82111561332757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561334f57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006133a1826133ea565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061341f8261344a565b9050919050565b600061343182613438565b9050919050565b6000613443826133ea565b9050919050565b60006134558261345c565b9050919050565b6000613467826133ea565b9050919050565b82818337600083830152505050565b60005b8381101561349b578082015181840152602081019050613480565b838111156134aa576000848401525b50505050565b6000601f19601f8301169050919050565b6134ca81613396565b81146134d557600080fd5b50565b6134e1816133a8565b81146134ec57600080fd5b50565b6134f8816133b4565b811461350357600080fd5b50565b61350f8161340a565b811461351a57600080fd5b5056fea264697066735822122045d088c48718412d522c4ef8dfcbd060be542721450d87d643954fc7a776f2d464736f6c634300060c0033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c80637b103999116100595780637b1039991461050657806387c139431461053157806399eb59b91461055c578063dc9031c414610599578063fa2901a5146105d6576100d9565b80630f532d18146104785780631413dc7d146104a357806338c5c08e146104ce57806371938509146104ea576100d9565b366100d95761009833610601565b6100d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100ce906130c8565b60405180910390fd5b005b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea750af66040518163ffffffff1660e01b815260040160206040518083038186803b15801561014357600080fd5b505afa158015610157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017b91906125aa565b1515146101bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b490613188565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631903dcaa306040518263ffffffff1660e01b81526004016102189190612e91565b60206040518083038186803b15801561023057600080fd5b505afa158015610244573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610268919061264e565b146102a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161029f906130e8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166102c8610614565b73ffffffffffffffffffffffffffffffffffffffff16141561031f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031690612fa8565b60405180910390fd5b61032833610652565b610367576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035e90613008565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16637bbf4a3f336040518263ffffffff1660e01b81526004016103c29190612e91565b60206040518083038186803b1580156103da57600080fd5b505afa1580156103ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041291906125fc565b60601c90506060610468826000368080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050610704565b9050600081519050602082018181f35b34801561048457600080fd5b5061048d6107a6565b60405161049a9190612ed5565b60405180910390f35b3480156104af57600080fd5b506104b86107cd565b6040516104c59190612ed5565b60405180910390f35b6104e860048036038101906104e39190612509565b6107f4565b005b61050460048036038101906104ff9190612509565b610b47565b005b34801561051257600080fd5b5061051b610e8f565b6040516105289190612f0b565b60405180910390f35b34801561053d57600080fd5b50610546610eb3565b60405161055391906132c8565b60405180910390f35b34801561056857600080fd5b50610583600480360381019061057e91906125d3565b610ebf565b6040516105909190612ed5565b60405180910390f35b3480156105a557600080fd5b506105c060048036038101906105bb9190612625565b610ed7565b6040516105cd9190612ed5565b60405180910390f35b3480156105e257600080fd5b506105eb610ef8565b6040516105f89190612ef0565b60405180910390f35b600080823b905060008111915050919050565b600061064d7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b6001610f0390919063ffffffff16565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663bb1010e9836040518263ffffffff1660e01b81526004016106ad9190612e76565b60206040518083038186803b1580156106c557600080fd5b505afa1580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd91906125aa565b9050919050565b606061070f83610f23565b61074e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074590613128565b60405180910390fd5b610756610fd5565b600080835160208501866113885a03f43d6040519250601f19601f6020830101168301604052808352806000602085013e8115600181146107965761079d565b8160208501fd5b50505092915050565b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea750af66040518163ffffffff1660e01b815260040160206040518083038186803b15801561085e57600080fd5b505afa158015610872573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089691906125aa565b1515146108d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108cf90613188565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631903dcaa306040518263ffffffff1660e01b81526004016109339190612e91565b60206040518083038186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610983919061264e565b146109c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ba906130e8565b60405180910390fd5b610a016040518060400160405280600a81526020017f2d2d2d2d2d2d2d2d2d2d0000000000000000000000000000000000000000000081525061101a565b610a436040518060400160405280600681526020017f746f733a25730000000000000000000000000000000000000000000000000000815250868690506110b3565b610aa36040518060400160405280600981526020017f746f735b305d3a2573000000000000000000000000000000000000000000000081525086866000818110610a8957fe5b9050602002016020810190610a9e91906124e0565b61114f565b610aab6111eb565b610b38858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083611286565b610b40611444565b5050505050565b600015157f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ea750af66040518163ffffffff1660e01b815260040160206040518083038186803b158015610bb157600080fd5b505afa158015610bc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be991906125aa565b151514610c2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2290613188565b60405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631903dcaa306040518263ffffffff1660e01b8152600401610c869190612e91565b60206040518083038186803b158015610c9e57600080fd5b505afa158015610cb2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd6919061264e565b14610d16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d0d906130e8565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16610d36610614565b73ffffffffffffffffffffffffffffffffffffffff161415610d8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8490612fa8565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dfb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df290613148565b60405180910390fd5b610e88858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848480806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505083611286565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b60008181548110610ee457fe5b906000526020600020016000915090505481565b63c272291660e01b81565b60008260008381526020019081526020016000205460001c905092915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d4c68348836040518263ffffffff1660e01b8152600401610f7e9190612e76565b60206040518083038186803b158015610f9657600080fd5b505afa158015610faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fce91906125aa565b9050919050565b6110187ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b60016110066116c5565b0160016117039092919063ffffffff16565b565b6110b08160405160240161102e9190612f26565b6040516020818303038152906040527f41304fac000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611722565b50565b61114b82826040516024016110c9929190612f78565b6040516020818303038152906040527f9710a9d0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611722565b5050565b6111e78282604051602401611165929190612f48565b6040516020818303038152906040527f319af333000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611722565b5050565b6000808054905014611232576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161122990613208565b60405180910390fd5b600061123c6116c5565b1461127c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127390613048565b60405180910390fd5b61128461174b565b565b61128e6122e2565b600082518551146112d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112cb906131e8565b60405180910390fd5b8351855114611318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130f90613248565b60405180910390fd5b60005b855181101561143c57600085828151811061133257fe5b60200260200101519050611345816117fc565b6113695761136885838151811061135857fe5b6020026020010151828686611841565b5b606061139b88848151811061137a57fe5b602002602001015187858151811061138e57fe5b6020026020010151610704565b90506113a682611944565b156114115760006113b683611969565b905060006113c58784886119a3565b9050818601811461140b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140290613168565b60405180910390fd5b80955050505b61142d88848151811061142057fe5b6020026020010151611a7c565b5050808060010191505061131b565b505050505050565b5b60008080549050111561165c57600061145e6000611b48565b905060008160a01c6bffffffffffffffffffffffff16600281111561147f57fe5b90506000600281111561148e57fe5b81600281111561149a57fe5b14156115715760008260001c905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114e39190612e91565b60206040518083038186803b1580156114fb57600080fd5b505afa15801561150f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611533919061264e565b9050600081111561156a5761156933828473ffffffffffffffffffffffffffffffffffffffff16611b7a9092919063ffffffff16565b5b5050611655565b6001600281111561157e57fe5b81600281111561158a57fe5b141561161957600061159c6000611c00565b90506116128163c272291660e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610704565b5050611654565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90612fc8565b60405180910390fd5b5b5050611445565b600047905060008111156116b2573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156116b0573d6000803e3d6000fd5b505b6116ba611c35565b6116c2611c71565b50565b60006116fe7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b6001611cad90919063ffffffff16565b905090565b8060001b83600084815260200190815260200160002081905550505050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600073ffffffffffffffffffffffffffffffffffffffff1661176b610614565b73ffffffffffffffffffffffffffffffffffffffff16146117c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117b890613028565b60405180910390fd5b6117fa7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b336001611ccd9092919063ffffffff16565b565b60008060001b7f010000000000000000000000000000000000000000000000000000000000000060001b83161415611837576001905061183c565b600090505b919050565b60608061184d85611d02565b9150915060005b825181101561193b578383828151811061186a57fe5b6020026020010151106118b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a990613288565b60405180910390fd5b6000858483815181106118c157fe5b602002602001015161010081106118d457fe5b6020020151905060008383815181106118e957fe5b602002602001015190506000670de0b6b3a764000090508160208b01018051801561192657848102858282041461191f57600080fd5b8381049550505b84825250505050508080600101915050611854565b50505050505050565b60008061195083611969565b141561195f5760009050611964565b600190505b919050565b60008060f07eff00000000000000000000000000000000000000000000000000000000000060001b8416901c90508060001c915050919050565b600080835190506000602082816119b657fe5b06146119f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ee90613228565b60405180910390fd5b60208181611a0157fe5b0483019150610100821115611a4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a42906131c8565b60405180910390fd5b8260051b60005b82811015611a725760208187010151828201880152602081019050611a52565b5050509392505050565b600080805490501415611a8e57611b45565b60016002811115611a9b57fe5b60a01b73ffffffffffffffffffffffffffffffffffffffff1916611abf6000611f84565b1415611b44576000805480611ad057fe5b60019003818190600052602060002001600090559055600060e01b611af56000611f84565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614611b2e57611b2d816000611ff190919063ffffffff16565b5b611b436001600061203690919063ffffffff16565b5b5b50565b6000611b5382611f84565b905081805480611b5f57fe5b60019003818190600052602060002001600090559055919050565b611bfb8363a9059cbb60e01b8484604051602401611b99929190612eac565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612087565b505050565b6000611c0b82611f84565b60001c905081805480611c1a57fe5b60019003818190600052602060002001600090559055919050565b611c6f7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b60006001611ccd9092919063ffffffff16565b565b611cab7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600060016117039092919063ffffffff16565b565b60008260008381526020019081526020016000205460001c905092915050565b8073ffffffffffffffffffffffffffffffffffffffff1660001b83600084815260200190815260200160002081905550505050565b606080611d0e836117fc565b15611d4e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d4590613108565b60405180910390fd5b6000601690505b60ff60001b60ff60001b8516148015611d6e5750600081115b15611d8857808060019003915050600884901c9350611d55565b60008111611dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dc290612fe8565b60405180910390fd5b8067ffffffffffffffff81118015611de257600080fd5b50604051908082528060200260200182016040528015611e115781602001602082028036833780820191505090505b5092508067ffffffffffffffff81118015611e2b57600080fd5b50604051908082528060200260200182016040528015611e5a5781602001602082028036833780820191505090505b50915060005b81811015611e9e5760ff60001b851660001c848281518110611e7e57fe5b602002602001018181525050600885901c94508080600101915050611e60565b506000805b6040811015611f3a576000801b600160001b871614611f2657828210611efe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ef590613088565b60405180910390fd5b60046020820201848381518110611f1157fe5b60200260200101818152505081806001019250505b600186901c95508080600101915050611ea3565b50818114611f7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7490613068565b60405180910390fd5b5050915091565b600080828054905011611fcc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc3906131a8565b60405180910390fd5b81600183805490500381548110611fdf57fe5b90600052602060002001549050919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b8181600281111561204357fe5b60a01b908060018154018082558091505060019003906000526020600020016000909173ffffffffffffffffffffffffffffffffffffffff19169091909150555050565b60606120e9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff1661214e9092919063ffffffff16565b9050600081511115612149578080602001905181019061210991906125aa565b612148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213f906132a8565b60405180910390fd5b5b505050565b606061215d8484600085612166565b90509392505050565b6060824710156121ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a2906130a8565b60405180910390fd5b6121b485610601565b6121f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ea90613268565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff16858760405161221d9190612e5f565b60006040518083038185875af1925050503d806000811461225a576040519150601f19603f3d011682016040523d82523d6000602084013e61225f565b606091505b509150915061226f82828661227b565b92505050949350505050565b6060831561228b578290506122db565b60008351111561229e5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122d29190612f26565b60405180910390fd5b9392505050565b60405180612000016040528061010090602082028036833780820191505090505090565b600081359050612315816134c1565b92915050565b60008083601f84011261232d57600080fd5b8235905067ffffffffffffffff81111561234657600080fd5b60208301915083602082028301111561235e57600080fd5b9250929050565b60008083601f84011261237757600080fd5b8235905067ffffffffffffffff81111561239057600080fd5b6020830191508360208202830111156123a857600080fd5b9250929050565b600082601f8301126123c057600080fd5b81356123d36123ce82613310565b6132e3565b9150818183526020840193506020810190508360005b8381101561241957813586016123ff8882612462565b8452602084019350602083019250506001810190506123e9565b5050505092915050565b600081519050612432816134d8565b92915050565b600081359050612447816134ef565b92915050565b60008151905061245c816134ef565b92915050565b600082601f83011261247357600080fd5b813561248661248182613338565b6132e3565b915080825260208301602083018583830111156124a257600080fd5b6124ad83828461346e565b50505092915050565b6000813590506124c581613506565b92915050565b6000815190506124da81613506565b92915050565b6000602082840312156124f257600080fd5b600061250084828501612306565b91505092915050565b60008060008060006060868803121561252157600080fd5b600086013567ffffffffffffffff81111561253b57600080fd5b6125478882890161231b565b9550955050602086013567ffffffffffffffff81111561256657600080fd5b61257288828901612365565b9350935050604086013567ffffffffffffffff81111561259157600080fd5b61259d888289016123af565b9150509295509295909350565b6000602082840312156125bc57600080fd5b60006125ca84828501612423565b91505092915050565b6000602082840312156125e557600080fd5b60006125f384828501612438565b91505092915050565b60006020828403121561260e57600080fd5b600061261c8482850161244d565b91505092915050565b60006020828403121561263757600080fd5b6000612645848285016124b6565b91505092915050565b60006020828403121561266057600080fd5b600061266e848285016124cb565b91505092915050565b61268081613414565b82525050565b61268f81613396565b82525050565b61269e816133b4565b82525050565b6126ad816133be565b82525050565b60006126be82613364565b6126c8818561337a565b93506126d881856020860161347d565b80840191505092915050565b6126ed81613426565b82525050565b60006126fe8261336f565b6127088185613385565b935061271881856020860161347d565b612721816134b0565b840191505092915050565b6000612739601983613385565b91507f53656e646572206973206e6f7420696e697469616c697a6564000000000000006000830152602082019050919050565b6000612779601483613385565b91507f496e76616c69642068616e646c657220747970650000000000000000000000006000830152602082019050919050565b60006127b9601083613385565b91507f4e6f2064796e616d696320706172616d000000000000000000000000000000006000830152602082019050919050565b60006127f9600e83613385565b91507f496e76616c69642063616c6c65720000000000000000000000000000000000006000830152602082019050919050565b6000612839601583613385565b91507f53656e64657220697320696e697469616c697a656400000000000000000000006000830152602082019050919050565b6000612879601583613385565b91507f4375626520636f756e746572206e6f74207a65726f00000000000000000000006000830152602082019050919050565b60006128b9602283613385565b91507f4c6f636174696f6e20636f756e74206c657373207468616e2072656620636f7560008301527f6e740000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061291f602083613385565b91507f4c6f636174696f6e20636f756e7420657863656564732072656620636f756e746000830152602082019050919050565b600061295f602683613385565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129c5601483613385565b91507f4e6f7420616c6c6f7765642066726f6d20454f410000000000000000000000006000830152602082019050919050565b6000612a05600683613385565b91507f42616e6e656400000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612a45600d83613385565b91507f53746174696320706172616d73000000000000000000000000000000000000006000830152602082019050919050565b6000612a85600f83613385565b91507f496e76616c69642068616e646c657200000000000000000000000000000000006000830152602082019050919050565b6000612ac5601d83613385565b91507f446f6573206e6f7420616c6c6f772065787465726e616c2063616c6c730000006000830152602082019050919050565b6000612b05602c83613385565b91507f52657475726e206e756d20616e64207061727365642072657475726e206e756d60008301527f206e6f74206d61746368656400000000000000000000000000000000000000006020830152604082019050919050565b6000612b6b600683613385565b91507f48616c74656400000000000000000000000000000000000000000000000000006000830152602082019050919050565b6000612bab600b83613385565b91507f737461636b20656d7074790000000000000000000000000000000000000000006000830152602082019050919050565b6000612beb600e83613385565b91507f737461636b206f766572666c6f770000000000000000000000000000000000006000830152602082019050919050565b6000612c2b602183613385565b91507f546f7320616e64206461746173206c656e67746820696e636f6e73697374656e60008301527f74000000000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612c91600f83613385565b91507f537461636b206e6f7420656d70747900000000000000000000000000000000006000830152602082019050919050565b6000612cd1601983613385565b91507f696c6c6567616c206c656e67746820666f72205f7061727365000000000000006000830152602082019050919050565b6000612d11602383613385565b91507f546f7320616e6420636f6e66696773206c656e67746820696e636f6e7369737460008301527f656e7400000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612d77601d83613385565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612db7601e83613385565b91507f5265666572656e636520746f206f7574206f66206c6f63616c537461636b00006000830152602082019050919050565b6000612df7602a83613385565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b612e598161340a565b82525050565b6000612e6b82846126b3565b915081905092915050565b6000602082019050612e8b6000830184612686565b92915050565b6000602082019050612ea66000830184612677565b92915050565b6000604082019050612ec16000830185612686565b612ece6020830184612e50565b9392505050565b6000602082019050612eea6000830184612695565b92915050565b6000602082019050612f0560008301846126a4565b92915050565b6000602082019050612f2060008301846126e4565b92915050565b60006020820190508181036000830152612f4081846126f3565b905092915050565b60006040820190508181036000830152612f6281856126f3565b9050612f716020830184612686565b9392505050565b60006040820190508181036000830152612f9281856126f3565b9050612fa16020830184612e50565b9392505050565b60006020820190508181036000830152612fc18161272c565b9050919050565b60006020820190508181036000830152612fe18161276c565b9050919050565b60006020820190508181036000830152613001816127ac565b9050919050565b60006020820190508181036000830152613021816127ec565b9050919050565b600060208201905081810360008301526130418161282c565b9050919050565b600060208201905081810360008301526130618161286c565b9050919050565b60006020820190508181036000830152613081816128ac565b9050919050565b600060208201905081810360008301526130a181612912565b9050919050565b600060208201905081810360008301526130c181612952565b9050919050565b600060208201905081810360008301526130e1816129b8565b9050919050565b60006020820190508181036000830152613101816129f8565b9050919050565b6000602082019050818103600083015261312181612a38565b9050919050565b6000602082019050818103600083015261314181612a78565b9050919050565b6000602082019050818103600083015261316181612ab8565b9050919050565b6000602082019050818103600083015261318181612af8565b9050919050565b600060208201905081810360008301526131a181612b5e565b9050919050565b600060208201905081810360008301526131c181612b9e565b9050919050565b600060208201905081810360008301526131e181612bde565b9050919050565b6000602082019050818103600083015261320181612c1e565b9050919050565b6000602082019050818103600083015261322181612c84565b9050919050565b6000602082019050818103600083015261324181612cc4565b9050919050565b6000602082019050818103600083015261326181612d04565b9050919050565b6000602082019050818103600083015261328181612d6a565b9050919050565b600060208201905081810360008301526132a181612daa565b9050919050565b600060208201905081810360008301526132c181612dea565b9050919050565b60006020820190506132dd6000830184612e50565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561330657600080fd5b8060405250919050565b600067ffffffffffffffff82111561332757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561334f57600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b60006133a1826133ea565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061341f8261344a565b9050919050565b600061343182613438565b9050919050565b6000613443826133ea565b9050919050565b60006134558261345c565b9050919050565b6000613467826133ea565b9050919050565b82818337600083830152505050565b60005b8381101561349b578082015181840152602081019050613480565b838111156134aa576000848401525b50505050565b6000601f19601f8301169050919050565b6134ca81613396565b81146134d557600080fd5b50565b6134e1816133a8565b81146134ec57600080fd5b50565b6134f8816133b4565b811461350357600080fd5b50565b61350f8161340a565b811461351a57600080fd5b5056fea264697066735822122045d088c48718412d522c4ef8dfcbd060be542721450d87d643954fc7a776f2d464736f6c634300060c0033",
  "devdoc": {
    "author": "Ben Huang",
    "kind": "dev",
    "methods": {
      "batchExec(address[],bytes32[],bytes[])": {
        "params": {
          "configs": "The configurations of executing cubes.",
          "datas": "The combo datas.",
          "tos": "The handlers of combo."
        }
      },
      "execs(address[],bytes32[],bytes[])": {
        "details": "This function can only be called through the handler, which makes the caller become proxy itself."
      }
    },
    "title": "The entrance of Furucombo",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "batchExec(address[],bytes32[],bytes[])": {
        "notice": "Combo execution function. Including three phases: pre-process, exection and post-process."
      },
      "execs(address[],bytes32[],bytes[])": {
        "notice": "The execution interface for callback function to be executed."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1468,
        "contract": "contracts/Proxy.sol:Proxy",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 1472,
        "contract": "contracts/Proxy.sol:Proxy",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}