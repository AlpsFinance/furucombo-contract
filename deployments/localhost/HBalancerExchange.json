{
  "address": "0x7F3A7c95a8c689aa34855b60fc69B5c0e47bF6e7",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXCHANGE_PROXY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        }
      ],
      "name": "batchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExchangeProxy.Swap[]",
          "name": "swaps",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        }
      ],
      "name": "batchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExchangeProxy.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "limitReturnAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IExchangeProxy.Swap[][]",
          "name": "swapSequences",
          "type": "tuple[][]"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        }
      ],
      "name": "multihopBatchSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minTotalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "smartSwapExactIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxTotalAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nPools",
          "type": "uint256"
        }
      ],
      "name": "smartSwapExactOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalAmountIn",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x418138d3d4adb34f594c2b6ef051389ac8a904b3f24db60055d3c2191211c31a",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x7F3A7c95a8c689aa34855b60fc69B5c0e47bF6e7",
    "transactionIndex": 0,
    "gasUsed": "2884806",
    "logsBloom": "0x
    "blockHash": "0x68f089f4cb6e27658bcdf15ab9929dd7c6a4f6ec11a05096a88fd717e49902f7",
    "transactionHash": "0x418138d3d4adb34f594c2b6ef051389ac8a904b3f24db60055d3c2191211c31a",
    "logs": [],
    "blockNumber": 13356615,
    "cumulativeGasUsed": "2884806",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXCHANGE_PROXY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchangeProxy.Swap[]\",\"name\":\"swaps\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"batchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limitReturnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IExchangeProxy.Swap[][]\",\"name\":\"swapSequences\",\"type\":\"tuple[][]\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"}],\"name\":\"multihopBatchSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minTotalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"smartSwapExactIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTotalAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nPools\",\"type\":\"uint256\"}],\"name\":\"smartSwapExactOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/balancer/HBalancerExchange.sol\":\"HBalancerExchange\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/balancer/HBalancerExchange.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"./IExchangeProxy.sol\\\";\\nimport \\\"../HandlerBase.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\ncontract HBalancerExchange is HandlerBase {\\n    using SafeERC20 for IERC20;\\n\\n    // prettier-ignore\\n    address public constant EXCHANGE_PROXY = 0x3E66B66Fd1d0b02fDa6C811Da9E0547970DB2f21;\\n    // prettier-ignore\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HBalancerExchange\\\";\\n    }\\n\\n    function batchSwapExactIn(\\n        IExchangeProxy.Swap[] calldata swaps,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut\\n    ) external payable returns (uint256 totalAmountOut) {\\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\\n        totalAmountIn = _getBalance(tokenIn, totalAmountIn);\\n\\n        if (tokenIn == ETH_ADDRESS) {\\n            try\\n                balancer.batchSwapExactIn{value: totalAmountIn}(\\n                    swaps,\\n                    tokenIn,\\n                    tokenOut,\\n                    totalAmountIn,\\n                    minTotalAmountOut\\n                )\\n            returns (uint256 amount) {\\n                totalAmountOut = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"batchSwapExactIn\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"batchSwapExactIn\\\");\\n            }\\n        } else {\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);\\n            try\\n                balancer.batchSwapExactIn(\\n                    swaps,\\n                    tokenIn,\\n                    tokenOut,\\n                    totalAmountIn,\\n                    minTotalAmountOut\\n                )\\n            returns (uint256 amount) {\\n                totalAmountOut = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"batchSwapExactIn\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"batchSwapExactIn\\\");\\n            }\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\\n        }\\n\\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\\n    }\\n\\n    function batchSwapExactOut(\\n        IExchangeProxy.Swap[] calldata swaps,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn\\n    ) external payable returns (uint256 totalAmountIn) {\\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\\n        maxTotalAmountIn = _getBalance(tokenIn, maxTotalAmountIn);\\n\\n        if (tokenIn == ETH_ADDRESS) {\\n            try\\n                balancer.batchSwapExactOut{value: maxTotalAmountIn}(\\n                    swaps,\\n                    tokenIn,\\n                    tokenOut,\\n                    maxTotalAmountIn\\n                )\\n            returns (uint256 amount) {\\n                totalAmountIn = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"batchSwapExactOut\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"batchSwapExactOut\\\");\\n            }\\n        } else {\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);\\n            try\\n                balancer.batchSwapExactOut(\\n                    swaps,\\n                    tokenIn,\\n                    tokenOut,\\n                    maxTotalAmountIn\\n                )\\n            returns (uint256 amount) {\\n                totalAmountIn = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"batchSwapExactOut\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"batchSwapExactOut\\\");\\n            }\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\\n        }\\n\\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\\n    }\\n\\n    function multihopBatchSwapExactIn(\\n        IExchangeProxy.Swap[][] calldata swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut\\n    ) external payable returns (uint256 totalAmountOut) {\\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\\n        totalAmountIn = _getBalance(tokenIn, totalAmountIn);\\n        if (tokenIn == ETH_ADDRESS) {\\n            try\\n                balancer.multihopBatchSwapExactIn{value: totalAmountIn}(\\n                    swapSequences,\\n                    tokenIn,\\n                    tokenOut,\\n                    totalAmountIn,\\n                    minTotalAmountOut\\n                )\\n            returns (uint256 amount) {\\n                totalAmountOut = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"multihopBatchSwapExactIn\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"multihopBatchSwapExactIn\\\");\\n            }\\n        } else {\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);\\n            try\\n                balancer.multihopBatchSwapExactIn(\\n                    swapSequences,\\n                    tokenIn,\\n                    tokenOut,\\n                    totalAmountIn,\\n                    minTotalAmountOut\\n                )\\n            returns (uint256 amount) {\\n                totalAmountOut = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"multihopBatchSwapExactIn\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"multihopBatchSwapExactIn\\\");\\n            }\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\\n        }\\n\\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\\n    }\\n\\n    function multihopBatchSwapExactOut(\\n        IExchangeProxy.Swap[][] calldata swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn\\n    ) external payable returns (uint256 totalAmountIn) {\\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\\n        maxTotalAmountIn = _getBalance(tokenIn, maxTotalAmountIn);\\n\\n        if (tokenIn == ETH_ADDRESS) {\\n            try\\n                balancer.multihopBatchSwapExactOut{value: maxTotalAmountIn}(\\n                    swapSequences,\\n                    tokenIn,\\n                    tokenOut,\\n                    maxTotalAmountIn\\n                )\\n            returns (uint256 amount) {\\n                totalAmountIn = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"multihopBatchSwapExactOut\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"multihopBatchSwapExactOut\\\");\\n            }\\n        } else {\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);\\n            try\\n                balancer.multihopBatchSwapExactOut(\\n                    swapSequences,\\n                    tokenIn,\\n                    tokenOut,\\n                    maxTotalAmountIn\\n                )\\n            returns (uint256 amount) {\\n                totalAmountIn = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"multihopBatchSwapExactOut\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"multihopBatchSwapExactOut\\\");\\n            }\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\\n        }\\n\\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\\n    }\\n\\n    function smartSwapExactIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut,\\n        uint256 nPools\\n    ) external payable returns (uint256 totalAmountOut) {\\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\\n\\n        totalAmountIn = _getBalance(tokenIn, totalAmountIn);\\n        if (tokenIn == ETH_ADDRESS) {\\n            try\\n                balancer.smartSwapExactIn{value: totalAmountIn}(\\n                    tokenIn,\\n                    tokenOut,\\n                    totalAmountIn,\\n                    minTotalAmountOut,\\n                    nPools\\n                )\\n            returns (uint256 amount) {\\n                totalAmountOut = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"smartSwapExactIn\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"smartSwapExactIn\\\");\\n            }\\n        } else {\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, totalAmountIn);\\n            try\\n                balancer.smartSwapExactIn(\\n                    tokenIn,\\n                    tokenOut,\\n                    totalAmountIn,\\n                    minTotalAmountOut,\\n                    nPools\\n                )\\n            returns (uint256 amount) {\\n                totalAmountOut = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"smartSwapExactIn\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"smartSwapExactIn\\\");\\n            }\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\\n        }\\n\\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\\n    }\\n\\n    function smartSwapExactOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountOut,\\n        uint256 maxTotalAmountIn,\\n        uint256 nPools\\n    ) external payable returns (uint256 totalAmountIn) {\\n        IExchangeProxy balancer = IExchangeProxy(EXCHANGE_PROXY);\\n        maxTotalAmountIn = _getBalance(tokenIn, maxTotalAmountIn);\\n\\n        if (tokenIn == ETH_ADDRESS) {\\n            try\\n                balancer.smartSwapExactOut{value: maxTotalAmountIn}(\\n                    tokenIn,\\n                    tokenOut,\\n                    totalAmountOut,\\n                    maxTotalAmountIn,\\n                    nPools\\n                )\\n            returns (uint256 amount) {\\n                totalAmountIn = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"smartSwapExactOut\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"smartSwapExactOut\\\");\\n            }\\n        } else {\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, maxTotalAmountIn);\\n            try\\n                balancer.smartSwapExactOut(\\n                    tokenIn,\\n                    tokenOut,\\n                    totalAmountOut,\\n                    maxTotalAmountIn,\\n                    nPools\\n                )\\n            returns (uint256 amount) {\\n                totalAmountIn = amount;\\n            } catch Error(string memory reason) {\\n                _revertMsg(\\\"smartSwapExactOut\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"smartSwapExactOut\\\");\\n            }\\n            IERC20(tokenIn).safeApprove(EXCHANGE_PROXY, 0);\\n        }\\n\\n        if (tokenOut != ETH_ADDRESS) _updateToken(tokenOut);\\n    }\\n}\\n\",\"keccak256\":\"0xf344efafdc037c4c3157d2eb86899ba3b8b7394405f865ab6db075e6e9618926\"},\"contracts/handlers/balancer/IExchangeProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IExchangeProxy {\\n    struct Swap {\\n        address pool;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 swapAmount; // tokenInAmount / tokenOutAmount\\n        uint256 limitReturnAmount; // minAmountOut / maxAmountIn\\n        uint256 maxPrice;\\n    }\\n\\n    function batchSwapExactIn(\\n        Swap[] calldata swaps,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut\\n    ) external payable returns (uint256 totalAmountOut);\\n\\n    function batchSwapExactOut(\\n        Swap[] calldata swaps,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn\\n    ) external payable returns (uint256 totalAmountIn);\\n\\n    function multihopBatchSwapExactIn(\\n        Swap[][] calldata swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut\\n    ) external payable returns (uint256 totalAmountOut);\\n\\n    function multihopBatchSwapExactOut(\\n        Swap[][] calldata swapSequences,\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 maxTotalAmountIn\\n    ) external payable returns (uint256 totalAmountIn);\\n\\n    function smartSwapExactIn(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountIn,\\n        uint256 minTotalAmountOut,\\n        uint256 nPools\\n    ) external payable returns (uint256 totalAmountOut);\\n\\n    function smartSwapExactOut(\\n        address tokenIn,\\n        address tokenOut,\\n        uint256 totalAmountOut,\\n        uint256 maxTotalAmountIn,\\n        uint256 nPools\\n    ) external payable returns (uint256 totalAmountIn);\\n}\\n\",\"keccak256\":\"0x7975f12f27f1eef22276b24a823a141a14679e5f06839f7338bd892238c90899\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061335e806100206000396000f3fe6080604052600436106100f35760003560e01c806399eb59b91161008a578063dc9031c411610059578063dc9031c414610306578063e2b3974614610343578063f5f5ba7214610373578063fa2901a51461039e576100f3565b806399eb59b914610264578063a734f06e146102a1578063b40f39ee146102cc578063c2722916146102fc576100f3565b80636fca4f8f116100c65780636fca4f8f146101ae57806386b2ecc4146101d95780638743ad581461020957806387c1394314610239576100f3565b80630f532d18146100f85780631413dc7d1461012357806321b0eb851461014e5780632db581341461017e575b600080fd5b34801561010457600080fd5b5061010d6103c9565b60405161011a9190612f06565b60405180910390f35b34801561012f57600080fd5b506101386103f0565b6040516101459190612f06565b60405180910390f35b6101686004803603810190610163919061240d565b610417565b6040516101759190612ffe565b60405180910390f35b61019860048036038101906101939190612596565b6107c8565b6040516101a59190612ffe565b60405180910390f35b3480156101ba57600080fd5b506101c3610b79565b6040516101d09190612cf2565b60405180910390f35b6101f360048036038101906101ee9190612484565b610b91565b6040516102009190612ffe565b60405180910390f35b610223600480360381019061021e9190612616565b610f42565b6040516102309190612ffe565b60405180910390f35b34801561024557600080fd5b5061024e6112f8565b60405161025b9190612ffe565b60405180910390f35b34801561027057600080fd5b5061028b600480360381019061028691906126d1565b611304565b6040516102989190612f06565b60405180910390f35b3480156102ad57600080fd5b506102b661131c565b6040516102c39190612cf2565b60405180910390f35b6102e660048036038101906102e1919061240d565b611334565b6040516102f39190612ffe565b60405180910390f35b6103046116e5565b005b34801561031257600080fd5b5061032d600480360381019061032891906126fa565b611720565b60405161033a9190612f06565b60405180910390f35b61035d60048036038101906103589190612504565b611741565b60405161036a9190612ffe565b60405180910390f35b34801561037f57600080fd5b50610388611af7565b6040516103959190612f3c565b60405180910390f35b3480156103aa57600080fd5b506103b3611b34565b6040516103c09190612f21565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f21905061043b8786611b3f565b945073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156105bc578073ffffffffffffffffffffffffffffffffffffffff166321b0eb858689898989896040518763ffffffff1660e01b81526004016104c7959493929190612d36565b6020604051808303818588803b1580156104e057600080fd5b505af19350505050801561051257506040513d601f19601f8201168201806040525081019061050f9190612723565b60015b6105b25761051e613216565b80610529575061056e565b6105686040518060400160405280601081526020017f736d617274537761704578616374496e0000000000000000000000000000000081525082611c89565b506105ad565b6105ac6040518060400160405280601081526020017f736d617274537761704578616374496e00000000000000000000000000000000815250611d01565b5b6105b7565b809250505b61076d565b6105fb733e66b66fd1d0b02fda6c811da9e0547970db2f21868973ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff166321b0eb8588888888886040518663ffffffff1660e01b815260040161063c959493929190612d36565b602060405180830381600087803b15801561065657600080fd5b505af192505050801561068757506040513d601f19601f820116820180604052508101906106849190612723565b60015b61072757610693613216565b8061069e57506106e3565b6106dd6040518060400160405280601081526020017f736d617274537761704578616374496e0000000000000000000000000000000081525082611c89565b50610722565b6107216040518060400160405280601081526020017f736d617274537761704578616374496e00000000000000000000000000000000815250611d01565b5b61072c565b809250505b61076c733e66b66fd1d0b02fda6c811da9e0547970db2f2160008973ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146107be576107bd86611ea1565b5b5095945050505050565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f2190506107ec8584611b3f565b925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561096d578073ffffffffffffffffffffffffffffffffffffffff16632db581348489898989896040518763ffffffff1660e01b8152600401610878959493929190612e5c565b6020604051808303818588803b15801561089157600080fd5b505af1935050505080156108c357506040513d601f19601f820116820180604052508101906108c09190612723565b60015b610963576108cf613216565b806108da575061091f565b6109196040518060400160405280601181526020017f62617463685377617045786163744f757400000000000000000000000000000081525082611c89565b5061095e565b61095d6040518060400160405280601181526020017f62617463685377617045786163744f7574000000000000000000000000000000815250611d01565b5b610968565b809250505b610b1e565b6109ac733e66b66fd1d0b02fda6c811da9e0547970db2f21848773ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff16632db5813488888888886040518663ffffffff1660e01b81526004016109ed959493929190612e5c565b602060405180830381600087803b158015610a0757600080fd5b505af1925050508015610a3857506040513d601f19601f82011682018060405250810190610a359190612723565b60015b610ad857610a44613216565b80610a4f5750610a94565b610a8e6040518060400160405280601181526020017f62617463685377617045786163744f757400000000000000000000000000000081525082611c89565b50610ad3565b610ad26040518060400160405280601181526020017f62617463685377617045786163744f7574000000000000000000000000000000815250611d01565b5b610add565b809250505b610b1d733e66b66fd1d0b02fda6c811da9e0547970db2f2160008773ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610b6f57610b6e84611ea1565b5b5095945050505050565b733e66b66fd1d0b02fda6c811da9e0547970db2f2181565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f219050610bb58584611b3f565b925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610d36578073ffffffffffffffffffffffffffffffffffffffff166386b2ecc48489898989896040518763ffffffff1660e01b8152600401610c41959493929190612db2565b6020604051808303818588803b158015610c5a57600080fd5b505af193505050508015610c8c57506040513d601f19601f82011682018060405250810190610c899190612723565b60015b610d2c57610c98613216565b80610ca35750610ce8565b610ce26040518060400160405280601981526020017f6d756c7469686f7042617463685377617045786163744f75740000000000000081525082611c89565b50610d27565b610d266040518060400160405280601981526020017f6d756c7469686f7042617463685377617045786163744f757400000000000000815250611d01565b5b610d31565b809250505b610ee7565b610d75733e66b66fd1d0b02fda6c811da9e0547970db2f21848773ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff166386b2ecc488888888886040518663ffffffff1660e01b8152600401610db6959493929190612db2565b602060405180830381600087803b158015610dd057600080fd5b505af1925050508015610e0157506040513d601f19601f82011682018060405250810190610dfe9190612723565b60015b610ea157610e0d613216565b80610e185750610e5d565b610e576040518060400160405280601981526020017f6d756c7469686f7042617463685377617045786163744f75740000000000000081525082611c89565b50610e9c565b610e9b6040518060400160405280601981526020017f6d756c7469686f7042617463685377617045786163744f757400000000000000815250611d01565b5b610ea6565b809250505b610ee6733e66b66fd1d0b02fda6c811da9e0547970db2f2160008773ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610f3857610f3784611ea1565b5b5095945050505050565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f219050610f668685611b3f565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156110e9578073ffffffffffffffffffffffffffffffffffffffff16638743ad58858a8a8a8a8a8a6040518863ffffffff1660e01b8152600401610ff496959493929190612eaa565b6020604051808303818588803b15801561100d57600080fd5b505af19350505050801561103f57506040513d601f19601f8201168201806040525081019061103c9190612723565b60015b6110df5761104b613216565b80611056575061109b565b6110956040518060400160405280601081526020017f6261746368537761704578616374496e0000000000000000000000000000000081525082611c89565b506110da565b6110d96040518060400160405280601081526020017f6261746368537761704578616374496e00000000000000000000000000000000815250611d01565b5b6110e4565b809250505b61129c565b611128733e66b66fd1d0b02fda6c811da9e0547970db2f21858873ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff16638743ad588989898989896040518763ffffffff1660e01b815260040161116b96959493929190612eaa565b602060405180830381600087803b15801561118557600080fd5b505af19250505080156111b657506040513d601f19601f820116820180604052508101906111b39190612723565b60015b611256576111c2613216565b806111cd5750611212565b61120c6040518060400160405280601081526020017f6261746368537761704578616374496e0000000000000000000000000000000081525082611c89565b50611251565b6112506040518060400160405280601081526020017f6261746368537761704578616374496e00000000000000000000000000000000815250611d01565b5b61125b565b809250505b61129b733e66b66fd1d0b02fda6c811da9e0547970db2f2160008873ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146112ed576112ec85611ea1565b5b509695505050505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f2190506113588785611b3f565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156114d9578073ffffffffffffffffffffffffffffffffffffffff1663b40f39ee8589898989896040518763ffffffff1660e01b81526004016113e4959493929190612d36565b6020604051808303818588803b1580156113fd57600080fd5b505af19350505050801561142f57506040513d601f19601f8201168201806040525081019061142c9190612723565b60015b6114cf5761143b613216565b80611446575061148b565b6114856040518060400160405280601181526020017f736d6172745377617045786163744f757400000000000000000000000000000081525082611c89565b506114ca565b6114c96040518060400160405280601181526020017f736d6172745377617045786163744f7574000000000000000000000000000000815250611d01565b5b6114d4565b809250505b61168a565b611518733e66b66fd1d0b02fda6c811da9e0547970db2f21858973ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663b40f39ee88888888886040518663ffffffff1660e01b8152600401611559959493929190612d36565b602060405180830381600087803b15801561157357600080fd5b505af19250505080156115a457506040513d601f19601f820116820180604052508101906115a19190612723565b60015b611644576115b0613216565b806115bb5750611600565b6115fa6040518060400160405280601181526020017f736d6172745377617045786163744f757400000000000000000000000000000081525082611c89565b5061163f565b61163e6040518060400160405280601181526020017f736d6172745377617045786163744f7574000000000000000000000000000000815250611d01565b5b611649565b809250505b611689733e66b66fd1d0b02fda6c811da9e0547970db2f2160008973ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146116db576116da86611ea1565b5b5095945050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171790612f7e565b60405180910390fd5b6000818154811061172d57fe5b906000526020600020016000915090505481565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f2190506117658685611b3f565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156118e8578073ffffffffffffffffffffffffffffffffffffffff1663e2b39746858a8a8a8a8a8a6040518863ffffffff1660e01b81526004016117f396959493929190612e00565b6020604051808303818588803b15801561180c57600080fd5b505af19350505050801561183e57506040513d601f19601f8201168201806040525081019061183b9190612723565b60015b6118de5761184a613216565b80611855575061189a565b6118946040518060400160405280601881526020017f6d756c7469686f704261746368537761704578616374496e000000000000000081525082611c89565b506118d9565b6118d86040518060400160405280601881526020017f6d756c7469686f704261746368537761704578616374496e0000000000000000815250611d01565b5b6118e3565b809250505b611a9b565b611927733e66b66fd1d0b02fda6c811da9e0547970db2f21858873ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663e2b397468989898989896040518763ffffffff1660e01b815260040161196a96959493929190612e00565b602060405180830381600087803b15801561198457600080fd5b505af19250505080156119b557506040513d601f19601f820116820180604052508101906119b29190612723565b60015b611a55576119c1613216565b806119cc5750611a11565b611a0b6040518060400160405280601881526020017f6d756c7469686f704261746368537761704578616374496e000000000000000081525082611c89565b50611a50565b611a4f6040518060400160405280601881526020017f6d756c7469686f704261746368537761704578616374496e0000000000000000815250611d01565b5b611a5a565b809250505b611a9a733e66b66fd1d0b02fda6c811da9e0547970db2f2160008873ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611aec57611aeb85611ea1565b5b509695505050505050565b60606040518060400160405280601181526020017f4842616c616e63657245786368616e6765000000000000000000000000000000815250905090565b63c272291660e01b81565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214611b7057819050611c83565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611bea575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15611bf757479050611c83565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c309190612cf2565b60206040518083038186803b158015611c4857600080fd5b505afa158015611c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c809190612723565b90505b92915050565b611c99611c94611eb8565b611ef6565b611ca1611af7565b8383604051602001611cb69493929190612c93565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf89190612f3c565b60405180910390fd5b611d40816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250611c89565b50565b6000811480611ddc575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611d8a929190612d0d565b60206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda9190612723565b145b611e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1290612fde565b60405180910390fd5b611e9c8363095ea7b360e01b8484604051602401611e3a929190612d89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061203d565b505050565b611eb581600061210490919063ffffffff16565b50565b6000611ef17ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161214990919063ffffffff16565b905090565b60606000821415611f3e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612038565b6000808390505b6000811115611f68578180600101925050600a8181611f6057fe5b049050611f45565b5060608167ffffffffffffffff81118015611f8257600080fd5b506040519080825280601f01601f191660200182016040528015611fb55781602001600182028036833780820191505090505b50905060008290505b600081111561203157600a8581611fd157fe5b0660300160f81b826001830381518110611fe757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161202057fe5b049450808060019003915050611fbe565b5080925050505b919050565b606061209f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166121699092919063ffffffff16565b90506000815111156120ff57808060200190518101906120bf91906126a8565b6120fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f590612fbe565b60405180910390fd5b5b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60008260008381526020019081526020016000205460001c905092915050565b60606121788484600085612181565b90509392505050565b6060824710156121c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bd90612f5e565b60405180910390fd5b6121cf85612296565b61220e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220590612f9e565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516122389190612c7c565b60006040518083038185875af1925050503d8060008114612275576040519150601f19603f3d011682016040523d82523d6000602084013e61227a565b606091505b509150915061228a8282866122a9565b92505050949350505050565b600080823b905060008111915050919050565b606083156122b957829050612309565b6000835111156122cc5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123009190612f3c565b60405180910390fd5b9392505050565b60008135905061231f816132cc565b92915050565b60008083601f84011261233757600080fd5b8235905067ffffffffffffffff81111561235057600080fd5b60208301915083602082028301111561236857600080fd5b9250929050565b60008083601f84011261238157600080fd5b8235905067ffffffffffffffff81111561239a57600080fd5b6020830191508360c08202830111156123b257600080fd5b9250929050565b6000815190506123c8816132e3565b92915050565b6000813590506123dd816132fa565b92915050565b6000813590506123f281613311565b92915050565b60008151905061240781613311565b92915050565b600080600080600060a0868803121561242557600080fd5b600061243388828901612310565b955050602061244488828901612310565b9450506040612455888289016123e3565b9350506060612466888289016123e3565b9250506080612477888289016123e3565b9150509295509295909350565b60008060008060006080868803121561249c57600080fd5b600086013567ffffffffffffffff8111156124b657600080fd5b6124c288828901612325565b955095505060206124d588828901612310565b93505060406124e688828901612310565b92505060606124f7888289016123e3565b9150509295509295909350565b60008060008060008060a0878903121561251d57600080fd5b600087013567ffffffffffffffff81111561253757600080fd5b61254389828a01612325565b9650965050602061255689828a01612310565b945050604061256789828a01612310565b935050606061257889828a016123e3565b925050608061258989828a016123e3565b9150509295509295509295565b6000806000806000608086880312156125ae57600080fd5b600086013567ffffffffffffffff8111156125c857600080fd5b6125d48882890161236f565b955095505060206125e788828901612310565b93505060406125f888828901612310565b9250506060612609888289016123e3565b9150509295509295909350565b60008060008060008060a0878903121561262f57600080fd5b600087013567ffffffffffffffff81111561264957600080fd5b61265589828a0161236f565b9650965050602061266889828a01612310565b945050604061267989828a01612310565b935050606061268a89828a016123e3565b925050608061269b89828a016123e3565b9150509295509295509295565b6000602082840312156126ba57600080fd5b60006126c8848285016123b9565b91505092915050565b6000602082840312156126e357600080fd5b60006126f1848285016123ce565b91505092915050565b60006020828403121561270c57600080fd5b600061271a848285016123e3565b91505092915050565b60006020828403121561273557600080fd5b6000612743848285016123f8565b91505092915050565b600061275984848461280e565b90509392505050565b600061276e8383612bb3565b60c08301905092915050565b61278381613147565b82525050565b61279281613147565b82525050565b60006127a4838561305d565b9350836020840285016127b684613019565b8060005b878110156127fc5784840389526127d182846130ce565b6127dc86828461274c565b95506127e784613043565b935060208b019a5050506001810190506127ba565b50829750879450505050509392505050565b600061281a838561306e565b935061282582613023565b8060005b8581101561285e5761283b8284613125565b6128458882612762565b975061285083613050565b925050600181019050612829565b5085925050509392505050565b6000612877838561307f565b935061288282613023565b8060005b858110156128bb576128988284613125565b6128a28882612762565b97506128ad83613050565b925050600181019050612886565b5085925050509392505050565b6128d181613165565b82525050565b6128e08161316f565b82525050565b60006128f18261302d565b6128fb8185613090565b935061290b8185602086016131c5565b80840191505092915050565b600061292282613038565b61292c818561309b565b935061293c8185602086016131c5565b612945816131f8565b840191505092915050565b600061295b82613038565b61296581856130ac565b93506129758185602086016131c5565b80840191505092915050565b600061298e60268361309b565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129f460148361309b565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b6000612a34601d8361309b565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612a746001836130ac565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000612ab4602a8361309b565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b1a6002836130ac565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000612b5a60368361309b565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b60c08201612bc460008301836130b7565b612bd1600085018261277a565b50612bdf60208301836130b7565b612bec602085018261277a565b50612bfa60408301836130b7565b612c07604085018261277a565b50612c156060830183613130565b612c226060850182612c5e565b50612c306080830183613130565b612c3d6080850182612c5e565b50612c4b60a0830183613130565b612c5860a0850182612c5e565b50505050565b612c67816131bb565b82525050565b612c76816131bb565b82525050565b6000612c8882846128e6565b915081905092915050565b6000612c9f8287612950565b9150612caa82612a67565b9150612cb68286612950565b9150612cc182612a67565b9150612ccd8285612950565b9150612cd882612b0d565b9150612ce48284612950565b915081905095945050505050565b6000602082019050612d076000830184612789565b92915050565b6000604082019050612d226000830185612789565b612d2f6020830184612789565b9392505050565b600060a082019050612d4b6000830188612789565b612d586020830187612789565b612d656040830186612c6d565b612d726060830185612c6d565b612d7f6080830184612c6d565b9695505050505050565b6000604082019050612d9e6000830185612789565b612dab6020830184612c6d565b9392505050565b60006080820190508181036000830152612dcd818789612798565b9050612ddc6020830186612789565b612de96040830185612789565b612df66060830184612c6d565b9695505050505050565b600060a0820190508181036000830152612e1b81888a612798565b9050612e2a6020830187612789565b612e376040830186612789565b612e446060830185612c6d565b612e516080830184612c6d565b979650505050505050565b60006080820190508181036000830152612e7781878961286b565b9050612e866020830186612789565b612e936040830185612789565b612ea06060830184612c6d565b9695505050505050565b600060a0820190508181036000830152612ec581888a61286b565b9050612ed46020830187612789565b612ee16040830186612789565b612eee6060830185612c6d565b612efb6080830184612c6d565b979650505050505050565b6000602082019050612f1b60008301846128c8565b92915050565b6000602082019050612f3660008301846128d7565b92915050565b60006020820190508181036000830152612f568184612917565b905092915050565b60006020820190508181036000830152612f7781612981565b9050919050565b60006020820190508181036000830152612f97816129e7565b9050919050565b60006020820190508181036000830152612fb781612a27565b9050919050565b60006020820190508181036000830152612fd781612aa7565b9050919050565b60006020820190508181036000830152612ff781612b4d565b9050919050565b60006020820190506130136000830184612c6d565b92915050565b6000819050919050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600060c082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006130c66020840184612310565b905092915050565b600080833560016020038436030381126130e757600080fd5b83810192508235915060208301925067ffffffffffffffff82111561310b57600080fd5b60c08202360384131561311d57600080fd5b509250929050565b600082905092915050565b600061313f60208401846123e3565b905092915050565b60006131528261319b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156131e35780820151818401526020810190506131c8565b838111156131f2576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015613226576132c9565b60046000803e613237600051613209565b6308c379a0811461324857506132c9565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715613274575050506132c9565b808201805167ffffffffffffffff8111156132935750505050506132c9565b8060208301013d85018111156132ae575050505050506132c9565b6132b7826131f8565b60208401016040528296505050505050505b90565b6132d581613147565b81146132e057600080fd5b50565b6132ec81613159565b81146132f757600080fd5b50565b61330381613165565b811461330e57600080fd5b50565b61331a816131bb565b811461332557600080fd5b5056fea2646970667358221220637c412ceb9e4c8c91be10f90902575a91c418bde8f6d217737e19160f19138264736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c806399eb59b91161008a578063dc9031c411610059578063dc9031c414610306578063e2b3974614610343578063f5f5ba7214610373578063fa2901a51461039e576100f3565b806399eb59b914610264578063a734f06e146102a1578063b40f39ee146102cc578063c2722916146102fc576100f3565b80636fca4f8f116100c65780636fca4f8f146101ae57806386b2ecc4146101d95780638743ad581461020957806387c1394314610239576100f3565b80630f532d18146100f85780631413dc7d1461012357806321b0eb851461014e5780632db581341461017e575b600080fd5b34801561010457600080fd5b5061010d6103c9565b60405161011a9190612f06565b60405180910390f35b34801561012f57600080fd5b506101386103f0565b6040516101459190612f06565b60405180910390f35b6101686004803603810190610163919061240d565b610417565b6040516101759190612ffe565b60405180910390f35b61019860048036038101906101939190612596565b6107c8565b6040516101a59190612ffe565b60405180910390f35b3480156101ba57600080fd5b506101c3610b79565b6040516101d09190612cf2565b60405180910390f35b6101f360048036038101906101ee9190612484565b610b91565b6040516102009190612ffe565b60405180910390f35b610223600480360381019061021e9190612616565b610f42565b6040516102309190612ffe565b60405180910390f35b34801561024557600080fd5b5061024e6112f8565b60405161025b9190612ffe565b60405180910390f35b34801561027057600080fd5b5061028b600480360381019061028691906126d1565b611304565b6040516102989190612f06565b60405180910390f35b3480156102ad57600080fd5b506102b661131c565b6040516102c39190612cf2565b60405180910390f35b6102e660048036038101906102e1919061240d565b611334565b6040516102f39190612ffe565b60405180910390f35b6103046116e5565b005b34801561031257600080fd5b5061032d600480360381019061032891906126fa565b611720565b60405161033a9190612f06565b60405180910390f35b61035d60048036038101906103589190612504565b611741565b60405161036a9190612ffe565b60405180910390f35b34801561037f57600080fd5b50610388611af7565b6040516103959190612f3c565b60405180910390f35b3480156103aa57600080fd5b506103b3611b34565b6040516103c09190612f21565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f21905061043b8786611b3f565b945073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156105bc578073ffffffffffffffffffffffffffffffffffffffff166321b0eb858689898989896040518763ffffffff1660e01b81526004016104c7959493929190612d36565b6020604051808303818588803b1580156104e057600080fd5b505af19350505050801561051257506040513d601f19601f8201168201806040525081019061050f9190612723565b60015b6105b25761051e613216565b80610529575061056e565b6105686040518060400160405280601081526020017f736d617274537761704578616374496e0000000000000000000000000000000081525082611c89565b506105ad565b6105ac6040518060400160405280601081526020017f736d617274537761704578616374496e00000000000000000000000000000000815250611d01565b5b6105b7565b809250505b61076d565b6105fb733e66b66fd1d0b02fda6c811da9e0547970db2f21868973ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff166321b0eb8588888888886040518663ffffffff1660e01b815260040161063c959493929190612d36565b602060405180830381600087803b15801561065657600080fd5b505af192505050801561068757506040513d601f19601f820116820180604052508101906106849190612723565b60015b61072757610693613216565b8061069e57506106e3565b6106dd6040518060400160405280601081526020017f736d617274537761704578616374496e0000000000000000000000000000000081525082611c89565b50610722565b6107216040518060400160405280601081526020017f736d617274537761704578616374496e00000000000000000000000000000000815250611d01565b5b61072c565b809250505b61076c733e66b66fd1d0b02fda6c811da9e0547970db2f2160008973ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146107be576107bd86611ea1565b5b5095945050505050565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f2190506107ec8584611b3f565b925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141561096d578073ffffffffffffffffffffffffffffffffffffffff16632db581348489898989896040518763ffffffff1660e01b8152600401610878959493929190612e5c565b6020604051808303818588803b15801561089157600080fd5b505af1935050505080156108c357506040513d601f19601f820116820180604052508101906108c09190612723565b60015b610963576108cf613216565b806108da575061091f565b6109196040518060400160405280601181526020017f62617463685377617045786163744f757400000000000000000000000000000081525082611c89565b5061095e565b61095d6040518060400160405280601181526020017f62617463685377617045786163744f7574000000000000000000000000000000815250611d01565b5b610968565b809250505b610b1e565b6109ac733e66b66fd1d0b02fda6c811da9e0547970db2f21848773ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff16632db5813488888888886040518663ffffffff1660e01b81526004016109ed959493929190612e5c565b602060405180830381600087803b158015610a0757600080fd5b505af1925050508015610a3857506040513d601f19601f82011682018060405250810190610a359190612723565b60015b610ad857610a44613216565b80610a4f5750610a94565b610a8e6040518060400160405280601181526020017f62617463685377617045786163744f757400000000000000000000000000000081525082611c89565b50610ad3565b610ad26040518060400160405280601181526020017f62617463685377617045786163744f7574000000000000000000000000000000815250611d01565b5b610add565b809250505b610b1d733e66b66fd1d0b02fda6c811da9e0547970db2f2160008773ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610b6f57610b6e84611ea1565b5b5095945050505050565b733e66b66fd1d0b02fda6c811da9e0547970db2f2181565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f219050610bb58584611b3f565b925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415610d36578073ffffffffffffffffffffffffffffffffffffffff166386b2ecc48489898989896040518763ffffffff1660e01b8152600401610c41959493929190612db2565b6020604051808303818588803b158015610c5a57600080fd5b505af193505050508015610c8c57506040513d601f19601f82011682018060405250810190610c899190612723565b60015b610d2c57610c98613216565b80610ca35750610ce8565b610ce26040518060400160405280601981526020017f6d756c7469686f7042617463685377617045786163744f75740000000000000081525082611c89565b50610d27565b610d266040518060400160405280601981526020017f6d756c7469686f7042617463685377617045786163744f757400000000000000815250611d01565b5b610d31565b809250505b610ee7565b610d75733e66b66fd1d0b02fda6c811da9e0547970db2f21848773ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff166386b2ecc488888888886040518663ffffffff1660e01b8152600401610db6959493929190612db2565b602060405180830381600087803b158015610dd057600080fd5b505af1925050508015610e0157506040513d601f19601f82011682018060405250810190610dfe9190612723565b60015b610ea157610e0d613216565b80610e185750610e5d565b610e576040518060400160405280601981526020017f6d756c7469686f7042617463685377617045786163744f75740000000000000081525082611c89565b50610e9c565b610e9b6040518060400160405280601981526020017f6d756c7469686f7042617463685377617045786163744f757400000000000000815250611d01565b5b610ea6565b809250505b610ee6733e66b66fd1d0b02fda6c811da9e0547970db2f2160008773ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610f3857610f3784611ea1565b5b5095945050505050565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f219050610f668685611b3f565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156110e9578073ffffffffffffffffffffffffffffffffffffffff16638743ad58858a8a8a8a8a8a6040518863ffffffff1660e01b8152600401610ff496959493929190612eaa565b6020604051808303818588803b15801561100d57600080fd5b505af19350505050801561103f57506040513d601f19601f8201168201806040525081019061103c9190612723565b60015b6110df5761104b613216565b80611056575061109b565b6110956040518060400160405280601081526020017f6261746368537761704578616374496e0000000000000000000000000000000081525082611c89565b506110da565b6110d96040518060400160405280601081526020017f6261746368537761704578616374496e00000000000000000000000000000000815250611d01565b5b6110e4565b809250505b61129c565b611128733e66b66fd1d0b02fda6c811da9e0547970db2f21858873ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff16638743ad588989898989896040518763ffffffff1660e01b815260040161116b96959493929190612eaa565b602060405180830381600087803b15801561118557600080fd5b505af19250505080156111b657506040513d601f19601f820116820180604052508101906111b39190612723565b60015b611256576111c2613216565b806111cd5750611212565b61120c6040518060400160405280601081526020017f6261746368537761704578616374496e0000000000000000000000000000000081525082611c89565b50611251565b6112506040518060400160405280601081526020017f6261746368537761704578616374496e00000000000000000000000000000000815250611d01565b5b61125b565b809250505b61129b733e66b66fd1d0b02fda6c811da9e0547970db2f2160008873ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146112ed576112ec85611ea1565b5b509695505050505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f2190506113588785611b3f565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614156114d9578073ffffffffffffffffffffffffffffffffffffffff1663b40f39ee8589898989896040518763ffffffff1660e01b81526004016113e4959493929190612d36565b6020604051808303818588803b1580156113fd57600080fd5b505af19350505050801561142f57506040513d601f19601f8201168201806040525081019061142c9190612723565b60015b6114cf5761143b613216565b80611446575061148b565b6114856040518060400160405280601181526020017f736d6172745377617045786163744f757400000000000000000000000000000081525082611c89565b506114ca565b6114c96040518060400160405280601181526020017f736d6172745377617045786163744f7574000000000000000000000000000000815250611d01565b5b6114d4565b809250505b61168a565b611518733e66b66fd1d0b02fda6c811da9e0547970db2f21858973ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663b40f39ee88888888886040518663ffffffff1660e01b8152600401611559959493929190612d36565b602060405180830381600087803b15801561157357600080fd5b505af19250505080156115a457506040513d601f19601f820116820180604052508101906115a19190612723565b60015b611644576115b0613216565b806115bb5750611600565b6115fa6040518060400160405280601181526020017f736d6172745377617045786163744f757400000000000000000000000000000081525082611c89565b5061163f565b61163e6040518060400160405280601181526020017f736d6172745377617045786163744f7574000000000000000000000000000000815250611d01565b5b611649565b809250505b611689733e66b66fd1d0b02fda6c811da9e0547970db2f2160008973ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146116db576116da86611ea1565b5b5095945050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171790612f7e565b60405180910390fd5b6000818154811061172d57fe5b906000526020600020016000915090505481565b600080733e66b66fd1d0b02fda6c811da9e0547970db2f2190506117658685611b3f565b935073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614156118e8578073ffffffffffffffffffffffffffffffffffffffff1663e2b39746858a8a8a8a8a8a6040518863ffffffff1660e01b81526004016117f396959493929190612e00565b6020604051808303818588803b15801561180c57600080fd5b505af19350505050801561183e57506040513d601f19601f8201168201806040525081019061183b9190612723565b60015b6118de5761184a613216565b80611855575061189a565b6118946040518060400160405280601881526020017f6d756c7469686f704261746368537761704578616374496e000000000000000081525082611c89565b506118d9565b6118d86040518060400160405280601881526020017f6d756c7469686f704261746368537761704578616374496e0000000000000000815250611d01565b5b6118e3565b809250505b611a9b565b611927733e66b66fd1d0b02fda6c811da9e0547970db2f21858873ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663e2b397468989898989896040518763ffffffff1660e01b815260040161196a96959493929190612e00565b602060405180830381600087803b15801561198457600080fd5b505af19250505080156119b557506040513d601f19601f820116820180604052508101906119b29190612723565b60015b611a55576119c1613216565b806119cc5750611a11565b611a0b6040518060400160405280601881526020017f6d756c7469686f704261746368537761704578616374496e000000000000000081525082611c89565b50611a50565b611a4f6040518060400160405280601881526020017f6d756c7469686f704261746368537761704578616374496e0000000000000000815250611d01565b5b611a5a565b809250505b611a9a733e66b66fd1d0b02fda6c811da9e0547970db2f2160008873ffffffffffffffffffffffffffffffffffffffff16611d439092919063ffffffff16565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611aec57611aeb85611ea1565b5b509695505050505050565b60606040518060400160405280601181526020017f4842616c616e63657245786368616e6765000000000000000000000000000000815250905090565b63c272291660e01b81565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214611b7057819050611c83565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611bea575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15611bf757479050611c83565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c309190612cf2565b60206040518083038186803b158015611c4857600080fd5b505afa158015611c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c809190612723565b90505b92915050565b611c99611c94611eb8565b611ef6565b611ca1611af7565b8383604051602001611cb69493929190612c93565b6040516020818303038152906040526040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cf89190612f3c565b60405180910390fd5b611d40816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250611c89565b50565b6000811480611ddc575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401611d8a929190612d0d565b60206040518083038186803b158015611da257600080fd5b505afa158015611db6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dda9190612723565b145b611e1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e1290612fde565b60405180910390fd5b611e9c8363095ea7b360e01b8484604051602401611e3a929190612d89565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061203d565b505050565b611eb581600061210490919063ffffffff16565b50565b6000611ef17ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161214990919063ffffffff16565b905090565b60606000821415611f3e576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612038565b6000808390505b6000811115611f68578180600101925050600a8181611f6057fe5b049050611f45565b5060608167ffffffffffffffff81118015611f8257600080fd5b506040519080825280601f01601f191660200182016040528015611fb55781602001600182028036833780820191505090505b50905060008290505b600081111561203157600a8581611fd157fe5b0660300160f81b826001830381518110611fe757fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161202057fe5b049450808060019003915050611fbe565b5080925050505b919050565b606061209f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166121699092919063ffffffff16565b90506000815111156120ff57808060200190518101906120bf91906126a8565b6120fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120f590612fbe565b60405180910390fd5b5b505050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b60008260008381526020019081526020016000205460001c905092915050565b60606121788484600085612181565b90509392505050565b6060824710156121c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121bd90612f5e565b60405180910390fd5b6121cf85612296565b61220e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161220590612f9e565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040516122389190612c7c565b60006040518083038185875af1925050503d8060008114612275576040519150601f19603f3d011682016040523d82523d6000602084013e61227a565b606091505b509150915061228a8282866122a9565b92505050949350505050565b600080823b905060008111915050919050565b606083156122b957829050612309565b6000835111156122cc5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123009190612f3c565b60405180910390fd5b9392505050565b60008135905061231f816132cc565b92915050565b60008083601f84011261233757600080fd5b8235905067ffffffffffffffff81111561235057600080fd5b60208301915083602082028301111561236857600080fd5b9250929050565b60008083601f84011261238157600080fd5b8235905067ffffffffffffffff81111561239a57600080fd5b6020830191508360c08202830111156123b257600080fd5b9250929050565b6000815190506123c8816132e3565b92915050565b6000813590506123dd816132fa565b92915050565b6000813590506123f281613311565b92915050565b60008151905061240781613311565b92915050565b600080600080600060a0868803121561242557600080fd5b600061243388828901612310565b955050602061244488828901612310565b9450506040612455888289016123e3565b9350506060612466888289016123e3565b9250506080612477888289016123e3565b9150509295509295909350565b60008060008060006080868803121561249c57600080fd5b600086013567ffffffffffffffff8111156124b657600080fd5b6124c288828901612325565b955095505060206124d588828901612310565b93505060406124e688828901612310565b92505060606124f7888289016123e3565b9150509295509295909350565b60008060008060008060a0878903121561251d57600080fd5b600087013567ffffffffffffffff81111561253757600080fd5b61254389828a01612325565b9650965050602061255689828a01612310565b945050604061256789828a01612310565b935050606061257889828a016123e3565b925050608061258989828a016123e3565b9150509295509295509295565b6000806000806000608086880312156125ae57600080fd5b600086013567ffffffffffffffff8111156125c857600080fd5b6125d48882890161236f565b955095505060206125e788828901612310565b93505060406125f888828901612310565b9250506060612609888289016123e3565b9150509295509295909350565b60008060008060008060a0878903121561262f57600080fd5b600087013567ffffffffffffffff81111561264957600080fd5b61265589828a0161236f565b9650965050602061266889828a01612310565b945050604061267989828a01612310565b935050606061268a89828a016123e3565b925050608061269b89828a016123e3565b9150509295509295509295565b6000602082840312156126ba57600080fd5b60006126c8848285016123b9565b91505092915050565b6000602082840312156126e357600080fd5b60006126f1848285016123ce565b91505092915050565b60006020828403121561270c57600080fd5b600061271a848285016123e3565b91505092915050565b60006020828403121561273557600080fd5b6000612743848285016123f8565b91505092915050565b600061275984848461280e565b90509392505050565b600061276e8383612bb3565b60c08301905092915050565b61278381613147565b82525050565b61279281613147565b82525050565b60006127a4838561305d565b9350836020840285016127b684613019565b8060005b878110156127fc5784840389526127d182846130ce565b6127dc86828461274c565b95506127e784613043565b935060208b019a5050506001810190506127ba565b50829750879450505050509392505050565b600061281a838561306e565b935061282582613023565b8060005b8581101561285e5761283b8284613125565b6128458882612762565b975061285083613050565b925050600181019050612829565b5085925050509392505050565b6000612877838561307f565b935061288282613023565b8060005b858110156128bb576128988284613125565b6128a28882612762565b97506128ad83613050565b925050600181019050612886565b5085925050509392505050565b6128d181613165565b82525050565b6128e08161316f565b82525050565b60006128f18261302d565b6128fb8185613090565b935061290b8185602086016131c5565b80840191505092915050565b600061292282613038565b61292c818561309b565b935061293c8185602086016131c5565b612945816131f8565b840191505092915050565b600061295b82613038565b61296581856130ac565b93506129758185602086016131c5565b80840191505092915050565b600061298e60268361309b565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b60006129f460148361309b565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b6000612a34601d8361309b565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b6000612a746001836130ac565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b6000612ab4602a8361309b565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b6000612b1a6002836130ac565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b6000612b5a60368361309b565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b60c08201612bc460008301836130b7565b612bd1600085018261277a565b50612bdf60208301836130b7565b612bec602085018261277a565b50612bfa60408301836130b7565b612c07604085018261277a565b50612c156060830183613130565b612c226060850182612c5e565b50612c306080830183613130565b612c3d6080850182612c5e565b50612c4b60a0830183613130565b612c5860a0850182612c5e565b50505050565b612c67816131bb565b82525050565b612c76816131bb565b82525050565b6000612c8882846128e6565b915081905092915050565b6000612c9f8287612950565b9150612caa82612a67565b9150612cb68286612950565b9150612cc182612a67565b9150612ccd8285612950565b9150612cd882612b0d565b9150612ce48284612950565b915081905095945050505050565b6000602082019050612d076000830184612789565b92915050565b6000604082019050612d226000830185612789565b612d2f6020830184612789565b9392505050565b600060a082019050612d4b6000830188612789565b612d586020830187612789565b612d656040830186612c6d565b612d726060830185612c6d565b612d7f6080830184612c6d565b9695505050505050565b6000604082019050612d9e6000830185612789565b612dab6020830184612c6d565b9392505050565b60006080820190508181036000830152612dcd818789612798565b9050612ddc6020830186612789565b612de96040830185612789565b612df66060830184612c6d565b9695505050505050565b600060a0820190508181036000830152612e1b81888a612798565b9050612e2a6020830187612789565b612e376040830186612789565b612e446060830185612c6d565b612e516080830184612c6d565b979650505050505050565b60006080820190508181036000830152612e7781878961286b565b9050612e866020830186612789565b612e936040830185612789565b612ea06060830184612c6d565b9695505050505050565b600060a0820190508181036000830152612ec581888a61286b565b9050612ed46020830187612789565b612ee16040830186612789565b612eee6060830185612c6d565b612efb6080830184612c6d565b979650505050505050565b6000602082019050612f1b60008301846128c8565b92915050565b6000602082019050612f3660008301846128d7565b92915050565b60006020820190508181036000830152612f568184612917565b905092915050565b60006020820190508181036000830152612f7781612981565b9050919050565b60006020820190508181036000830152612f97816129e7565b9050919050565b60006020820190508181036000830152612fb781612a27565b9050919050565b60006020820190508181036000830152612fd781612aa7565b9050919050565b60006020820190508181036000830152612ff781612b4d565b9050919050565b60006020820190506130136000830184612c6d565b92915050565b6000819050919050565b6000819050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600060c082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b60006130c66020840184612310565b905092915050565b600080833560016020038436030381126130e757600080fd5b83810192508235915060208301925067ffffffffffffffff82111561310b57600080fd5b60c08202360384131561311d57600080fd5b509250929050565b600082905092915050565b600061313f60208401846123e3565b905092915050565b60006131528261319b565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156131e35780820151818401526020810190506131c8565b838111156131f2576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015613226576132c9565b60046000803e613237600051613209565b6308c379a0811461324857506132c9565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715613274575050506132c9565b808201805167ffffffffffffffff8111156132935750505050506132c9565b8060208301013d85018111156132ae575050505050506132c9565b6132b7826131f8565b60208401016040528296505050505050505b90565b6132d581613147565b81146132e057600080fd5b50565b6132ec81613159565b81146132f757600080fd5b50565b61330381613165565b811461330e57600080fd5b50565b61331a816131bb565b811461332557600080fd5b5056fea2646970667358221220637c412ceb9e4c8c91be10f90902575a91c418bde8f6d217737e19160f19138264736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/balancer/HBalancerExchange.sol:HBalancerExchange",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/balancer/HBalancerExchange.sol:HBalancerExchange",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}