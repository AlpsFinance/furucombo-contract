{
  "address": "0x27BF380c6F201ef591D6c608b672FbDaa159b086",
  "abi": [
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REFERRAL_CODE",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserve",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_params",
          "type": "bytes"
        }
      ],
      "name": "flashLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_aToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "underlyingAssetAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b785a3ef8f5483b03aa8ceeff2d3ecac3581639ce54fabadb3b445ca531f55f",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0x27BF380c6F201ef591D6c608b672FbDaa159b086",
    "transactionIndex": 0,
    "gasUsed": "2629523",
    "logsBloom": "0x
    "blockHash": "0xff13f38f962b49b74cad15e24f7941beac658b132f2acf78b29f61205b92a1d6",
    "transactionHash": "0x2b785a3ef8f5483b03aa8ceeff2d3ecac3581639ce54fabadb3b445ca531f55f",
    "logs": [],
    "blockNumber": 13356585,
    "cumulativeGasUsed": "2629523",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REFERRAL_CODE\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserve\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_params\",\"type\":\"bytes\"}],\"name\":\"flashLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_aToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"underlyingAssetAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/aave/HAaveProtocol.sol\":\"HAaveProtocol\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/aave/FlashLoanReceiverBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./ILendingPool.sol\\\";\\nimport \\\"./ILendingPoolAddressesProvider.sol\\\";\\n\\ncontract FlashLoanReceiverBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    address constant PROVIDER = 0x24a42fD28C976A61Df5D00D0599C34c4f90748c8;\\n    address constant ETHADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function transferFundsBackToPoolInternal(address _reserve, uint256 _amount)\\n        internal\\n    {\\n        address payable core =\\n            ILendingPoolAddressesProvider(PROVIDER).getLendingPoolCore();\\n\\n        transferInternal(core, _reserve, _amount);\\n    }\\n\\n    function transferInternal(\\n        address payable _destination,\\n        address _reserve,\\n        uint256 _amount\\n    ) internal {\\n        if (_reserve == ETHADDRESS) {\\n            _destination.call{value: _amount}(\\\"\\\");\\n            return;\\n        }\\n        IERC20(_reserve).safeTransfer(_destination, _amount);\\n    }\\n\\n    function getBalanceInternal(address _target, address _reserve)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (_reserve == ETHADDRESS) {\\n            return _target.balance;\\n        }\\n        return IERC20(_reserve).balanceOf(_target);\\n    }\\n}\\n\",\"keccak256\":\"0x5be0b3b2f07b52ef1b6a6019668d4f4ba98be6a92d55411a0bf7833420a1ca99\"},\"contracts/handlers/aave/HAaveProtocol.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"./IAToken.sol\\\";\\nimport \\\"./ILendingPool.sol\\\";\\nimport \\\"./ILendingPoolCore.sol\\\";\\nimport \\\"./ILendingPoolAddressesProvider.sol\\\";\\nimport \\\"./FlashLoanReceiverBase.sol\\\";\\nimport \\\"../HandlerBase.sol\\\";\\nimport \\\"../../interface/IProxy.sol\\\";\\n\\ncontract HAaveProtocol is HandlerBase, FlashLoanReceiverBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    uint16 public constant REFERRAL_CODE = 56;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HAaveProtocol\\\";\\n    }\\n\\n    function flashLoan(\\n        address _reserve,\\n        uint256 _amount,\\n        bytes calldata _params\\n    ) external payable {\\n        ILendingPool lendingPool =\\n            ILendingPool(\\n                ILendingPoolAddressesProvider(PROVIDER).getLendingPool()\\n            );\\n        try\\n            lendingPool.flashLoan(address(this), _reserve, _amount, _params)\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"flashLoan\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"flashLoan\\\");\\n        }\\n\\n        // Update involved token\\n        if (_reserve != ETHADDRESS) _updateToken(_reserve);\\n    }\\n\\n    function executeOperation(\\n        address _reserve,\\n        uint256 _amount,\\n        uint256 _fee,\\n        bytes calldata _params\\n    ) external payable {\\n        if (\\n            msg.sender !=\\n            ILendingPoolAddressesProvider(PROVIDER).getLendingPool()\\n        ) {\\n            _revertMsg(\\\"executeOperation\\\", \\\"invalid caller\\\");\\n        }\\n\\n        (address[] memory tos, bytes32[] memory configs, bytes[] memory datas) =\\n            abi.decode(_params, (address[], bytes32[], bytes[]));\\n        IProxy(address(this)).execs(tos, configs, datas);\\n        transferFundsBackToPoolInternal(_reserve, _amount.add(_fee));\\n    }\\n\\n    function deposit(address _reserve, uint256 _amount) external payable {\\n        ILendingPool lendingPool =\\n            ILendingPool(\\n                ILendingPoolAddressesProvider(PROVIDER).getLendingPool()\\n            );\\n        address aToken = _getAToken(_reserve);\\n\\n        _amount = _getBalance(_reserve, _amount);\\n        if (_reserve == ETHADDRESS) {\\n            try\\n                lendingPool.deposit{value: _amount}(\\n                    _reserve,\\n                    _amount,\\n                    REFERRAL_CODE\\n                )\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"deposit\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"deposit\\\");\\n            }\\n        } else {\\n            address lendingPoolCore =\\n                ILendingPoolAddressesProvider(PROVIDER).getLendingPoolCore();\\n            IERC20(_reserve).safeApprove(lendingPoolCore, _amount);\\n            try\\n                lendingPool.deposit(_reserve, _amount, REFERRAL_CODE)\\n            {} catch Error(string memory reason) {\\n                _revertMsg(\\\"deposit\\\", reason);\\n            } catch {\\n                _revertMsg(\\\"deposit\\\");\\n            }\\n            IERC20(_reserve).safeApprove(lendingPoolCore, 0);\\n        }\\n\\n        _updateToken(aToken);\\n    }\\n\\n    function redeem(address _aToken, uint256 _amount)\\n        external\\n        payable\\n        returns (uint256 underlyingAssetAmount)\\n    {\\n        // Get proxy balance before redeem\\n        uint256 beforeUnderlyingAssetAmount;\\n        _amount = _getBalance(_aToken, _amount);\\n        address underlyingAsset = IAToken(_aToken).underlyingAssetAddress();\\n        if (underlyingAsset != ETHADDRESS) {\\n            beforeUnderlyingAssetAmount = IERC20(underlyingAsset).balanceOf(\\n                address(this)\\n            );\\n        } else {\\n            beforeUnderlyingAssetAmount = address(this).balance;\\n        }\\n\\n        // Call redeem function\\n        try IAToken(_aToken).redeem(_amount) {} catch Error(\\n            string memory reason\\n        ) {\\n            _revertMsg(\\\"redeem\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"redeem\\\");\\n        }\\n\\n        // Get redeem amount and update token\\n        uint256 afterUnderlyingAssetAmount;\\n        if (underlyingAsset != ETHADDRESS) {\\n            afterUnderlyingAssetAmount = IERC20(underlyingAsset).balanceOf(\\n                address(this)\\n            );\\n            _updateToken(underlyingAsset);\\n        } else {\\n            afterUnderlyingAssetAmount = address(this).balance;\\n        }\\n\\n        return (afterUnderlyingAssetAmount.sub(beforeUnderlyingAssetAmount));\\n    }\\n\\n    function _getAToken(address _reserve) internal view returns (address) {\\n        ILendingPoolCore lendingPoolCore =\\n            ILendingPoolCore(\\n                ILendingPoolAddressesProvider(PROVIDER).getLendingPoolCore()\\n            );\\n        try lendingPoolCore.getReserveATokenAddress(_reserve) returns (\\n            address aToken\\n        ) {\\n            if (aToken == address(0))\\n                _revertMsg(\\\"General\\\", \\\"aToken should not be zero address\\\");\\n            else return aToken;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"General\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"General\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a642c679f48094dcd0a53b60e2eda98dcc7fe1d9d92324809588f8164144cd4\"},\"contracts/handlers/aave/IAToken.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IAToken {\\n    function underlyingAssetAddress() external view returns(address);\\n    function redirectInterestStream(address _to) external;\\n    function redirectInterestStreamOf(address _from, address _to) external;\\n    function allowInterestRedirectionTo(address _to) external;\\n    function redeem(uint256 _amount) external;\\n    function principalBalanceOf(address _user) external view returns(uint256);\\n    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\\n    function getUserIndex(address _user) external view returns(uint256);\\n    function getInterestRedirectionAddress(address _user) external view returns(address);\\n    function getRedirectedBalance(address _user) external view returns(uint256);\\n\\n    function totalSupply() external view returns (uint256 supply);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xd73345803e55e501d263c2ecb95286f21d2e9266b9c784113607910229a8cdc6\"},\"contracts/handlers/aave/ILendingPool.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ILendingPool {\\n\\tfunction addressesProvider() external view returns(address);\\n\\tfunction deposit(address _reserve, uint256 _amount, uint16 _referralCode) external payable;\\n\\tfunction redeemUnderlying(address _reserve, address _user, uint256 _amount) external;\\n\\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external;\\n\\tfunction repay(address _reserve, uint256 _amount, address _onBehalfOf) external payable;\\n\\tfunction swapBorrowRateMode(address _reserve) external;\\n\\tfunction rebalanceFixedBorrowRate(address _reserve, address _user) external;\\n\\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\\n\\tfunction liquidationCall(address _collateral, address _reserve, address _user, uint256 _purchaseAmount, bool _receiveAToken) external payable;\\n\\tfunction flashLoan(address _receiver, address _reserve, uint256 _amount, bytes calldata _params) external;\\n\\tfunction getReserveConfigurationData(address _reserve) external view returns(uint256 ltv, uint256 liquidationThreshold, uint256 liquidationDiscount, address interestRateStrategyAddress, bool usageAsCollateralEnabled, bool borrowingEnabled, bool fixedBorrowRateEnabled, bool isActive);\\n\\tfunction getReserveData(address _reserve) external view returns(uint256 totalLiquidity, uint256 availableLiquidity, uint256 totalBorrowsFixed, uint256 totalBorrowsVariable, uint256 liquidityRate, uint256 variableBorrowRate, uint256 fixedBorrowRate, uint256 averageFixedBorrowRate, uint256 utilizationRate, uint256 liquidityIndex, uint256 variableBorrowIndex, address aTokenAddress, uint40 lastUpdateTimestamp);\\n\\tfunction getUserAccountData(address _user) external view returns(uint256 totalLiquidityETH, uint256 totalCollateralETH, uint256 totalBorrowsETH, uint256 availableBorrowsETH, uint256 currentLiquidationThreshold, uint256 ltv, uint256 healthFactor);\\n\\tfunction getUserReserveData(address _reserve, address _user) external view returns(uint256 currentATokenBalance, uint256 currentBorrowBalance, uint256 principalBorrowBalance, uint256 borrowRateMode, uint256 borrowRate, uint256 liquidityRate, uint256 originationFee, uint256 variableBorrowIndex, uint256 lastUpdateTimestamp, bool usageAsCollateralEnabled);\\n\\tfunction getReserves() external view;\\n}\\n\",\"keccak256\":\"0x49ab456e4ceb46b5ad97218bd86da691c5907bd54224c0acecca00f71da5b664\"},\"contracts/handlers/aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ILendingPoolAddressesProvider {\\n    function getLendingPool() external view returns (address);\\n    function setLendingPoolImpl(address _pool) external;\\n\\n    function getLendingPoolCore() external view returns (address payable);\\n    function setLendingPoolCoreImpl(address _lendingPoolCore) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n    function setLendingPoolConfiguratorImpl(address _configurator) external;\\n\\n    function getLendingPoolDataProvider() external view returns (address);\\n    function setLendingPoolDataProviderImpl(address _provider) external;\\n\\n    function getLendingPoolParametersProvider() external view returns (address);\\n    function setLendingPoolParametersProviderImpl(address _parametersProvider) external;\\n\\n    function getTokenDistributor() external view returns (address);\\n    function setTokenDistributor(address _tokenDistributor) external;\\n\\n    function getFeeProvider() external view returns (address);\\n    function setFeeProviderImpl(address _feeProvider) external;\\n\\n    function getLendingPoolLiquidationManager() external view returns (address);\\n    function setLendingPoolLiquidationManager(address _manager) external;\\n\\n    function getLendingPoolManager() external view returns (address);\\n    function setLendingPoolManager(address _lendingPoolManager) external;\\n\\n    function getPriceOracle() external view returns (address);\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n    function setLendingRateOracle(address _lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0xac18241b3049ad4d600d8cd6d2a1a169c332a853976c6261dc5235abbb6b8090\"},\"contracts/handlers/aave/ILendingPoolCore.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface ILendingPoolCore {\\n\\tfunction getReserveATokenAddress(address _reserve) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb306595e49dea6cb08dd9f6cfb3b2455187d57446bf1a92d4fa49485abaa422a\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/interface/IProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\npragma experimental ABIEncoderV2;\\n\\ninterface IProxy {\\n    function batchExec(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\\n    function execs(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\\n}\\n\",\"keccak256\":\"0x1396275637bbbacc003d2090ef230a3aa685510a7177d7d2cfac77886ded9392\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612ec9806100206000396000f3fe6080604052600436106100c25760003560e01c806399eb59b91161007f578063e0232b4211610059578063e0232b4214610243578063ee8725581461025f578063f5f5ba721461027b578063fa2901a5146102a6576100c2565b806399eb59b9146101bf578063c2722916146101fc578063dc9031c414610206576100c2565b80630f532d18146100c75780631413dc7d146100f25780631e9a69501461011d5780633583849a1461014d57806347e7ef241461017857806387c1394314610194575b600080fd5b3480156100d357600080fd5b506100dc6102d1565b6040516100e99190612922565b60405180910390f35b3480156100fe57600080fd5b506101076102f8565b6040516101149190612922565b60405180910390f35b61013760048036038101906101329190611f8b565b61031f565b6040516101449190612a55565b60405180910390f35b34801561015957600080fd5b50610162610694565b60405161016f9190612a3a565b60405180910390f35b610192600480360381019061018d9190611f8b565b610699565b005b3480156101a057600080fd5b506101a9610aa8565b6040516101b69190612a55565b60405180910390f35b3480156101cb57600080fd5b506101e660048036038101906101e19190612173565b610ab4565b6040516101f39190612922565b60405180910390f35b610204610acc565b005b34801561021257600080fd5b5061022d6004803603810190610228919061219c565b610b07565b60405161023a9190612922565b60405180910390f35b61025d60048036038101906102589190611fc7565b610b28565b005b61027960048036038101906102749190612033565b610d23565b005b34801561028757600080fd5b50610290610f0b565b60405161029d9190612958565b60405180910390f35b3480156102b257600080fd5b506102bb610f48565b6040516102c8919061293d565b60405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b60008061032c8484610f53565b925060008473ffffffffffffffffffffffffffffffffffffffff166389d1a0fc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561037657600080fd5b505afa15801561038a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ae9190611f39565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610487578073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161043091906127e4565b60206040518083038186803b15801561044857600080fd5b505afa15801561045c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048091906121c5565b915061048b565b4791505b8473ffffffffffffffffffffffffffffffffffffffff1663db006a75856040518263ffffffff1660e01b81526004016104c49190612a55565b600060405180830381600087803b1580156104de57600080fd5b505af19250505080156104ef575060015b61058f576104fb612d49565b80610506575061054b565b6105456040518060400160405280600681526020017f72656465656d00000000000000000000000000000000000000000000000000008152508261109d565b5061058a565b6105896040518060400160405280600681526020017f72656465656d0000000000000000000000000000000000000000000000000000815250611115565b5b610590565b5b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610672578173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161061291906127e4565b60206040518083038186803b15801561062a57600080fd5b505afa15801561063e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066291906121c5565b905061066d82611157565b610676565b4790505b610689838261116e90919063ffffffff16565b935050505092915050565b603881565b60007324a42fd28c976a61df5d00d0599c34c4f90748c873ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106f557600080fd5b505afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d9190611f39565b9050600061073a846111b8565b90506107468484610f53565b925073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156108a0578173ffffffffffffffffffffffffffffffffffffffff1663d2d0e06684868660386040518563ffffffff1660e01b81526004016107cf9392919061289f565b6000604051808303818588803b1580156107e857600080fd5b505af1935050505080156107fa575060015b61089a57610806612d49565b806108115750610856565b6108506040518060400160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152508261109d565b50610895565b6108946040518060400160405280600781526020017f6465706f73697400000000000000000000000000000000000000000000000000815250611115565b5b61089b565b5b610a99565b60007324a42fd28c976a61df5d00d0599c34c4f90748c873ffffffffffffffffffffffffffffffffffffffff1663ed6ff7606040518163ffffffff1660e01b815260040160206040518083038186803b1580156108fc57600080fd5b505afa158015610910573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109349190611f62565b905061096181858773ffffffffffffffffffffffffffffffffffffffff166114159092919063ffffffff16565b8273ffffffffffffffffffffffffffffffffffffffff1663d2d0e066868660386040518463ffffffff1660e01b815260040161099f9392919061289f565b600060405180830381600087803b1580156109b957600080fd5b505af19250505080156109ca575060015b610a6a576109d6612d49565b806109e15750610a26565b610a206040518060400160405280600781526020017f6465706f736974000000000000000000000000000000000000000000000000008152508261109d565b50610a65565b610a646040518060400160405280600781526020017f6465706f73697400000000000000000000000000000000000000000000000000815250611115565b5b610a6b565b5b610a978160008773ffffffffffffffffffffffffffffffffffffffff166114159092919063ffffffff16565b505b610aa281611157565b50505050565b670de0b6b3a764000081565b60016020528060005260406000206000915090505481565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610afe906129ba565b60405180910390fd5b60008181548110610b1457fe5b906000526020600020016000915090505481565b60007324a42fd28c976a61df5d00d0599c34c4f90748c873ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b8457600080fd5b505afa158015610b98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bbc9190611f39565b90508073ffffffffffffffffffffffffffffffffffffffff16635cffe9de30878787876040518663ffffffff1660e01b8152600401610bff959493929190612828565b600060405180830381600087803b158015610c1957600080fd5b505af1925050508015610c2a575060015b610cca57610c36612d49565b80610c415750610c86565b610c806040518060400160405280600981526020017f666c6173684c6f616e00000000000000000000000000000000000000000000008152508261109d565b50610cc5565b610cc46040518060400160405280600981526020017f666c6173684c6f616e0000000000000000000000000000000000000000000000815250611115565b5b610ccb565b5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614610d1c57610d1b85611157565b5b5050505050565b7324a42fd28c976a61df5d00d0599c34c4f90748c873ffffffffffffffffffffffffffffffffffffffff16630261bf8b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d7d57600080fd5b505afa158015610d91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db59190611f39565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e5c57610e5b6040518060400160405280601081526020017f657865637574654f7065726174696f6e000000000000000000000000000000008152506040518060400160405280600e81526020017f696e76616c69642063616c6c657200000000000000000000000000000000000081525061109d565b5b60608060608484810190610e7091906120b3565b9250925092503073ffffffffffffffffffffffffffffffffffffffff1663719385098484846040518463ffffffff1660e01b8152600401610eb3939291906128d6565b600060405180830381600087803b158015610ecd57600080fd5b505af1158015610ee1573d6000803e3d6000fd5b50505050610f0188610efc888a61157390919063ffffffff16565b6115c8565b5050505050505050565b60606040518060400160405280600d81526020017f484161766550726f746f636f6c00000000000000000000000000000000000000815250905090565b63c272291660e01b81565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214610f8457819050611097565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480610ffe575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b1561100b57479050611097565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161104491906127e4565b60206040518083038186803b15801561105c57600080fd5b505afa158015611070573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061109491906121c5565b90505b92915050565b6110ad6110a861166e565b6116ac565b6110b5610f0b565b83836040516020016110ca9493929190612770565b6040516020818303038152906040526040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110c9190612958565b60405180910390fd5b611154816040518060400160405280600b81526020017f556e73706563696669656400000000000000000000000000000000000000000081525061109d565b50565b61116b8160006117f390919063ffffffff16565b50565b60006111b083836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250611838565b905092915050565b6000807324a42fd28c976a61df5d00d0599c34c4f90748c873ffffffffffffffffffffffffffffffffffffffff1663ed6ff7606040518163ffffffff1660e01b815260040160206040518083038186803b15801561121557600080fd5b505afa158015611229573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124d9190611f62565b90508073ffffffffffffffffffffffffffffffffffffffff166334b3beee846040518263ffffffff1660e01b815260040161128891906127e4565b60206040518083038186803b1580156112a057600080fd5b505afa9250505080156112d157506040513d601f19601f820116820180604052508101906112ce9190611f39565b60015b611371576112dd612d49565b806112e8575061132d565b6113276040518060400160405280600781526020017f47656e6572616c000000000000000000000000000000000000000000000000008152508261109d565b5061136c565b61136b6040518060400160405280600781526020017f47656e6572616c00000000000000000000000000000000000000000000000000815250611115565b5b61140e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611402576113fd6040518060400160405280600781526020017f47656e6572616c00000000000000000000000000000000000000000000000000815250604051806060016040528060218152602001612e736021913961109d565b61140c565b8092505050611410565b505b505b919050565b60008114806114ae575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b815260040161145c9291906127ff565b60206040518083038186803b15801561147457600080fd5b505afa158015611488573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ac91906121c5565b145b6114ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e490612a1a565b60405180910390fd5b61156e8363095ea7b360e01b848460405160240161150c929190612876565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611893565b505050565b6000808284019050838110156115be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b59061297a565b60405180910390fd5b8091505092915050565b60007324a42fd28c976a61df5d00d0599c34c4f90748c873ffffffffffffffffffffffffffffffffffffffff1663ed6ff7606040518163ffffffff1660e01b815260040160206040518083038186803b15801561162457600080fd5b505afa158015611638573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165c9190611f62565b905061166981848461195a565b505050565b60006116a77ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b6001611a4190919063ffffffff16565b905090565b606060008214156116f4576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506117ee565b6000808390505b600081111561171e578180600101925050600a818161171657fe5b0490506116fb565b5060608167ffffffffffffffff8111801561173857600080fd5b506040519080825280601f01601f19166020018201604052801561176b5781602001600182028036833780820191505090505b50905060008290505b60008111156117e757600a858161178757fe5b0660300160f81b82600183038151811061179d57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a85816117d657fe5b049450808060019003915050611774565b5080925050505b919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b6000838311158290611880576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118779190612958565b60405180910390fd5b5060008385039050809150509392505050565b60606118f5826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a619092919063ffffffff16565b90506000815111156119555780806020019051810190611915919061214a565b611954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161194b906129fa565b60405180910390fd5b5b505050565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611a10578273ffffffffffffffffffffffffffffffffffffffff16816040516119c6906127cf565b60006040518083038185875af1925050503d8060008114611a03576040519150601f19603f3d011682016040523d82523d6000602084013e611a08565b606091505b505050611a3c565b611a3b83828473ffffffffffffffffffffffffffffffffffffffff16611a799092919063ffffffff16565b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b6060611a708484600085611aff565b90509392505050565b611afa8363a9059cbb60e01b8484604051602401611a98929190612876565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611893565b505050565b606082471015611b44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b3b9061299a565b60405180910390fd5b611b4d85611c14565b611b8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b83906129da565b60405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff168587604051611bb69190612759565b60006040518083038185875af1925050503d8060008114611bf3576040519150601f19603f3d011682016040523d82523d6000602084013e611bf8565b606091505b5091509150611c08828286611c27565b92505050949350505050565b600080823b905060008111915050919050565b60608315611c3757829050611c87565b600083511115611c4a5782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7e9190612958565b60405180910390fd5b9392505050565b600081359050611c9d81612dff565b92915050565b600081519050611cb281612dff565b92915050565b600081519050611cc781612e16565b92915050565b600082601f830112611cde57600080fd5b8135611cf1611cec82612a9d565b612a70565b91508181835260208401935060208101905083856020840282011115611d1657600080fd5b60005b83811015611d465781611d2c8882611c8e565b845260208401935060208301925050600181019050611d19565b5050505092915050565b600082601f830112611d6157600080fd5b8135611d74611d6f82612ac5565b612a70565b91508181835260208401935060208101905083856020840282011115611d9957600080fd5b60005b83811015611dc95781611daf8882611e5c565b845260208401935060208301925050600181019050611d9c565b5050505092915050565b600082601f830112611de457600080fd5b8135611df7611df282612aed565b612a70565b9150818183526020840193506020810190508360005b83811015611e3d5781358601611e238882611ebb565b845260208401935060208301925050600181019050611e0d565b5050505092915050565b600081519050611e5681612e2d565b92915050565b600081359050611e6b81612e44565b92915050565b60008083601f840112611e8357600080fd5b8235905067ffffffffffffffff811115611e9c57600080fd5b602083019150836001820283011115611eb457600080fd5b9250929050565b600082601f830112611ecc57600080fd5b8135611edf611eda82612b15565b612a70565b91508082526020830160208301858383011115611efb57600080fd5b611f06838284612ce9565b50505092915050565b600081359050611f1e81612e5b565b92915050565b600081519050611f3381612e5b565b92915050565b600060208284031215611f4b57600080fd5b6000611f5984828501611ca3565b91505092915050565b600060208284031215611f7457600080fd5b6000611f8284828501611cb8565b91505092915050565b60008060408385031215611f9e57600080fd5b6000611fac85828601611c8e565b9250506020611fbd85828601611f0f565b9150509250929050565b60008060008060608587031215611fdd57600080fd5b6000611feb87828801611c8e565b9450506020611ffc87828801611f0f565b935050604085013567ffffffffffffffff81111561201957600080fd5b61202587828801611e71565b925092505092959194509250565b60008060008060006080868803121561204b57600080fd5b600061205988828901611c8e565b955050602061206a88828901611f0f565b945050604061207b88828901611f0f565b935050606086013567ffffffffffffffff81111561209857600080fd5b6120a488828901611e71565b92509250509295509295909350565b6000806000606084860312156120c857600080fd5b600084013567ffffffffffffffff8111156120e257600080fd5b6120ee86828701611ccd565b935050602084013567ffffffffffffffff81111561210b57600080fd5b61211786828701611d50565b925050604084013567ffffffffffffffff81111561213457600080fd5b61214086828701611dd3565b9150509250925092565b60006020828403121561215c57600080fd5b600061216a84828501611e47565b91505092915050565b60006020828403121561218557600080fd5b600061219384828501611e5c565b91505092915050565b6000602082840312156121ae57600080fd5b60006121bc84828501611f0f565b91505092915050565b6000602082840312156121d757600080fd5b60006121e584828501611f24565b91505092915050565b60006121fa8383612232565b60208301905092915050565b60006122128383612381565b60208301905092915050565b600061222a83836123db565b905092915050565b61223b81612c4b565b82525050565b61224a81612c4b565b82525050565b600061225b82612b71565b6122658185612bcf565b935061227083612b41565b8060005b838110156122a157815161228888826121ee565b975061229383612ba8565b925050600181019050612274565b5085935050505092915050565b60006122b982612b7c565b6122c38185612be0565b93506122ce83612b51565b8060005b838110156122ff5781516122e68882612206565b97506122f183612bb5565b9250506001810190506122d2565b5085935050505092915050565b600061231782612b87565b6123218185612bf1565b93508360208202850161233385612b61565b8060005b8581101561236f5784840389528151612350858261221e565b945061235b83612bc2565b925060208a01995050600181019050612337565b50829750879550505050505092915050565b61238a81612c7b565b82525050565b61239981612c7b565b82525050565b6123a881612c85565b82525050565b60006123ba8385612c13565b93506123c7838584612ce9565b6123d083612d2b565b840190509392505050565b60006123e682612b92565b6123f08185612c02565b9350612400818560208601612cf8565b61240981612d2b565b840191505092915050565b600061241f82612b92565b6124298185612c24565b9350612439818560208601612cf8565b80840191505092915050565b600061245082612b9d565b61245a8185612c2f565b935061246a818560208601612cf8565b61247381612d2b565b840191505092915050565b600061248982612b9d565b6124938185612c40565b93506124a3818560208601612cf8565b80840191505092915050565b60006124bc601b83612c2f565b91507f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006000830152602082019050919050565b60006124fc602683612c2f565b91507f416464726573733a20696e73756666696369656e742062616c616e636520666f60008301527f722063616c6c00000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612562601483612c2f565b91507f496e76616c696420706f73742070726f636573730000000000000000000000006000830152602082019050919050565b60006125a2600083612c24565b9150600082019050919050565b60006125bc601d83612c2f565b91507f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006000830152602082019050919050565b60006125fc600183612c40565b91507f5f000000000000000000000000000000000000000000000000000000000000006000830152600182019050919050565b600061263c602a83612c2f565b91507f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008301527f6f742073756363656564000000000000000000000000000000000000000000006020830152604082019050919050565b60006126a2600283612c40565b91507f3a200000000000000000000000000000000000000000000000000000000000006000830152600282019050919050565b60006126e2603683612c2f565b91507f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60008301527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006020830152604082019050919050565b61274481612cb1565b82525050565b61275381612cdf565b82525050565b60006127658284612414565b915081905092915050565b600061277c828761247e565b9150612787826125ef565b9150612793828661247e565b915061279e826125ef565b91506127aa828561247e565b91506127b582612695565b91506127c1828461247e565b915081905095945050505050565b60006127da82612595565b9150819050919050565b60006020820190506127f96000830184612241565b92915050565b60006040820190506128146000830185612241565b6128216020830184612241565b9392505050565b600060808201905061283d6000830188612241565b61284a6020830187612241565b612857604083018661274a565b818103606083015261286a8184866123ae565b90509695505050505050565b600060408201905061288b6000830185612241565b612898602083018461274a565b9392505050565b60006060820190506128b46000830186612241565b6128c1602083018561274a565b6128ce604083018461273b565b949350505050565b600060608201905081810360008301526128f08186612250565b9050818103602083015261290481856122ae565b90508181036040830152612918818461230c565b9050949350505050565b60006020820190506129376000830184612390565b92915050565b6000602082019050612952600083018461239f565b92915050565b600060208201905081810360008301526129728184612445565b905092915050565b60006020820190508181036000830152612993816124af565b9050919050565b600060208201905081810360008301526129b3816124ef565b9050919050565b600060208201905081810360008301526129d381612555565b9050919050565b600060208201905081810360008301526129f3816125af565b9050919050565b60006020820190508181036000830152612a138161262f565b9050919050565b60006020820190508181036000830152612a33816126d5565b9050919050565b6000602082019050612a4f600083018461273b565b92915050565b6000602082019050612a6a600083018461274a565b92915050565b6000604051905081810181811067ffffffffffffffff82111715612a9357600080fd5b8060405250919050565b600067ffffffffffffffff821115612ab457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612adc57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612b0457600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115612b2c57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000612c5682612cbf565b9050919050565b6000612c6882612cbf565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612d16578082015181840152602081019050612cfb565b83811115612d25576000848401525b50505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015612d5957612dfc565b60046000803e612d6a600051612d3c565b6308c379a08114612d7b5750612dfc565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715612da757505050612dfc565b808201805167ffffffffffffffff811115612dc6575050505050612dfc565b8060208301013d8501811115612de157505050505050612dfc565b612dea82612d2b565b60208401016040528296505050505050505b90565b612e0881612c4b565b8114612e1357600080fd5b50565b612e1f81612c5d565b8114612e2a57600080fd5b50565b612e3681612c6f565b8114612e4157600080fd5b50565b612e4d81612c7b565b8114612e5857600080fd5b50565b612e6481612cdf565b8114612e6f57600080fd5b5056fe61546f6b656e2073686f756c64206e6f74206265207a65726f2061646472657373a264697066735822122003f14718f7484a885f081a8a26e177dc6f0e566d4c7b2fc1bbe48b7b7dc584e564736f6c634300060c0033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/aave/HAaveProtocol.sol:HAaveProtocol",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/aave/HAaveProtocol.sol:HAaveProtocol",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}