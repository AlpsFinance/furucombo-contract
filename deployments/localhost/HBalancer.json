{
  "address": "0xdC79264be1eB4cF8501b4eD00E4F2695fb7e8F0c",
  "abi": [
    {
      "inputs": [],
      "name": "BACTIONS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CUBE_COUNTER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MSG_SENDER_KEY",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENTAGE_BASE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POSTPROCESS_SIG",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PROXY_REGISTRY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "cache",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "exitswapPoolAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenAmountOut",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "maxAmountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "joinPool",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenAmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minPoolAmountOut",
          "type": "uint256"
        }
      ],
      "name": "joinswapExternAmountIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "postProcess",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stack",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf1ae4ad60433003ba66c0a26586521c231669c883cd106d0a01431bb9d909821",
  "receipt": {
    "to": null,
    "from": "0xE8b558C4a3f20980E5d781f46D2A4Dd86dA7D449",
    "contractAddress": "0xdC79264be1eB4cF8501b4eD00E4F2695fb7e8F0c",
    "transactionIndex": 0,
    "gasUsed": "2338458",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xee336fbd0feb70d9b6a8e20c3372839f395ba2c59e465f5da9a43c98c0680028",
    "transactionHash": "0xf1ae4ad60433003ba66c0a26586521c231669c883cd106d0a01431bb9d909821",
    "logs": [],
    "blockNumber": 13356605,
    "cumulativeGasUsed": "2338458",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "05a3724dc9e1f283fb20820d17e328b2",
  "metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BACTIONS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUBE_COUNTER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MSG_SENDER_KEY\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENTAGE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POSTPROCESS_SIG\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PROXY_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"cache\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exitswapPoolAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPoolAmountOut\",\"type\":\"uint256\"}],\"name\":\"joinswapExternAmountIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"postProcess\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stack\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/handlers/balancer/HBalancer.sol\":\"HBalancer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa6a15ddddcbf29d2922a1e0d4151b5d2d33da24b93cc9ebc12390e0d855532f8\",\"license\":\"MIT\"},\"contracts/Config.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ncontract Config {\\n    // function signature of \\\"postProcess()\\\"\\n    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\\n\\n    // The base amount of percentage function\\n    uint256 public constant PERCENTAGE_BASE = 1 ether;\\n\\n    // Handler post-process type. Others should not happen now.\\n    enum HandlerType {Token, Custom, Others}\\n}\\n\",\"keccak256\":\"0x84da824c043284d787c274afadc1ef0fe8526d5c76616f1bcb11e0c604b2ea87\"},\"contracts/Storage.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"./lib/LibCache.sol\\\";\\nimport \\\"./lib/LibStack.sol\\\";\\n\\n/// @notice A cache structure composed by a bytes32 array\\ncontract Storage {\\n    using LibCache for mapping(bytes32 => bytes32);\\n    using LibStack for bytes32[];\\n\\n    bytes32[] public stack;\\n    mapping(bytes32 => bytes32) public cache;\\n\\n    // keccak256 hash of \\\"msg.sender\\\"\\n    // prettier-ignore\\n    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\\n\\n    // keccak256 hash of \\\"cube.counter\\\"\\n    // prettier-ignore\\n    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\\n\\n    modifier isStackEmpty() {\\n        require(stack.length == 0, \\\"Stack not empty\\\");\\n        _;\\n    }\\n\\n    modifier isCubeCounterZero() {\\n        require(_getCubeCounter() == 0, \\\"Cube counter not zero\\\");\\n        _;\\n    }\\n\\n    modifier isInitialized() {\\n        require(_getSender() != address(0), \\\"Sender is not initialized\\\");\\n        _;\\n    }\\n\\n    modifier isNotInitialized() {\\n        require(_getSender() == address(0), \\\"Sender is initialized\\\");\\n        _;\\n    }\\n\\n    function _setSender() internal isNotInitialized {\\n        cache.setAddress(MSG_SENDER_KEY, msg.sender);\\n    }\\n\\n    function _resetSender() internal {\\n        cache.setAddress(MSG_SENDER_KEY, address(0));\\n    }\\n\\n    function _getSender() internal view returns (address) {\\n        return cache.getAddress(MSG_SENDER_KEY);\\n    }\\n\\n    function _addCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\\n    }\\n\\n    function _resetCubeCounter() internal {\\n        cache.setUint256(CUBE_COUNTER_KEY, 0);\\n    }\\n\\n    function _getCubeCounter() internal view returns (uint256) {\\n        return cache.getUint256(CUBE_COUNTER_KEY);\\n    }\\n}\\n\",\"keccak256\":\"0x3ddd7791b01e900d50c1f8ddf3e38cd692d896422c3c9f929862c41078a37d57\"},\"contracts/handlers/HandlerBase.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"../interface/IERC20Usdt.sol\\\";\\n\\nimport \\\"../Config.sol\\\";\\nimport \\\"../Storage.sol\\\";\\n\\nabstract contract HandlerBase is Storage, Config {\\n    using SafeERC20 for IERC20;\\n\\n    function postProcess() external payable virtual {\\n        revert(\\\"Invalid post process\\\");\\n        /* Implementation template\\n        bytes4 sig = stack.getSig();\\n        if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_1()\\\")))) {\\n            // Do something\\n        } else if (sig == bytes4(keccak256(bytes(\\\"handlerFunction_2()\\\")))) {\\n            bytes32 temp = stack.get();\\n            // Do something\\n        } else revert(\\\"Invalid post process\\\");\\n        */\\n    }\\n\\n    function _updateToken(address token) internal {\\n        stack.setAddress(token);\\n        // Ignore token type to fit old handlers\\n        // stack.setHandlerType(uint256(HandlerType.Token));\\n    }\\n\\n    function _updatePostProcess(bytes32[] memory params) internal {\\n        for (uint256 i = params.length; i > 0; i--) {\\n            stack.set(params[i - 1]);\\n        }\\n        stack.set(msg.sig);\\n        stack.setHandlerType(HandlerType.Custom);\\n    }\\n\\n    function getContractName() public pure virtual returns (string memory);\\n\\n    function _revertMsg(string memory functionName, string memory reason)\\n        internal\\n        view\\n    {\\n        revert(\\n            string(\\n                abi.encodePacked(\\n                    _uint2String(_getCubeCounter()),\\n                    \\\"_\\\",\\n                    getContractName(),\\n                    \\\"_\\\",\\n                    functionName,\\n                    \\\": \\\",\\n                    reason\\n                )\\n            )\\n        );\\n    }\\n\\n    function _revertMsg(string memory functionName) internal view {\\n        _revertMsg(functionName, \\\"Unspecified\\\");\\n    }\\n\\n    function _uint2String(uint256 n) internal pure returns (string memory) {\\n        if (n == 0) {\\n            return \\\"0\\\";\\n        } else {\\n            uint256 len = 0;\\n            for (uint256 temp = n; temp > 0; temp /= 10) {\\n                len++;\\n            }\\n            bytes memory str = new bytes(len);\\n            for (uint256 i = len; i > 0; i--) {\\n                str[i - 1] = bytes1(uint8(48 + (n % 10)));\\n                n /= 10;\\n            }\\n            return string(str);\\n        }\\n    }\\n\\n    function _getBalance(address token, uint256 amount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (amount != uint256(-1)) {\\n            return amount;\\n        }\\n\\n        // ETH case\\n        if (\\n            token == address(0) ||\\n            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\\n        ) {\\n            return address(this).balance;\\n        }\\n        // ERC20 token case\\n        return IERC20(token).balanceOf(address(this));\\n    }\\n\\n    function _tokenApprove(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        try IERC20Usdt(token).approve(spender, amount) {} catch {\\n            IERC20(token).safeApprove(spender, 0);\\n            IERC20(token).safeApprove(spender, amount);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe1e8d75866bd8feb53d1b0b7bed66f4748cc0408635d83d1bf1cce458afa3928\"},\"contracts/handlers/balancer/HBalancer.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../maker/IDSProxy.sol\\\";\\nimport \\\"./IBPool.sol\\\";\\nimport \\\"../HandlerBase.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract HBalancer is HandlerBase {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint256;\\n\\n    // prettier-ignore\\n    address public constant BACTIONS = 0xde4A25A0b9589689945d842c5ba0CF4f0D4eB3ac;\\n    // prettier-ignore\\n    address public constant PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\\n\\n    function getContractName() public pure override returns (string memory) {\\n        return \\\"HBalancer\\\";\\n    }\\n\\n    function joinswapExternAmountIn(\\n        address pool,\\n        address tokenIn,\\n        uint256 tokenAmountIn,\\n        uint256 minPoolAmountOut\\n    ) external payable returns (uint256) {\\n        // Get furucombo DSProxy\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        uint256 beforePoolAmount = IERC20(pool).balanceOf(address(this));\\n\\n        // Execute \\\"joinswapExternAmountIn\\\" by using DSProxy\\n        tokenAmountIn = _getBalance(tokenIn, tokenAmountIn);\\n        IERC20(tokenIn).safeApprove(address(proxy), tokenAmountIn);\\n        try\\n            proxy.execute(\\n                BACTIONS,\\n                abi.encodeWithSelector(\\n                    // selector of \\\"joinswapExternAmountIn(address,address,uint256,uint256)\\\"\\n                    0xc1762b15,\\n                    pool,\\n                    tokenIn,\\n                    tokenAmountIn,\\n                    minPoolAmountOut\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"joinswapExternAmountIn\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"joinswapExternAmountIn\\\");\\n        }\\n        IERC20(tokenIn).safeApprove(address(proxy), 0);\\n        uint256 afterPoolAmount = IERC20(pool).balanceOf(address(this));\\n\\n        // Update post process\\n        _updateToken(pool);\\n        return afterPoolAmount.sub(beforePoolAmount);\\n    }\\n\\n    function joinPool(\\n        address pool,\\n        uint256 poolAmountOut,\\n        uint256[] memory maxAmountsIn\\n    ) external payable returns (uint256[] memory) {\\n        // Get all tokens of pool\\n        IBPool bPool = IBPool(pool);\\n        address[] memory tokens = bPool.getFinalTokens();\\n        if (tokens.length != maxAmountsIn.length)\\n            _revertMsg(\\\"joinPool\\\", \\\"token and amount does not match\\\");\\n\\n        // Get furucombo DSProxy\\n        IDSProxy proxy = IDSProxy(_getProxy(address(this)));\\n        uint256[] memory amountsIn = new uint256[](tokens.length);\\n\\n        // Approve all erc20 token to Proxy\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            maxAmountsIn[i] = _getBalance(tokens[i], maxAmountsIn[i]);\\n            IERC20(tokens[i]).safeApprove(address(proxy), maxAmountsIn[i]);\\n            amountsIn[i] = IERC20(tokens[i]).balanceOf(address(this));\\n        }\\n\\n        // Execute \\\"joinPool\\\" by using DSProxy\\n        try\\n            proxy.execute(\\n                BACTIONS,\\n                abi.encodeWithSelector(\\n                    // selector of \\\"joinPool(address,uint256,uint256[])\\\"\\n                    0x8a5c57df,\\n                    pool,\\n                    poolAmountOut,\\n                    maxAmountsIn\\n                )\\n            )\\n        {} catch Error(string memory reason) {\\n            _revertMsg(\\\"joinPool\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"joinPool\\\");\\n        }\\n\\n        // Reset approval of tokens to 0\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            IERC20(tokens[i]).safeApprove(address(proxy), 0);\\n            amountsIn[i] = amountsIn[i].sub(\\n                IERC20(tokens[i]).balanceOf(address(this))\\n            );\\n        }\\n\\n        // Update post process\\n        _updateToken(pool);\\n        return amountsIn;\\n    }\\n\\n    function exitswapPoolAmountIn(\\n        address pool,\\n        address tokenOut,\\n        uint256 poolAmountIn,\\n        uint256 minAmountOut\\n    ) external payable returns (uint256 tokenAmountOut) {\\n        // Get pool of balancer\\n        IBPool bPool = IBPool(pool);\\n\\n        // Call exitswapPoolAmountIn function of balancer pool\\n        poolAmountIn = _getBalance(address(bPool), poolAmountIn);\\n        try\\n            bPool.exitswapPoolAmountIn(tokenOut, poolAmountIn, minAmountOut)\\n        returns (uint256 amount) {\\n            tokenAmountOut = amount;\\n        } catch Error(string memory reason) {\\n            _revertMsg(\\\"exitswapPoolAmountIn\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exitswapPoolAmountIn\\\");\\n        }\\n\\n        // Update post process\\n        _updateToken(tokenOut);\\n    }\\n\\n    function exitPool(\\n        address pool,\\n        uint256 poolAmountIn,\\n        uint256[] calldata minAmountsOut\\n    ) external payable returns (uint256[] memory) {\\n        // Get all tokens of pool\\n        IBPool bPool = IBPool(pool);\\n\\n        address[] memory tokens = bPool.getFinalTokens();\\n        // uint256[tokens.length] memory tokenAmounts;\\n        if (minAmountsOut.length != tokens.length)\\n            _revertMsg(\\\"exitPool\\\", \\\"token and amount does not match\\\");\\n\\n        uint256[] memory amountsIn = new uint256[](tokens.length);\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            amountsIn[i] = IERC20(tokens[i]).balanceOf(address(this));\\n        }\\n\\n        // Call exitPool function of balancer pool\\n        poolAmountIn = _getBalance(address(bPool), poolAmountIn);\\n        try bPool.exitPool(poolAmountIn, minAmountsOut) {} catch Error(\\n            string memory reason\\n        ) {\\n            _revertMsg(\\\"exitPool\\\", reason);\\n        } catch {\\n            _revertMsg(\\\"exitPool\\\");\\n        }\\n\\n        // Update post process\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            _updateToken(tokens[i]);\\n            amountsIn[i] = IERC20(tokens[i]).balanceOf(address(this)).sub(\\n                amountsIn[i]\\n            );\\n        }\\n        return amountsIn;\\n    }\\n\\n    function _getProxy(address user) internal returns (address) {\\n        return IDSProxyRegistry(PROXY_REGISTRY).proxies(user);\\n    }\\n}\\n\",\"keccak256\":\"0x98da5c5d3e3bc1021afd3296c517d9d6941f1a6c8efa0de9686555e6c801a032\"},\"contracts/handlers/balancer/IBPool.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IBPool {\\n    function isBound(address t) external view returns (bool);\\n    function getFinalTokens() external view returns (address[] memory);\\n    function getBalance(address token) external view returns (uint256);\\n    function setSwapFee(uint256 swapFee) external;\\n    function setController(address controller) external;\\n    function setPublicSwap(bool public_) external;\\n    function finalize() external;\\n    function totalSupply() external view returns (uint256);\\n    function bind(address token, uint256 balance, uint256 denorm) external;\\n    function rebind(address token, uint256 balance, uint256 denorm) external;\\n    function unbind(address token) external;\\n    function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\\n    function joinswapExternAmountIn(address tokenIn, uint256 tokenAmountIn, uint256 minPoolAmountOut) external returns (uint256 poolAmountOut);\\n    function exitswapPoolAmountIn(address tokenOut, uint256 poolAmountIn, uint256 minAmountOut) external payable returns (uint256 tokenAmountOut);\\n    function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\\n}\\n\",\"keccak256\":\"0xf850dc3ec7863e910e545d0ebef089e9ff10323b6f79e8552e30ec992c914859\"},\"contracts/handlers/maker/IDSProxy.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IDSProxy {\\n    function execute(address _target, bytes calldata _data) external payable returns (bytes32 response);\\n    function owner() external view returns (address);\\n    function setAuthority(address authority_) external;\\n}\\n\\ninterface IDSProxyFactory {\\n    function isProxy(address proxy) external view returns (bool);\\n    function build() external returns (address);\\n    function build(address owner) external returns (address);\\n}\\n\\ninterface IDSProxyRegistry {\\n    function proxies(address input) external view returns (address);\\n    function build() external returns (address);\\n    function build(address owner) external returns (address);\\n}\\n\",\"keccak256\":\"0xa48fa308aae7ac9194c8fa839cf4e389f05ec214f25f0e415de8b72b658405e9\"},\"contracts/interface/IERC20Usdt.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\ninterface IERC20Usdt {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address recipient, uint256 amount) external;\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external;\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa613b68b4c072569fdfe50ef21b084d283e25552296c2850695fcd51e91a5e06\"},\"contracts/lib/LibCache.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nlibrary LibCache {\\n    function set(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        bytes32 _value\\n    ) internal {\\n        _cache[_key] = _value;\\n    }\\n\\n    function setAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        address _value\\n    ) internal {\\n        _cache[_key] = bytes32(uint256(uint160(_value)));\\n    }\\n\\n    function setUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key,\\n        uint256 _value\\n    ) internal {\\n        _cache[_key] = bytes32(_value);\\n    }\\n\\n    function getAddress(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (address ret) {\\n        ret = address(uint160(uint256(_cache[_key])));\\n    }\\n\\n    function getUint256(\\n        mapping(bytes32 => bytes32) storage _cache,\\n        bytes32 _key\\n    ) internal view returns (uint256 ret) {\\n        ret = uint256(_cache[_key]);\\n    }\\n\\n    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        ret = _cache[_key];\\n    }\\n}\\n\",\"keccak256\":\"0x914364449fbcd7bd3b1a68f2879748e3aa5b9a08c491abf94ef89fade40d6157\"},\"contracts/lib/LibStack.sol\":{\"content\":\"pragma solidity ^0.6.0;\\n\\nimport \\\"../Config.sol\\\";\\n\\nlibrary LibStack {\\n    function setAddress(bytes32[] storage _stack, address _input) internal {\\n        _stack.push(bytes32(uint256(uint160(_input))));\\n    }\\n\\n    function set(bytes32[] storage _stack, bytes32 _input) internal {\\n        _stack.push(_input);\\n    }\\n\\n    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\\n        internal\\n    {\\n        _stack.push(bytes12(uint96(_input)));\\n    }\\n\\n    function getAddress(bytes32[] storage _stack)\\n        internal\\n        returns (address ret)\\n    {\\n        ret = address(uint160(uint256(peek(_stack))));\\n        _stack.pop();\\n    }\\n\\n    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\\n        ret = bytes4(peek(_stack));\\n        _stack.pop();\\n    }\\n\\n    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\\n        ret = peek(_stack);\\n        _stack.pop();\\n    }\\n\\n    function peek(bytes32[] storage _stack)\\n        internal\\n        view\\n        returns (bytes32 ret)\\n    {\\n        require(_stack.length > 0, \\\"stack empty\\\");\\n        ret = _stack[_stack.length - 1];\\n    }\\n}\\n\",\"keccak256\":\"0xa2a00c0bc54141332653dd80503187da41a4fb1a3817277d409539d5cf5b8279\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612976806100206000396000f3fe6080604052600436106100dd5760003560e01c80638a5c57df1161007f578063c272291611610059578063c27229161461057b578063dc9031c414610585578063f5f5ba72146105d4578063fa2901a514610664576100dd565b80638a5c57df1461036957806399eb59b9146104a0578063c1762b15146104ef576100dd565b806363ced092116100bb57806363ced0921461017957806374c9ab071461027157806375da771d146102b257806387c139431461033e576100dd565b80630f532d18146100e25780631413dc7d1461010d5780634bbc298714610138575b600080fd5b3480156100ee57600080fd5b506100f76106ae565b6040518082815260200191505060405180910390f35b34801561011957600080fd5b506101226106d5565b6040518082815260200191505060405180910390f35b34801561014457600080fd5b5061014d6106fc565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61021a6004803603606081101561018f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156101d657600080fd5b8201836020820111156101e857600080fd5b8035906020019184602083028401116401000000008311171561020a57600080fd5b9091929391929390505050610714565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561025d578082015181840152602081019050610242565b505050509050019250505060405180910390f35b34801561027d57600080fd5b50610286610c6b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610328600480360360808110156102c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610c83565b6040518082815260200191505060405180910390f35b34801561034a57600080fd5b50610353610df9565b6040518082815260200191505060405180910390f35b6104496004803603606081101561037f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156103c657600080fd5b8201836020820111156103d857600080fd5b803590602001918460208302840111640100000000831117156103fa57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610e05565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561048c578082015181840152602081019050610471565b505050509050019250505060405180910390f35b3480156104ac57600080fd5b506104d9600480360360208110156104c357600080fd5b8101908080359060200190929190505050611561565b6040518082815260200191505060405180910390f35b6105656004803603608081101561050557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611579565b6040518082815260200191505060405180910390f35b6105836119b9565b005b34801561059157600080fd5b506105be600480360360208110156105a857600080fd5b8101908080359060200190929190505050611a27565b6040518082815260200191505060405180910390f35b3480156105e057600080fd5b506105e9611a48565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561062957808201518184015260208101905061060e565b50505050905090810190601f1680156106565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561067057600080fd5b50610679611a85565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe481565b6060600085905060608173ffffffffffffffffffffffffffffffffffffffff1663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156107a157600080fd5b81019080805160405193929190846401000000008211156107c157600080fd5b838201915060208201858111156107d757600080fd5b82518660208202830111640100000000821117156107f457600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561082b578082015181840152602081019050610810565b505050509050016040525050509050805185859050146108ba576108b96040518060400160405280600881526020017f65786974506f6f6c0000000000000000000000000000000000000000000000008152506040518060400160405280601f81526020017f746f6b656e20616e6420616d6f756e7420646f6573206e6f74206d6174636800815250611a90565b5b6060815167ffffffffffffffff811180156108d457600080fd5b506040519080825280602002602001820160405280156109035781602001602082028036833780820191505090505b50905060005b82518110156109ec5782818151811061091e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561098c57600080fd5b505afa1580156109a0573d6000803e3d6000fd5b505050506040513d60208110156109b657600080fd5b81019080805190602001909291905050508282815181106109d357fe5b6020026020010181815250508080600101915050610909565b506109f78388611d23565b96508273ffffffffffffffffffffffffffffffffffffffff1663b02f0b738888886040518463ffffffff1660e01b815260040180848152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015610a8357600080fd5b505af1925050508015610a94575060015b610b3457610aa0612804565b80610aab5750610af0565b610aea6040518060400160405280600881526020017f65786974506f6f6c00000000000000000000000000000000000000000000000081525082611a90565b50610b2f565b610b2e6040518060400160405280600881526020017f65786974506f6f6c000000000000000000000000000000000000000000000000815250611e86565b5b610b35565b5b60005b8251811015610c5c57610b5d838281518110610b5057fe5b6020026020010151611ec8565b610c37828281518110610b6c57fe5b6020026020010151848381518110610b8057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d6020811015610c1857600080fd5b8101908080519060200190929190505050611edf90919063ffffffff16565b828281518110610c4357fe5b6020026020010181815250508080600101915050610b38565b50809350505050949350505050565b73de4a25a0b9589689945d842c5ba0cf4f0d4eb3ac81565b600080859050610c938185611d23565b93508073ffffffffffffffffffffffffffffffffffffffff166346ab38f18686866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b158015610d0e57600080fd5b505af1925050508015610d4257506040513d6020811015610d2e57600080fd5b810190808051906020019092919050505060015b610de257610d4e612804565b80610d595750610d9e565b610d986040518060400160405280601481526020017f6578697473776170506f6f6c416d6f756e74496e00000000000000000000000081525082611a90565b50610ddd565b610ddc6040518060400160405280601481526020017f6578697473776170506f6f6c416d6f756e74496e000000000000000000000000815250611e86565b5b610de7565b809250505b610df085611ec8565b50949350505050565b670de0b6b3a764000081565b6060600084905060608173ffffffffffffffffffffffffffffffffffffffff1663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b158015610e5457600080fd5b505afa158015610e68573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610e9257600080fd5b8101908080516040519392919084640100000000821115610eb257600080fd5b83820191506020820185811115610ec857600080fd5b8251866020820283011164010000000082111715610ee557600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610f1c578082015181840152602081019050610f01565b5050505090500160405250505090508351815114610fa957610fa86040518060400160405280600881526020017f6a6f696e506f6f6c0000000000000000000000000000000000000000000000008152506040518060400160405280601f81526020017f746f6b656e20616e6420616d6f756e7420646f6573206e6f74206d6174636800815250611a90565b5b6000610fb430611f29565b90506060825167ffffffffffffffff81118015610fd057600080fd5b50604051908082528060200260200182016040528015610fff5781602001602082028036833780820191505090505b50905060005b83518110156111815761103e84828151811061101d57fe5b602002602001015188838151811061103157fe5b6020026020010151611d23565b87828151811061104a57fe5b6020026020010181815250506110a78388838151811061106657fe5b602002602001015186848151811061107a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611fe89092919063ffffffff16565b8381815181106110b357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561112157600080fd5b505afa158015611135573d6000803e3d6000fd5b505050506040513d602081101561114b57600080fd5b810190808051906020019092919050505082828151811061116857fe5b6020026020010181815250508080600101915050611005565b508173ffffffffffffffffffffffffffffffffffffffff16631cff79cd73de4a25a0b9589689945d842c5ba0cf4f0d4eb3ac638a5c57df8b8b8b604051602401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611223578082015181840152602081019050611208565b505050509050019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112dc5780820151818401526020810190506112c1565b50505050905090810190601f1680156113095780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561132957600080fd5b505af192505050801561135d57506040513d602081101561134957600080fd5b810190808051906020019092919050505060015b6113fd57611369612804565b8061137457506113b9565b6113b36040518060400160405280600881526020017f6a6f696e506f6f6c00000000000000000000000000000000000000000000000081525082611a90565b506113f8565b6113f76040518060400160405280600881526020017f6a6f696e506f6f6c000000000000000000000000000000000000000000000000815250611e86565b5b6113ff565b505b60005b83518110156115495761144a83600086848151811061141d57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611fe89092919063ffffffff16565b61152484828151811061145957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156114c757600080fd5b505afa1580156114db573d6000803e3d6000fd5b505050506040513d60208110156114f157600080fd5b810190808051906020019092919050505083838151811061150e57fe5b6020026020010151611edf90919063ffffffff16565b82828151811061153057fe5b6020026020010181815250508080600101915050611402565b5061155388611ec8565b809450505050509392505050565b60016020528060005260406000206000915090505481565b60008061158530611f29565b905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d602081101561161a57600080fd5b810190808051906020019092919050505090506116378686611d23565b945061166482868873ffffffffffffffffffffffffffffffffffffffff16611fe89092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff16631cff79cd73de4a25a0b9589689945d842c5ba0cf4f0d4eb3ac63c1762b158a8a8a8a604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561179b578082015181840152602081019050611780565b50505050905090810190601f1680156117c85780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156117e857600080fd5b505af192505050801561181c57506040513d602081101561180857600080fd5b810190808051906020019092919050505060015b6118bc57611828612804565b806118335750611878565b6118726040518060400160405280601681526020017f6a6f696e7377617045787465726e416d6f756e74496e0000000000000000000081525082611a90565b506118b7565b6118b66040518060400160405280601681526020017f6a6f696e7377617045787465726e416d6f756e74496e00000000000000000000815250611e86565b5b6118be565b505b6118ea8260008873ffffffffffffffffffffffffffffffffffffffff16611fe89092919063ffffffff16565b60008773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561195357600080fd5b505afa158015611967573d6000803e3d6000fd5b505050506040513d602081101561197d57600080fd5b8101908080519060200190929190505050905061199988611ec8565b6119ac8282611edf90919063ffffffff16565b9350505050949350505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b60008181548110611a3457fe5b906000526020600020016000915090505481565b60606040518060400160405280600981526020017f4842616c616e6365720000000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b611aa0611a9b6121ad565b6121eb565b611aa8611a48565b83836040516020018085805190602001908083835b60208310611ae05780518252602082019150602081019050602083039250611abd565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b60208310611b595780518252602082019150602081019050602083039250611b36565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310611bd25780518252602082019150602081019050602083039250611baf565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b60208310611c4b5780518252602082019150602081019050602083039250611c28565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ce8578082015181840152602081019050611ccd565b50505050905090810190601f168015611d155780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214611d5457819050611e80565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611dce575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15611ddb57479050611e80565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d6020811015611e6c57600080fd5b810190808051906020019092919050505090505b92915050565b611ec5816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250611a90565b50565b611edc81600061233290919063ffffffff16565b50565b6000611f2183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612377565b905092915050565b6000734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611fa657600080fd5b505afa158015611fba573d6000803e3d6000fd5b505050506040513d6020811015611fd057600080fd5b81019080805190602001909291905050509050919050565b60008114806120b6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b8101908080519060200190929190505050145b61210b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061290b6036913960400191505060405180910390fd5b6121a88363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612437565b505050565b60006121e67ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161252690919063ffffffff16565b905090565b60606000821415612233576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061232d565b6000808390505b600081111561225d578180600101925050600a818161225557fe5b04905061223a565b5060608167ffffffffffffffff8111801561227757600080fd5b506040519080825280601f01601f1916602001820160405280156122aa5781602001600182028036833780820191505090505b50905060008290505b600081111561232657600a85816122c657fe5b0660300160f81b8260018303815181106122dc57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161231557fe5b0494508080600190039150506122b3565b5080925050505b919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b6000838311158290612424576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123e95780820151818401526020810190506123ce565b50505050905090810190601f1680156124165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6060612499826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125469092919063ffffffff16565b9050600081511115612521578080602001905160208110156124ba57600080fd5b8101908080519060200190929190505050612520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806128e1602a913960400191505060405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b6060612555848460008561255e565b90509392505050565b6060824710156125b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806128bb6026913960400191505060405180910390fd5b6125c285612707565b612634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106126845780518252602082019150602081019050602083039250612661565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146126e6576040519150601f19603f3d011682016040523d82523d6000602084013e6126eb565b606091505b50915091506126fb82828661271a565b92505050949350505050565b600080823b905060008111915050919050565b6060831561272a578290506127df565b60008351111561273d5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127a4578082015181840152602081019050612789565b50505050905090810190601f1680156127d15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015612814576128b7565b60046000803e6128256000516127f7565b6308c379a0811461283657506128b7565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715612862575050506128b7565b808201805167ffffffffffffffff8111156128815750505050506128b7565b8060208301013d850181111561289c575050505050506128b7565b6128a5826127e6565b60208401016040528296505050505050505b9056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122069478abb841d88f7c866a1b1cf797b71fac406d6949018540ba667d267d7a54464736f6c634300060c0033",
  "deployedBytecode": "0x6080604052600436106100dd5760003560e01c80638a5c57df1161007f578063c272291611610059578063c27229161461057b578063dc9031c414610585578063f5f5ba72146105d4578063fa2901a514610664576100dd565b80638a5c57df1461036957806399eb59b9146104a0578063c1762b15146104ef576100dd565b806363ced092116100bb57806363ced0921461017957806374c9ab071461027157806375da771d146102b257806387c139431461033e576100dd565b80630f532d18146100e25780631413dc7d1461010d5780634bbc298714610138575b600080fd5b3480156100ee57600080fd5b506100f76106ae565b6040518082815260200191505060405180910390f35b34801561011957600080fd5b506101226106d5565b6040518082815260200191505060405180910390f35b34801561014457600080fd5b5061014d6106fc565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61021a6004803603606081101561018f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156101d657600080fd5b8201836020820111156101e857600080fd5b8035906020019184602083028401116401000000008311171561020a57600080fd5b9091929391929390505050610714565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561025d578082015181840152602081019050610242565b505050509050019250505060405180910390f35b34801561027d57600080fd5b50610286610c6b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b610328600480360360808110156102c857600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050610c83565b6040518082815260200191505060405180910390f35b34801561034a57600080fd5b50610353610df9565b6040518082815260200191505060405180910390f35b6104496004803603606081101561037f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001906401000000008111156103c657600080fd5b8201836020820111156103d857600080fd5b803590602001918460208302840111640100000000831117156103fa57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050509192919290505050610e05565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561048c578082015181840152602081019050610471565b505050509050019250505060405180910390f35b3480156104ac57600080fd5b506104d9600480360360208110156104c357600080fd5b8101908080359060200190929190505050611561565b6040518082815260200191505060405180910390f35b6105656004803603608081101561050557600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190505050611579565b6040518082815260200191505060405180910390f35b6105836119b9565b005b34801561059157600080fd5b506105be600480360360208110156105a857600080fd5b8101908080359060200190929190505050611a27565b6040518082815260200191505060405180910390f35b3480156105e057600080fd5b506105e9611a48565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561062957808201518184015260208101905061060e565b50505050905090810190601f1680156106565780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561067057600080fd5b50610679611a85565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b7fb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a60001b81565b7ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b81565b734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe481565b6060600085905060608173ffffffffffffffffffffffffffffffffffffffff1663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b15801561076357600080fd5b505afa158015610777573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525060208110156107a157600080fd5b81019080805160405193929190846401000000008211156107c157600080fd5b838201915060208201858111156107d757600080fd5b82518660208202830111640100000000821117156107f457600080fd5b8083526020830192505050908051906020019060200280838360005b8381101561082b578082015181840152602081019050610810565b505050509050016040525050509050805185859050146108ba576108b96040518060400160405280600881526020017f65786974506f6f6c0000000000000000000000000000000000000000000000008152506040518060400160405280601f81526020017f746f6b656e20616e6420616d6f756e7420646f6573206e6f74206d6174636800815250611a90565b5b6060815167ffffffffffffffff811180156108d457600080fd5b506040519080825280602002602001820160405280156109035781602001602082028036833780820191505090505b50905060005b82518110156109ec5782818151811061091e57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561098c57600080fd5b505afa1580156109a0573d6000803e3d6000fd5b505050506040513d60208110156109b657600080fd5b81019080805190602001909291905050508282815181106109d357fe5b6020026020010181815250508080600101915050610909565b506109f78388611d23565b96508273ffffffffffffffffffffffffffffffffffffffff1663b02f0b738888886040518463ffffffff1660e01b815260040180848152602001806020018281038252848482818152602001925060200280828437600081840152601f19601f820116905080830192505050945050505050600060405180830381600087803b158015610a8357600080fd5b505af1925050508015610a94575060015b610b3457610aa0612804565b80610aab5750610af0565b610aea6040518060400160405280600881526020017f65786974506f6f6c00000000000000000000000000000000000000000000000081525082611a90565b50610b2f565b610b2e6040518060400160405280600881526020017f65786974506f6f6c000000000000000000000000000000000000000000000000815250611e86565b5b610b35565b5b60005b8251811015610c5c57610b5d838281518110610b5057fe5b6020026020010151611ec8565b610c37828281518110610b6c57fe5b6020026020010151848381518110610b8057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610bee57600080fd5b505afa158015610c02573d6000803e3d6000fd5b505050506040513d6020811015610c1857600080fd5b8101908080519060200190929190505050611edf90919063ffffffff16565b828281518110610c4357fe5b6020026020010181815250508080600101915050610b38565b50809350505050949350505050565b73de4a25a0b9589689945d842c5ba0cf4f0d4eb3ac81565b600080859050610c938185611d23565b93508073ffffffffffffffffffffffffffffffffffffffff166346ab38f18686866040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019350505050602060405180830381600087803b158015610d0e57600080fd5b505af1925050508015610d4257506040513d6020811015610d2e57600080fd5b810190808051906020019092919050505060015b610de257610d4e612804565b80610d595750610d9e565b610d986040518060400160405280601481526020017f6578697473776170506f6f6c416d6f756e74496e00000000000000000000000081525082611a90565b50610ddd565b610ddc6040518060400160405280601481526020017f6578697473776170506f6f6c416d6f756e74496e000000000000000000000000815250611e86565b5b610de7565b809250505b610df085611ec8565b50949350505050565b670de0b6b3a764000081565b6060600084905060608173ffffffffffffffffffffffffffffffffffffffff1663be3bbd2e6040518163ffffffff1660e01b815260040160006040518083038186803b158015610e5457600080fd5b505afa158015610e68573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052506020811015610e9257600080fd5b8101908080516040519392919084640100000000821115610eb257600080fd5b83820191506020820185811115610ec857600080fd5b8251866020820283011164010000000082111715610ee557600080fd5b8083526020830192505050908051906020019060200280838360005b83811015610f1c578082015181840152602081019050610f01565b5050505090500160405250505090508351815114610fa957610fa86040518060400160405280600881526020017f6a6f696e506f6f6c0000000000000000000000000000000000000000000000008152506040518060400160405280601f81526020017f746f6b656e20616e6420616d6f756e7420646f6573206e6f74206d6174636800815250611a90565b5b6000610fb430611f29565b90506060825167ffffffffffffffff81118015610fd057600080fd5b50604051908082528060200260200182016040528015610fff5781602001602082028036833780820191505090505b50905060005b83518110156111815761103e84828151811061101d57fe5b602002602001015188838151811061103157fe5b6020026020010151611d23565b87828151811061104a57fe5b6020026020010181815250506110a78388838151811061106657fe5b602002602001015186848151811061107a57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611fe89092919063ffffffff16565b8381815181106110b357fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561112157600080fd5b505afa158015611135573d6000803e3d6000fd5b505050506040513d602081101561114b57600080fd5b810190808051906020019092919050505082828151811061116857fe5b6020026020010181815250508080600101915050611005565b508173ffffffffffffffffffffffffffffffffffffffff16631cff79cd73de4a25a0b9589689945d842c5ba0cf4f0d4eb3ac638a5c57df8b8b8b604051602401808473ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019060200280838360005b83811015611223578082015181840152602081019050611208565b505050509050019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b838110156112dc5780820151818401526020810190506112c1565b50505050905090810190601f1680156113095780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b15801561132957600080fd5b505af192505050801561135d57506040513d602081101561134957600080fd5b810190808051906020019092919050505060015b6113fd57611369612804565b8061137457506113b9565b6113b36040518060400160405280600881526020017f6a6f696e506f6f6c00000000000000000000000000000000000000000000000081525082611a90565b506113f8565b6113f76040518060400160405280600881526020017f6a6f696e506f6f6c000000000000000000000000000000000000000000000000815250611e86565b5b6113ff565b505b60005b83518110156115495761144a83600086848151811061141d57fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16611fe89092919063ffffffff16565b61152484828151811061145957fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156114c757600080fd5b505afa1580156114db573d6000803e3d6000fd5b505050506040513d60208110156114f157600080fd5b810190808051906020019092919050505083838151811061150e57fe5b6020026020010151611edf90919063ffffffff16565b82828151811061153057fe5b6020026020010181815250508080600101915050611402565b5061155388611ec8565b809450505050509392505050565b60016020528060005260406000206000915090505481565b60008061158530611f29565b905060008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b1580156115f057600080fd5b505afa158015611604573d6000803e3d6000fd5b505050506040513d602081101561161a57600080fd5b810190808051906020019092919050505090506116378686611d23565b945061166482868873ffffffffffffffffffffffffffffffffffffffff16611fe89092919063ffffffff16565b8173ffffffffffffffffffffffffffffffffffffffff16631cff79cd73de4a25a0b9589689945d842c5ba0cf4f0d4eb3ac63c1762b158a8a8a8a604051602401808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381526020018281526020019450505050506040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561179b578082015181840152602081019050611780565b50505050905090810190601f1680156117c85780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156117e857600080fd5b505af192505050801561181c57506040513d602081101561180857600080fd5b810190808051906020019092919050505060015b6118bc57611828612804565b806118335750611878565b6118726040518060400160405280601681526020017f6a6f696e7377617045787465726e416d6f756e74496e0000000000000000000081525082611a90565b506118b7565b6118b66040518060400160405280601681526020017f6a6f696e7377617045787465726e416d6f756e74496e00000000000000000000815250611e86565b5b6118be565b505b6118ea8260008873ffffffffffffffffffffffffffffffffffffffff16611fe89092919063ffffffff16565b60008773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b15801561195357600080fd5b505afa158015611967573d6000803e3d6000fd5b505050506040513d602081101561197d57600080fd5b8101908080519060200190929190505050905061199988611ec8565b6119ac8282611edf90919063ffffffff16565b9350505050949350505050565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f496e76616c696420706f73742070726f6365737300000000000000000000000081525060200191505060405180910390fd5b60008181548110611a3457fe5b906000526020600020016000915090505481565b60606040518060400160405280600981526020017f4842616c616e6365720000000000000000000000000000000000000000000000815250905090565b63c272291660e01b81565b611aa0611a9b6121ad565b6121eb565b611aa8611a48565b83836040516020018085805190602001908083835b60208310611ae05780518252602082019150602081019050602083039250611abd565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b60208310611b595780518252602082019150602081019050602083039250611b36565b6001836020036101000a038019825116818451168082178552505050505050905001807f5f0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b60208310611bd25780518252602082019150602081019050602083039250611baf565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a2000000000000000000000000000000000000000000000000000000000000081525060020182805190602001908083835b60208310611c4b5780518252602082019150602081019050602083039250611c28565b6001836020036101000a0380198251168184511680821785525050505050509050019450505050506040516020818303038152906040526040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611ce8578082015181840152602081019050611ccd565b50505050905090810190601f168015611d155780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214611d5457819050611e80565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161480611dce575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b15611ddb57479050611e80565b8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611e4257600080fd5b505afa158015611e56573d6000803e3d6000fd5b505050506040513d6020811015611e6c57600080fd5b810190808051906020019092919050505090505b92915050565b611ec5816040518060400160405280600b81526020017f556e737065636966696564000000000000000000000000000000000000000000815250611a90565b50565b611edc81600061233290919063ffffffff16565b50565b6000611f2183836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250612377565b905092915050565b6000734678f0a6958e4d2bc4f1baf7bc52e8f3564f3fe473ffffffffffffffffffffffffffffffffffffffff1663c4552791836040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015611fa657600080fd5b505afa158015611fba573d6000803e3d6000fd5b505050506040513d6020811015611fd057600080fd5b81019080805190602001909291905050509050919050565b60008114806120b6575060008373ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e30856040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561207957600080fd5b505afa15801561208d573d6000803e3d6000fd5b505050506040513d60208110156120a357600080fd5b8101908080519060200190929190505050145b61210b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252603681526020018061290b6036913960400191505060405180910390fd5b6121a88363095ea7b360e01b8484604051602401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050612437565b505050565b60006121e67ff9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be60001b600161252690919063ffffffff16565b905090565b60606000821415612233576040518060400160405280600181526020017f3000000000000000000000000000000000000000000000000000000000000000815250905061232d565b6000808390505b600081111561225d578180600101925050600a818161225557fe5b04905061223a565b5060608167ffffffffffffffff8111801561227757600080fd5b506040519080825280601f01601f1916602001820160405280156122aa5781602001600182028036833780820191505090505b50905060008290505b600081111561232657600a85816122c657fe5b0660300160f81b8260018303815181106122dc57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a858161231557fe5b0494508080600190039150506122b3565b5080925050505b919050565b818173ffffffffffffffffffffffffffffffffffffffff1660001b90806001815401808255809150506001900390600052602060002001600090919091909150555050565b6000838311158290612424576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156123e95780820151818401526020810190506123ce565b50505050905090810190601f1680156124165780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5060008385039050809150509392505050565b6060612499826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166125469092919063ffffffff16565b9050600081511115612521578080602001905160208110156124ba57600080fd5b8101908080519060200190929190505050612520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806128e1602a913960400191505060405180910390fd5b5b505050565b60008260008381526020019081526020016000205460001c905092915050565b6060612555848460008561255e565b90509392505050565b6060824710156125b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001806128bb6026913960400191505060405180910390fd5b6125c285612707565b612634576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000081525060200191505060405180910390fd5b600060608673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b602083106126845780518252602082019150602081019050602083039250612661565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d80600081146126e6576040519150601f19603f3d011682016040523d82523d6000602084013e6126eb565b606091505b50915091506126fb82828661271a565b92505050949350505050565b600080823b905060008111915050919050565b6060831561272a578290506127df565b60008351111561273d5782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b838110156127a4578082015181840152602081019050612789565b50505050905090810190601f1680156127d15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b9392505050565b6000601f19601f8301169050919050565b60008160e01c9050919050565b600060443d1015612814576128b7565b60046000803e6128256000516127f7565b6308c379a0811461283657506128b7565b60405160043d036004823e80513d602482011167ffffffffffffffff82111715612862575050506128b7565b808201805167ffffffffffffffff8111156128815750505050506128b7565b8060208301013d850181111561289c575050505050506128b7565b6128a5826127e6565b60208401016040528296505050505050505b9056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c5361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122069478abb841d88f7c866a1b1cf797b71fac406d6949018540ba667d267d7a54464736f6c634300060c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2834,
        "contract": "contracts/handlers/balancer/HBalancer.sol:HBalancer",
        "label": "stack",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 2838,
        "contract": "contracts/handlers/balancer/HBalancer.sol:HBalancer",
        "label": "cache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      }
    }
  }
}